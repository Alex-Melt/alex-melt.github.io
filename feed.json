{
    "version": "https://jsonfeed.org/version/1",
    "title": "melt",
    "subtitle": "",
    "icon": "http://example.com/images/favicon.ico",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/arithmetic/LeetCode-300-399/",
            "url": "http://example.com/arithmetic/LeetCode-300-399/",
            "title": "LeetCode-300-399",
            "date_published": "2022-09-15T07:38:03.437Z",
            "content_html": "<h2 id=\"303区域和检索-数组不可变\"><a class=\"markdownIt-Anchor\" href=\"#303区域和检索-数组不可变\">#</a> 303. 区域和检索 - 数组不可变</h2>\n",
            "tags": [
                "算法",
                "LeetCode",
                "LeetCode"
            ]
        },
        {
            "id": "http://example.com/arithmetic/LeetCode-200-299/",
            "url": "http://example.com/arithmetic/LeetCode-200-299/",
            "title": "LeetCode-200-299",
            "date_published": "2022-09-06T01:17:01.230Z",
            "content_html": "<h2 id=\"217存在重复元素\"><a class=\"markdownIt-Anchor\" href=\"#217存在重复元素\">#</a> 217. 存在重复元素</h2>\n<blockquote>\n<p>给你一个整数数组  <code>nums</code>  。如果任一值在数组中出现 <strong>至少两次</strong> ，返回  <code>true</code>  ；如果数组中每个元素互不相同，返回  <code>false</code></p>\n</blockquote>\n<ul>\n<li>方法一：哈希表\n<ul>\n<li>将给定数组放入 set 中判断是否与原长度相同</li>\n</ul>\n</li>\n<li>方法二：排序\n<ul>\n<li>将数组排序，依次判断相邻两数是否相等</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"219存在重复元素ii\"><a class=\"markdownIt-Anchor\" href=\"#219存在重复元素ii\">#</a> 219. 存在重复元素 II</h2>\n<blockquote>\n<p>给你一个整数数组  <code>nums</code>  和一个整数  <code>k</code>  ，判断数组中是否存在两个 不同的索引 <code> i</code>  和 <code> j</code>  ，满足  <code>nums[i] == nums[j]</code>  且  <code>abs(i - j) &lt;= k</code>  。如果存在，返回  <code>true</code>  ；否则，返回  <code>false</code>  。</p>\n</blockquote>\n<h2 id=\"228汇总区间\"><a class=\"markdownIt-Anchor\" href=\"#228汇总区间\">#</a> 228. 汇总区间</h2>\n<blockquote>\n<p>给定一个  <strong>无重复元素</strong> 的 有序 整数数组  <code>nums </code> 。<br>\n返回 恰好覆盖数组中所有数字 的 最小有序 区间范围列表 。也就是说， <code>nums</code>  的每个元素都恰好被某个区间范围所覆盖，并且不存在属于某个范围但不属于 <code>nums</code>  的数字  <code>x</code>  。</p>\n</blockquote>\n<ul>\n<li>方法一：一次遍历\n<ul>\n<li>创建一个空列表</li>\n<li>将两个指针指向第一个元素 <code>left</code>  和 <code>right</code></li>\n<li>遍历，判断 <code>right+1==</code>  便利的数字</li>\n<li>若相等，则 <code>right</code>  向后移，反之，则追加到集合，并将 <code>left</code>  和 <code>right</code>  重新赋值为当前遍历的元素</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"268丢失的数字\"><a class=\"markdownIt-Anchor\" href=\"#268丢失的数字\">#</a> 268. 丢失的数字</h2>\n<blockquote>\n<p>给定一个包含  <code>[0, n]</code>  中  <code>n</code>  个数的数组  <code>nums</code>  ，找出  <code>[0, n]</code>  这个范围内没有出现在数组中的那个数。</p>\n</blockquote>\n<ul>\n<li>方法一：哈希集合\n<ul>\n<li>用 <code>range</code>  创建 [0,n]，遍历每一个数判断是否在给定的集合中</li>\n<li>若不在，则返回</li>\n</ul>\n</li>\n<li>方法二：排序\n<ul>\n<li>现将数组排序，根据下表和元素的值是否一致，可以使用枚举</li>\n</ul>\n</li>\n<li>方法三：位运算\n<ul>\n<li>使用异或的方式</li>\n</ul>\n</li>\n<li>方法四：数学\n<ul>\n<li>根据数学公式求出元素之和，0-n 的总和，两者之差即为值</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"283移动零\"><a class=\"markdownIt-Anchor\" href=\"#283移动零\">#</a> 283. 移动零</h2>\n<blockquote>\n<p>给定一个数组  <code>nums</code> ，编写一个函数将所有  <code>0</code>  移动到数组的末尾，同时保持非零元素的相对顺序。</p>\n</blockquote>\n<p><em>不复制数组的情况下原地对数组进行操作</em></p>\n<ul>\n<li>\n<p>方法一：一次遍历</p>\n<ul>\n<li>两个指针 <code>left</code> , <code>right</code>  下标给第一个第二个元素</li>\n<li>循环，当 <code>right</code>  小于等于最后一位时，终止循环</li>\n<li>判断 left 是不是为 0，判断 right 是不是 0，若 right 不是，则交换顺序</li>\n<li>若 right 是 0，则 right 向后移动，</li>\n<li>若 left 不是 0，则同时向后移动</li>\n</ul>\n</li>\n<li>\n<p>方法二：二次遍历</p>\n<ul>\n<li>两个指针，一个用来快速扫描，一个用来改变元素的值，指向第一个元素</li>\n<li>快速扫描判断是否值为 0，若不为 0，则将改变元素的值写入，然后两个指针同时后移；若为 0，则快速扫描的指针后移</li>\n<li>当扫描指针扫描到最后一个是，改变元素值的指针后的值全部用 0 填充</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "算法",
                "LeetCode",
                "LeetCode"
            ]
        },
        {
            "id": "http://example.com/language/python%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/",
            "url": "http://example.com/language/python%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/",
            "title": "python语法基础",
            "date_published": "2022-09-01T00:19:56.860Z",
            "content_html": "<h2 id=\"什么是python\"><a class=\"markdownIt-Anchor\" href=\"#什么是python\">#</a> 什么是 Python？</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python：巨蟒</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>python是一门程序设计语言</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>语言：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 自然语言：肢体语言、汉语、英语、法语......</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 机器语言：001101010101二进制（微码编程）</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 程序设计语言：C、C艹、C艹艹、Java、python、PHP、GO</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>语言的高级型：越接近自然语言的编程语言就越高级，越高级的编程语言效率越低。汇编语言相对来说开发难度高，但是效率相对高，语言相对低级。</pre></td></tr></table></figure><ul>\n<li>python</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python:1989年，圣诞节，Guido Van Rossum</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Guido，退出了python的决策层。回归。</pre></td></tr></table></figure><ul>\n<li>python 的特点</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 语法简洁而清晰</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 强大的类库（17W)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 胶水语言</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">4.</span> 纯面向对象的语言</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>其他特点：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 跨平台：win、linux、mac.....</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 运行机制：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 直接解释执行</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 先编译，后解释/执行</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 代码量较少</pre></td></tr></table></figure><ul>\n<li>python 的应用场景</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>领域：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 航空航天 图像识别</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 3D动画</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> WEB应用</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">4.</span> 云计算</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">5.</span> 企业应用</pre></td></tr></table></figure><ul>\n<li>python 解释器的实现</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> Cpython：原生的解释器（官方）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t用C语言实现的解释器</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> Jython：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t用Java实现的解释器</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> IronPython：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t用.NET实现的解释器</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">4.</span> pypy：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t用python实现的解释器</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>效率最高的是：pypy</pre></td></tr></table></figure><ul>\n<li>python 的安装</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 版本必须是3.8or3.9</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 安装，选择路径，强烈建议装在C盘并且路径中不要有中文，路径一定要牢记</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 勾选add ???? to path</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">4.</span> 下一步</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">5.</span> 打开cmd窗口，输入python，查看版本是否正确</pre></td></tr></table></figure><h2 id=\"标准数据类型\"><a class=\"markdownIt-Anchor\" href=\"#标准数据类型\">#</a> 标准数据类型</h2>\n<ul>\n<li>Numbers</li>\n<li>String</li>\n<li>List</li>\n<li>Tuple</li>\n<li>Set</li>\n<li>Dictionary</li>\n</ul>\n<p>可分类为可变与不可变：</p>\n<ul>\n<li>不可变：Number,String,Tuple,frozenset</li>\n<li>可变：List,Set,Dictionary</li>\n</ul>\n<blockquote>\n<p>可变与不可变是<em>相对引用地址</em>来说的，对于<em>不可变而言</em>，修改变量的值相当于新建了一个对象，而可变类型允许变量的值发生修改</p>\n</blockquote>\n<p><em>支持 int,float,bool,complex (复数)</em></p>\n<p><strong> <code>type</code>  与 <code>isinstance</code>  都可以判断所属类型</strong></p>\n<ul>\n<li>type (a)：不会认为子类是一种父类类型</li>\n<li>isinstance (a,int)：会认为子类是一种父类类型</li>\n</ul>\n<h2 id=\"运算符\"><a class=\"markdownIt-Anchor\" href=\"#运算符\">#</a> 运算符</h2>\n<ul>\n<li>\n<p>算术运算符</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">2</span><span class=\"token operator\">/</span><span class=\"token number\">7</span>\t\t<span class=\"token comment\">#除法，得到一个浮点数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span><span class=\"token operator\">//</span><span class=\"token number\">4</span>\t<span class=\"token comment\">#除法。得到一个整数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span><span class=\"token operator\">**</span><span class=\"token number\">5</span>\t<span class=\"token comment\">#乘方</span></pre></td></tr></table></figure></li>\n<li>\n<p>位运算符</p>\n<ul>\n<li><code>a&amp;b</code>  按位与运算</li>\n<li><code>a|b</code>  按位或运算</li>\n<li><code>a^b</code>  按位异或运算</li>\n<li><code>~a</code>  按位取反</li>\n<li><code>a&lt;&lt;2</code>  左移</li>\n<li><code>a&gt;&gt;2</code>  右移</li>\n</ul>\n</li>\n<li>\n<p>成员运算符</p>\n<ul>\n<li>in：判断是否在指定的序列中</li>\n<li>not in</li>\n</ul>\n</li>\n<li>\n<p>身份运算符</p>\n<ul>\n<li>is：判断两个标识符是不是引用一个对象</li>\n<li>is not</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"流程控制\"><a class=\"markdownIt-Anchor\" href=\"#流程控制\">#</a> 流程控制</h2>\n<h3 id=\"条件分支\"><a class=\"markdownIt-Anchor\" href=\"#条件分支\">#</a> 条件分支</h3>\n<ul>\n<li>if-else 结构</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>语法：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> if 布尔表达式:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\t\t代码</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> if 布尔表达式:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t\t代码</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\telse:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t\t代码</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> if 布尔表达式:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t\t代码</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\telif 布尔表达式:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t\t代码</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t...</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t...</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\telse:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\t代码</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>注意：</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> if语句不会影响和自己平级的其他结构</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> if和else中的代码不可能同时发生</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>输入一个人的分数：90分以上优秀，80-90良好，70-80普通，60-70及格，0-60不及格</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>代码块：</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t书写代码的块级结构</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tpython中用冒号和缩进来表示代码块</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t其他语言中：&#123;&#125;来表示代码块</pre></td></tr></table></figure><ul>\n<li>嵌套使用</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>if-elif-else结构中中，可以在任意一个代码块中嵌套if结构(三种中任意一种都可以)</pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>score <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入你的分数：'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> score <span class=\"token operator\">>=</span><span class=\"token number\">0</span> <span class=\"token keyword\">and</span> score <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> score <span class=\"token operator\">&lt;</span> <span class=\"token number\">60</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不及格'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">elif</span> score <span class=\"token operator\">&lt;</span> <span class=\"token number\">70</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'及格'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">elif</span> score <span class=\"token operator\">&lt;</span> <span class=\"token number\">80</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'普通'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">elif</span> score <span class=\"token operator\">&lt;</span> <span class=\"token number\">90</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'良好'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'优秀'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'你有病'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>else 悬挂问题</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tips:if或者else里面定义的内容，会泄露到上一级结构中</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> python可以很好地规避else悬挂问题</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t依靠严格的缩进</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">2.</span> C语言中if语句会和最近的else组成一个整体</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t有可能当前结构并不属于该if结构---称之为else悬挂问题</pre></td></tr></table></figure><ul>\n<li>断言</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>assert：是一个关键字</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>含义：判断assert之后的布尔表达式是否为真，如果为真则正常执行程序，如果为假，立刻终止程序并且抛出异常(AssertionError)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>语法：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tassert 布尔表达式:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>主动报错</pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">assert</span> a <span class=\"token operator\">></span> b</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hahaha'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"循环流程\"><a class=\"markdownIt-Anchor\" href=\"#循环流程\">#</a> 循环流程</h3>\n<ul>\n<li>while 循环</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>循环：重复执行代码</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 语法：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\twhile 布尔表达式:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t代码(循环体)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> 注意：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t控制while后面的布尔表达式，可能会出现死循环，也可能出现正常终止</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t死循环：无限循环</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 服务器</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 硬件</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t合理的控制循环条件</pre></td></tr></table></figure><figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>while True</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>while 1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>python2：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> True是一个保留字，可以被修改</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 每次执行while True的时候会对True的值进行校验</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> while 1的执行效率更高</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>python3：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> True是一个关键字，是不可变的</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 执行while True的时候不需要进行校验</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> while True while 1的效率是一致的</pre></td></tr></table></figure><ul>\n<li>for 循环</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>也称为计数循环</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>可迭代对象：是指拥有迭代器的对象</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>迭代器：是一个特殊的可迭代对象</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>可迭代对象：str、list、tuple 类似于这样的数据，我们称为可迭代对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">1.</span> 语法：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tfor 变量 in 可迭代对象:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t代码(循环体)</pre></td></tr></table></figure><ul>\n<li>range</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对象</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>range的参数必须是整型</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">1.</span> range(stop)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t返回一个range对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tstart：默认为0</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> range(start, stop[, step])</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t返回一个range对象</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tstart：开始的值</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tstop：结束的值（不包括）</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tstep：步长（可以是正数也可以是负数）</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token list punctuation\">3.</span> range对象是一个可迭代对象</pre></td></tr></table></figure><ul>\n<li>补充</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>知道循环次数：for循环</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>不知道循环次数但是知道循环条件：while循环</pre></td></tr></table></figure><ul>\n<li>break</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>跳出本层循环，之后的循环不再执行</pre></td></tr></table></figure><ul>\n<li>continue</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>跳出本次循环，之后的循环不影响</pre></td></tr></table></figure><ul>\n<li>循环嵌套</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>多个循环之间，可以任意嵌套使用</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> while里面套while</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> while里面套for</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> for里面套while</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">4.</span> for里面套for</pre></td></tr></table></figure><ul>\n<li>九九乘法表</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># i = 2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># range(1,3)=[1,2]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">'*'</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">'='</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>end<span class=\"token operator\">=</span><span class=\"token string\">'\\t'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"序列\"><a class=\"markdownIt-Anchor\" href=\"#序列\">#</a> 序列</h2>\n<ul>\n<li>list</li>\n<li>tuple</li>\n<li>str</li>\n</ul>\n<blockquote>\n<p>特点</p>\n</blockquote>\n<ol>\n<li>可迭代对象</li>\n<li>支持索引操作</li>\n<li>切片操作</li>\n</ol>\n<ul>\n<li>序列</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Sequence:序列</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>支持索引操作</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>支持切片操作</pre></td></tr></table></figure><ul>\n<li>序列所支持的操作</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 构造方法</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tstr()</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tlist()</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\ttuple()</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\trange()</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> len()</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tlen(obj)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tobj:必须有长度的概念，不然会报错</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token list punctuation\">3.</span> max()</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t返回最大值</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tmax(iterable)：返回iterable中的最大值</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token list punctuation\">4.</span> min()</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t返回最小值</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tmin(iterable)：返回iterable中的最小值</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token list punctuation\">5.</span> sum(iterable)</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t求和</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> iterable里面的所有元素都必须是自然数</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 不能是字符串</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token list punctuation\">6.</span> sorted(iterable, /, * , key=None, reverse=False)</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t排序</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t给iterable排序，默认是升序，如果reverse为True，则为降序</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token list punctuation\">7.</span> enumerate()</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t枚举</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t返回一个对象，该对象是一个可迭代对象</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t返回序列的元素的索引及对应值</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token list punctuation\">8.</span> zip()</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t返回一个zip对象</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t每一个元素都是元组</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t当最短的可迭代对象压缩完毕，则结束压缩</pre></td></tr></table></figure><ul>\n<li>补充</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>善用help函数</pre></td></tr></table></figure><h2 id=\"列表\"><a class=\"markdownIt-Anchor\" href=\"#列表\">#</a> 列表</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>列表：list   是一个类是一个对象</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 存储多个数据，有没有上限？理论上没有长度限制</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 存储多种数据</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> 是一个可迭代对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">4.</span> 列表是一个可变类型的数据</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>不可变类型</pre></td></tr></table></figure><h3 id=\"创建列表\"><a class=\"markdownIt-Anchor\" href=\"#创建列表\">#</a> 创建列表</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 直接创建</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tl = [元素1,元素2,...,元素n]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 普通列表：[1,2,3,4]整型列表，['a','b','c','d']字符串列表</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 混合列表：[1,2,'a','b',[1,2,3]]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> l = []:空列表</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 通过构造方法来创建</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> list():返回一个空的列表</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> list(iterable)：从可迭代对象中的元素，初始化一个列表</pre></td></tr></table></figure><h3 id=\"访问列表里面的元素\"><a class=\"markdownIt-Anchor\" href=\"#访问列表里面的元素\">#</a> 访问列表里面的元素</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>访问：读、改、删</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>读取元素：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 通过索引来获取元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t索引：下标</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t索引不是下标</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tpython中索引是从0开始技术</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t访问形式：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t变量[下标]---访问一个元素</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 读取所有的元素</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t遍历：所有的元素不重复、不遗漏的访问一遍</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t通过for来进行遍历</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 如果下标超出了范围则会报错</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t列表的长度：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t列表的下标范围：</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t0<span class=\"token strike\"><span class=\"token punctuation\">~</span><span class=\"token content\">len(l)-1</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t列表的索引支持负数</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t负号：代表的是方向（反向）</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t-1</span><span class=\"token punctuation\">~</span></span>-len(l)</pre></td></tr></table></figure><h3 id=\"螺旋填数\"><a class=\"markdownIt-Anchor\" href=\"#螺旋填数\">#</a> 螺旋填数</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>螺旋填数：读入两个整数m,n，输出一个m行n列的矩阵，这个矩阵是1~m * n这些自然数按照右、下、左、上螺旋填入的结果。</pre></td></tr></table></figure><h3 id=\"向列表中添加元素\"><a class=\"markdownIt-Anchor\" href=\"#向列表中添加元素\">#</a> 向列表中添加元素</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> append(obj):</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t向列表的末尾添加一个obj</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tobject：对象，在python可以是任何数据</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t用于添加一个数据</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> extend(iterable):</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t通过可迭代对象的元素，来扩展当前的列表</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\titerable：可迭代对象</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t用于向列表中添加多个数据</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token list punctuation\">3.</span> insert(index,object)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t在index之前插入object</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tindex：索引值(下标)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tobject：任何对象</pre></td></tr></table></figure><h3 id=\"修改列表中的元素\"><a class=\"markdownIt-Anchor\" href=\"#修改列表中的元素\">#</a> 修改列表中的元素</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>直接赋值修改</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t变量[下标] = 新值</pre></td></tr></table></figure><h3 id=\"删除列表中的元素\"><a class=\"markdownIt-Anchor\" href=\"#删除列表中的元素\">#</a> 删除列表中的元素</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> clear():</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t清空列表中的所有元素</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> pop([index])：弹栈</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t删除并且返回下标为index的元素(index默认为最后一个)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t如果为空列表则会抛出IndexError</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t栈：是一种数据结构，FILO：First In Last Out</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">3.</span> remove(value):</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t删除第一个出现的value元素（下标最小）</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t如果value不存在会报ValueError</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">4.</span> del list[i]:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t删除某个元素</pre></td></tr></table></figure><h3 id=\"切片\"><a class=\"markdownIt-Anchor\" href=\"#切片\">#</a> 切片</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>slice：切片</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>列表通过索引可以获取一个元素,索引处可以接收更多的参数。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>l=[1,2,3,4,5]</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>l[2:4]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>作用：通过起始下标和结束下标获取一段元素(多个元素)，该数据是拷贝出来的数据，原数据不变</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>语法：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t变量[start:end]</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tstart：起始下标</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tend：结束下标</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t取值：[start:stop)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token list punctuation\">1.</span> 如果start为0那么可以不写</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tlist[:3]</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token list punctuation\">2.</span> 如果要直接获取到最后一个元素</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tlist[2:]</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token list punctuation\">3.</span> 如果要全取：</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tlist[:]</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>切片操作往往用于数据的拷贝</pre></td></tr></table></figure><ul>\n<li>切片的高级应用</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>切片还支持第三个参数，表示步长</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>变量[start:end:step]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>start:起始下标</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>end:结束下标</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>step:步长</pre></td></tr></table></figure><h3 id=\"列表的常用运算符\"><a class=\"markdownIt-Anchor\" href=\"#列表的常用运算符\">#</a> 列表的常用运算符</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 加法运算</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tlist1+list2----列表的拼接</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 比较运算(布尔运算)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t>,>=,&lt;,&lt;=,==,!=</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t比较原则：对应下标的元素，按照下标从小到大逐个比较，只要比较出大小则停止比较</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t需要注意类型的兼容性</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">3.</span> 重复运算</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t乘法</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t本质：是多个加法运算</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">4.</span> 成员关系运算:in/not in </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t判断列表中是否有某个成员</pre></td></tr></table></figure><ul>\n<li>列表中的其他方法</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> copy()</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t浅拷贝</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> count(value)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t返回value值在列表中出现的次数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> index(value[,start[,stop]])</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t返回value在列表中从start到stop的范围内的第一次出现的索引</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tvalue：要查询的值</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">4.</span> reverse()</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t原地翻转</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t和大小无关，不排序</pre></td></tr></table></figure><ul>\n<li>补充</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 列表中的所有元素，本质上都不是数据本身，而是数据的首地址</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 列表作为可变类型的数据</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t可变：当列表中的内容发生改变的时候，列表本身的地址不发生改变，但是列表中的元素发生改变。</pre></td></tr></table></figure><h3 id=\"二维列表\"><a class=\"markdownIt-Anchor\" href=\"#二维列表\">#</a> 二维列表</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>维度：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t[[1,2,3],[4,5,6],[4,5,6],[4,5,6],[4,5,6],[4,5,6],[4,5,6]]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>二维列表：一维列表下的一堆列表(一维列表)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>二维列表的访问：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 直接访问</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t访问一个元素可以通过下标进行访问</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tlist<span class=\"token url\">[<span class=\"token content\">行坐标</span>][<span class=\"token variable\">列坐标</span>]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 双重for循环</pre></td></tr></table></figure><ul>\n<li>二维列表的创建</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>l = [[1,2,3]]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>l = []</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>l.append([123])</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>[list()]</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>列表的推导式/生成式</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>l = [i for i in range(10)]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>print(l)</pre></td></tr></table></figure><h2 id=\"元组\"><a class=\"markdownIt-Anchor\" href=\"#元组\">#</a> 元组</h2>\n<h3 id=\"圆括号\"><a class=\"markdownIt-Anchor\" href=\"#圆括号\">#</a> 圆括号</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> ():可以修改运算的优先级</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 元组的组成部分</pre></td></tr></table></figure><h3 id=\"元组-2\"><a class=\"markdownIt-Anchor\" href=\"#元组-2\">#</a> 元组</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 可以存储多个数据</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 可以存储多种数据</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 是不可变类型</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">4.</span> 支持切片操作</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">5.</span> 可迭代对象</pre></td></tr></table></figure><h3 id=\"创建一个元组\"><a class=\"markdownIt-Anchor\" href=\"#创建一个元组\">#</a> 创建一个元组</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 直接创建</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tt = (1,2,3)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tt = (True,1,2,3)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tt = ()</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> 构造方法</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> tuple()---返回一个空元组</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> tuple(iterable)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t利用可迭代对象的元素，初始化一个新的元组</pre></td></tr></table></figure><h3 id=\"访问元组\"><a class=\"markdownIt-Anchor\" href=\"#访问元组\">#</a> 访问元组</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 访问一个元素</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t和列表一样</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 访问多个元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t和列表一样</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> 访问所有元素</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t和列表一样</pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>include <span class=\"token operator\">&lt;</span>stdio<span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">mian</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> d1<span class=\"token punctuation\">,</span>d2<span class=\"token punctuation\">,</span>d3<span class=\"token punctuation\">,</span>d4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    d1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>a<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">></span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d1=%d,a=%d,v=%d,c=%d\\n\"</span><span class=\"token punctuation\">,</span>d1<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    d2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">></span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>a<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">></span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d1=%d,a=%d,v=%d,c=%d\\n\"</span><span class=\"token punctuation\">,</span>d2<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    d3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>a<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">></span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d1=%d,a=%d,v=%d,c=%d\\n\"</span><span class=\"token punctuation\">,</span>d3<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    d4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">></span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>a<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">></span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d1=%d,a=%d,v=%d,c=%d\\n\"</span><span class=\"token punctuation\">,</span>d4<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"增加和修改以及删除元素\"><a class=\"markdownIt-Anchor\" href=\"#增加和修改以及删除元素\">#</a> 增加和修改以及删除元素</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">*</span> 元组是不可变类型，所以，本身不支持增删改操作</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">1.</span> 向元组中添加元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t利用切片然后元组拼接</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> 从元组中删除元素</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t利用切片删除元素</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">3.</span> 修改元组中的元素</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t先删除，后添加</pre></td></tr></table></figure><h3 id=\"元组的操作符\"><a class=\"markdownIt-Anchor\" href=\"#元组的操作符\">#</a> 元组的操作符</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 拼接操作</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t+</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 重复操作</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">*</span> ：本质是多个加法</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> 布尔操作：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t>,&lt;,==,!==</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t比较方法和列表一样</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">4.</span> 成员关系运算</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tin/not in</pre></td></tr></table></figure><h2 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\">#</a> 字符串</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>最常用的数据类型，没有之一</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>str</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>特点：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 天生就具有跨平台性</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 是一个可迭代对象</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 支持索引操作</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token list punctuation\">4.</span> 支持切片操作</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token list punctuation\">5.</span> 是一个不可变类型</pre></td></tr></table></figure><ul>\n<li>字符串的类别</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 单引号字符串</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t其他语言：字符串必须使用双引号，单引号只能用于字符</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tpython：允许使用单引号来表达字符串</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t简单，可以和双引号进行嵌套</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> 双引号字符串</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t一般字符串</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">3.</span> 三引号字符串</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t多行字符串</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t单三引号、双三引号</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t一般用于文档注释，必须出现在代码块的第一行</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t也成为长字符串可以换行</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token list punctuation\">4.</span> 原始字符串</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t让所有的转义字符全部失效（只体现最原本的含义）</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\ts = r'Jerry\\tom'</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token list punctuation\">5.</span> 二进制字符串</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t不是字符串类型，是bytes类型</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tstr---bytes:encode()编码</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tbytes---str:decode()解码</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token list punctuation\">6.</span> unicode字符串</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t以unicode的方式来解析字符串</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tu'abc'</pre></td></tr></table></figure><ul>\n<li>创建字符串</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 直接创建：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\ts = 'abc'</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\ts = \"abc\"</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\ts = \"\"\"abc\"\"\"</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\ts = '''abc'''</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 构造方法</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tstr(obj)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tobject：可以接收任何参数</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tinput和print</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tconsole.log(\"\")</pre></td></tr></table></figure><ul>\n<li>访问字符串</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 访问一个</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t通过索引</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 访问多个</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t通过切片</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> 访问所有</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t遍历</pre></td></tr></table></figure><h3 id=\"常用的方法\"><a class=\"markdownIt-Anchor\" href=\"#常用的方法\">#</a> 常用的方法</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> capitalize()</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t首字母大写，其余字符小写</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> casefold()</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t字母全小写</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> center(字符长度,填充物)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tcenter(20, '-')</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">4.</span> count()</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tcount(sub[, start[, end]])</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t计算字符串中出现了多少sub元素</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">5.</span> encode()</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t编码</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t把字符串编成二进制的内容</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token list punctuation\">6.</span> endswith(suffix[, start[, end]])</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t是否以suffix结尾</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tendswith('系统',0,10)</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token list punctuation\">7.</span> find(sub[, start[, end]])</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t找到在start和end之间的第一个sub元素的下标，如果不存在，则返回-1</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token list punctuation\">8.</span> index(sub[, start[, end]])</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t如果sub在字符串中，则返回最小的下标</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token list punctuation\">9.</span> isalnum()</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t注：问一下</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t人类语言都为True，其他的为false</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token list punctuation\">10.</span> isalpha()</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t注：问一下</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t人类语言字母都为True，其他的为false</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token list punctuation\">11.</span> isdecimal()</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t十进制数字</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t判断字符中是否都是十进制阿拉伯数字</pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token list punctuation\">12.</span> isdigit()</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t判断是否都是十进制数字</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token list punctuation\">13.</span> islower()</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t判断当前字符串是否全都是小写</pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token list punctuation\">14.</span> isnumeric()</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t判断当前字符是否是由数字(只包含中文和阿拉伯，不包含英文)构成的</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token list punctuation\">15.</span> isspace()</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t判断是否全是空格</pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token list punctuation\">16.</span> isupper()</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t判断字符串是否全都是大写</pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token list punctuation\">17.</span> ljust(width[,fillchar])</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\ts.ljust(10,'-')</pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token list punctuation\">18.</span> rjust(width[,fillchar])</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\ts.rjust(10,'-')</pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token list punctuation\">19.</span> lstrip():</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t去掉字符串左侧的空格、回车、指标等空字符</pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token list punctuation\">20.</span> rstrip():</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t去掉字符串右侧的空格、回车、指标等空字符</pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token list punctuation\">21.</span> strip():</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t去掉字符串两侧的空格、回车、指标等空字符</pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token list punctuation\">22.</span> replace(old,new):</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t替换</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t把字符串中的old替换成new</pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token list punctuation\">23.</span> startswith(prefix)</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t判断是否是以prefix开头的字符串</pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token list punctuation\">24.</span> upper()</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t将字符串转为大写</pre></td></tr></table></figure><ul>\n<li>格式化</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>format(<span class=\"token italic\"><span class=\"token punctuation\">*</span><span class=\"token content\">args, </span><span class=\"token punctuation\">*</span></span>*kwargs)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token italic\"><span class=\"token punctuation\">*</span><span class=\"token content\">args：可变长参数，把参数打包成元组来处理</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t</span><span class=\"token punctuation\">*</span></span>kwargs：关键字参数，把参数打包成字典来处理</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">1.</span> 源字符通过下标的方式进行填充获取</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tprint('&#123;0&#125;,haha,&#123;1&#125;'.format('a', 'b'))</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 源字符通过关键字的方式来获取数据</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tprint('&#123;name&#125;,haha'.format(name='乔鼎'))</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">3.</span> 花括号的转义</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t如果需要让大括号失去意义，只需要编成两个大括号即可</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">4.</span> f-string</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t3.6版本之后添加的</pre></td></tr></table></figure><ul>\n<li>格式化字符串</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>通过%的方式来匹配字符串和匹配对象之间的关系</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 格式化编码：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\ts = 'this is a %c'%97</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">2.</span> 格式化字符串:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\ts = 'this is a %s'%'abc'</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">3.</span> 格式化整数</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\ts = 'this is a %d'%123</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">4.</span> 格式化无符号八进制数</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\ts = 'this is a %o'%123</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">5.</span> 格式化无符号十六进制数</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\ts = 'this is a %x'%123</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token list punctuation\">6.</span> 格式化定点数</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\ts = 'this is a %f'%123.0000004</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t四舍五入保留六位</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token list punctuation\">7.</span> 格式化科学计数法</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\ts = 'this is a %e'%123.0000004</pre></td></tr></table></figure><ul>\n<li>转义字符</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>作用：拥有特殊含义的字符</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> \\t:横向制表符</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> \\n:换行</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> \\v:纵向制表符</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">4.</span> \\r:老版windows的换行</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">5.</span> \\b:退格符</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">6.</span> \\f:换页符</pre></td></tr></table></figure><h2 id=\"图书管理系统beat\"><a class=\"markdownIt-Anchor\" href=\"#图书管理系统beat\">#</a> 图书管理系统 (beat)</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 首页：登录注册，用户输入1则登录，输入2则注册</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 登录：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 用户登录</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 提示用户输入用户名</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token list punctuation\">2.</span> 提示用户输入密码</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token list punctuation\">3.</span> 判断用户输入的用户名和密码是否正确</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token list punctuation\">4.</span> 如果输入正确，则成功登录</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token list punctuation\">5.</span> 如果输入不正确，则重新登录</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 管理员登录</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">3.</span> 注册：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 提示用户输入用户名</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 不允许出现特殊字符</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 大于等于四个字儿</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 提示用户输入密码</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 用户密码需要分为高级、中级、低级</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t除了下面三种情况，剩下的情况全都不合规</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t高级：用户密码是大于14位，且由数字、字符、字母构成</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t中级：用户密码是大于8位小于14位，且由数字、字符、字母中的任意两个组合构成</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t低级：用户密码大于6位，小于8位</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 提示用户再次输入密码</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token list punctuation\">4.</span> 如果全部合规，则注册成功</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token list punctuation\">5.</span> 如果不合规，则重新输入</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token list punctuation\">4.</span> 进入图书管理系统：</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 查看所有图书--->用户、管理员</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 根据书名查找图书--->用户、管理员</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 根据作者查找图书--->用户、管理员</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token list punctuation\">4.</span> 修改图书名称 --->管理员</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token list punctuation\">5.</span> 修改图书价格--->管理员</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token list punctuation\">6.</span> 删除图书--->管理员</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token list punctuation\">7.</span> 增加新书--->管理员</pre></td></tr></table></figure><h2 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> 悯农<span class=\"token punctuation\">(</span>times<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>times<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'锄禾日当午'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'汗滴禾下土'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'谁知盘中餐'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'粒粒皆辛苦'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>悯农<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token string\">'@'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'#'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'$'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'%'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"函数特点\"><a class=\"markdownIt-Anchor\" href=\"#函数特点\">#</a> 函数特点</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 避免代码冗余</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 提高代码的可维护性</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 提高代码的灵活性</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">4.</span> 提高代码的可重用性</pre></td></tr></table></figure><h3 id=\"函数的语法\"><a class=\"markdownIt-Anchor\" href=\"#函数的语法\">#</a> 函数的语法</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>函数使用的必要性</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 非结构化编程</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t逻辑掺杂在一起，混乱，逻辑不清晰</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">2.</span> 结构化编程</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t函数</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t将可重用的逻辑、或者拥有独立功能的逻辑封装在一起</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>定义：函数由一组代码构成，目的是为了完成一个特定的任务</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>语法：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>关键字：def：define：声明一个函数</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>函数的声明：</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>def 函数名(形式参数):</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t代码(函数体)</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>函数的调用：</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t函数名(实际参数)</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>函数在不调用的情况下，不会执行</pre></td></tr></table></figure><h3 id=\"函数的运行机制\"><a class=\"markdownIt-Anchor\" href=\"#函数的运行机制\">#</a> 函数的运行机制</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>流程：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 编译流程：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 通过编译器，识别def关键字，创建一个函数对象</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 创建函数体（不执行）</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 执行流程</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 执行 函数的调用</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 通过函数名调转到函数的定义处</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> 执行函数体</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token list punctuation\">4.</span> 执行函数体完毕，流程返回到函数调用处</pre></td></tr></table></figure><h3 id=\"函数的结构\"><a class=\"markdownIt-Anchor\" href=\"#函数的结构\">#</a> 函数的结构</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 函数的声明</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tdef</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t函数名</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t括号(形式参数)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> 函数体</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t内容，核心代码</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">3.</span> 函数的返回值</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\treturn</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t如果不写return，自动添加return None</pre></td></tr></table></figure><ul>\n<li>函数名的声明</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>小驼峰</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mainPage</pre></td></tr></table></figure><h3 id=\"函数的参数\"><a class=\"markdownIt-Anchor\" href=\"#函数的参数\">#</a> 函数的参数</h3>\n<ul>\n<li>函数的参数的分类</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 形式参数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t函数声明的时候，定义的参数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t简称：形参</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t英文：Parameter</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t相当于函数的局部变量</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 实际参数</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t函数调用的时候，传入的参数</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t简称：实参</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t英文：Argument</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t相当于给函数的局部变量赋值</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token list punctuation\">3.</span> 如果没有定义任何参数</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t称之为：无参</pre></td></tr></table></figure><ul>\n<li>位置参数</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>参数和位置有关</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 实参和形参的位置必须一一对应</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 位置参数的数量需要一一匹配</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> 位置参数，一旦设定了就必须传值</pre></td></tr></table></figure><ul>\n<li>关键字参数</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>定义了关键字的参数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 基于实参</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 不受位置的影响</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> 实参和形参必须一一对应</pre></td></tr></table></figure><ul>\n<li>默认参数</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>定义了默认值的参数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 基于形参</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 如果不传递实参则使用形参后面的默认值作为实参</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> 如果传递实参，则使用传递的参数值</pre></td></tr></table></figure><ul>\n<li>可变长参数</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>可以接收多个参数的形参</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 基于形参</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 分类：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token italic\"><span class=\"token punctuation\">*</span><span class=\"token content\">args</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t将接收到的多个参数打包成元组</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t只能通过位置来传参</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t</span><span class=\"token punctuation\">*</span></span>*kwargs</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t将接受到的多个参数打包成字典</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            只能够通过关键字来传值</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>相同类型的可变长参数，只能有一个</pre></td></tr></table></figure><ul>\n<li>混用情况</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 关键字参数和位置参数混用</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t关键字参数必须在位置参数之后</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t原因：参数出现等号的形式，之后的所有参数，都被视为等号形式传播</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">2.</span> 默认参数和位置参数混用</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t默认参数必须出现在位置参数之后</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t原因：参数出现等号的形式，之后的所有参数，都被视为等号形式传播</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">3.</span> 可变长参数和位置参数混用：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t语法上不会报错</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t如果可变长参数在位置参数之前，位置参数必须通过关键字参数进行传值</pre></td></tr></table></figure><ul>\n<li>递归</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>自己搞自己</pre></td></tr></table></figure><ul>\n<li>函数的文档注释</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 必须出现在函数体的第一行</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 习惯上使用三引号字符串作为文档注释</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t单三引号或者双三引号</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> 查看函数文档</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> help(函数名)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 调用函数对象的<span class=\"token bold\"><span class=\"token punctuation\">__</span><span class=\"token content\">doc</span><span class=\"token punctuation\">__</span></span>属性</pre></td></tr></table></figure><h3 id=\"函数的过程\"><a class=\"markdownIt-Anchor\" href=\"#函数的过程\">#</a> 函数的过程</h3>\n<ul>\n<li>函数的返回值</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>关键字：return</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 任何函数都必须有return（返回值）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 如果函数中不书写任何的return，自动添加一个return None</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> 如果函数中只写了return，之后没有携带任何值，自动添加一个None</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">4.</span> return的作用</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 返回流程（最核心的作用）</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 返回时顺带携带了一个值（函数一定会有一个返回值）</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">5.</span> return的值</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 任何对象都可以被return</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 返回值有且只能有一个</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> 如果要返回多个值，打包成一个容器(元组)进行返回</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token list punctuation\">4.</span> 可以返回一个函数的对象的调用</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t函数的返回值是被调用函数的返回值(间接获取返回值)</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token list punctuation\">5.</span> 返回一个函数对象</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\treturn 函数名</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token list punctuation\">6.</span> return 之后的代码，不执行</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t无论是本层或者是外层，均不执行</pre></td></tr></table></figure><ul>\n<li>函数变量的作用域</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>作用域：作用的范围</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 局部变量：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 定义在函数内部的变量</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 先定义后使用</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> 作用范围：从定义开始到包含他的代码块结束</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 全局变量：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 没有缩进的变量</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 先定义后使用</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> 作用范围：从定义开始到包含他的代码块结束</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">3.</span> 如果函数内部的变量和全局变量发生了冲突，在局部访问，访问的是局部的变量，在全局使用的是全局的变量---相互不干扰(修改局部变量，全局不受影响)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 如果发生了命名冲突，会在函数内部创建一个同名的局部变量</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 局部使用的时候，局部变量的变量名会遮盖全局变量的变量名</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> 全局使用时依然使用全局的变量</pre></td></tr></table></figure><ul>\n<li>global 关键字</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>声明全局变量</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>如果函数内部的变量的名称和全局的名称一样，使用global可以声明当前代码块使用的该变量为全局变量</pre></td></tr></table></figure><ul>\n<li>nonlocal</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nonlocal 只存在于python 3.x版本</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> nonlocal影响上一层的局部同名变量</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 如果上一层没有对应的局部变量，则报错：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tSyntaxError: no binding for nonlocal 'a' found</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> nonlocal 和global同时作用域同一个变量的时候，会报错</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tSyntaxError: name 'a' is nonlocal and global</pre></td></tr></table></figure><h3 id=\"内嵌函数和闭包\"><a class=\"markdownIt-Anchor\" href=\"#内嵌函数和闭包\">#</a> 内嵌函数和闭包</h3>\n<ul>\n<li>内嵌函数</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>形式上：一个函数里面又定义了一个函数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t外层的函数：外部函数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t内层的函数：内部函数</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">1.</span> 内嵌函数的作用范围：同局部变量</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t在作用域以外是不能被调用的</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t作用范围：从代码块开始到结束</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">2.</span> 内嵌函数不能执行类似于a+=1的操作</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t本质：等号右边先进行使用，然后左边再进行赋值</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t解决方案：nonlocal或者global</pre></td></tr></table></figure><ul>\n<li>闭包</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>全称：词法闭包 Lexical Closure</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>是一种编程范式：对代码进行提炼和概括，使得代码的重用性更高。</pre></td></tr></table></figure><figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>闭包的条件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 必须是一个内嵌函数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 外部函数必须返回的是内部函数的函数对象</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> 内部函数必须引用外部函数的局部变量</pre></td></tr></table></figure><ul>\n<li>闭包的作用</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 可以在声明较少的参数的情况下，传递更多的参数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 可以使用更多的内部函数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t间接使用：通过return 返回出内部函数的函数对象（尚未被调用），然后再使用</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> 多用于集群</pre></td></tr></table></figure><ul>\n<li>闭包的优势</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 避免使用全局变量</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t全局变量容易出现脏读问题（不安全）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 提供部分的数据隐藏</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 隐藏了参数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 隐藏了内部函数对象</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">3.</span> 可以更优雅的实现面向对象</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t返回了一个函数对象</pre></td></tr></table></figure><ul>\n<li>匿名函数</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>没有函数名的函数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 临时使用一次</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 函数只是用一次</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>可以避免命名冲突</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>关键字：lambda</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>语法：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tlambda 形参:返回值</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">1.</span> lambda 用于创建一个lambda函数对象</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token list punctuation\">2.</span> lambda书写的形式：lambda表达式</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token list punctuation\">3.</span> lambda表达式常常应用与泛函编程（编程范式）</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token list punctuation\">4.</span> lambda表达式是一种解析式</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t通过解析来创建函数对象</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t执行效率相对来说较高</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token list punctuation\">5.</span> lambda表达式的优先级最低</pre></td></tr></table></figure><ul>\n<li>lambda 表达式的作用</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 可以避免使用函数名，使用方便，代码更加简洁，优雅</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 代码相对简化，可以适当地提高代码的可读性</pre></td></tr></table></figure><h3 id=\"高级函数\"><a class=\"markdownIt-Anchor\" href=\"#高级函数\">#</a> 高级函数</h3>\n<ul>\n<li>函数式编程</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 也称之为泛函编程，是一种编程范式：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t可以将一个函数对象作为参数传递给另一个函数，被传入的函数对象的执行过程，在调用的函数中执行</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 函数式编程的重要基础是lambda表达式</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tlambda表达式可以返回一个函数对象</pre></td></tr></table></figure><ul>\n<li>filter()</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python2：函数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>python3：类</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>filter:过滤器</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>filter(function or None,iterable)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>function：一个函数</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>iterable：可迭代对象</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">1.</span> 如果function给出，将可迭代对象中的每一个元素，都挨个传递给function作为参数，筛选出return为True值</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">2.</span> 如果function没有给出，一定要填None，则直接返回iterable中的为True的值</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>真值：任何非零的值</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>假值：任何零、None、空</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>[],(),&#123;&#125;,'',0,False,0.0,0.,.0</pre></td></tr></table></figure><ul>\n<li>map()</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python2：函数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>python3：类</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>map：映射</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tmap(func, *iterables)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tfunc:函数</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\titerables：可迭代对象</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t运算iterables多个可迭代对象，将多个可迭代对象的对应的相同下标的元素，作为参数传递给func，返回一个map对象，map中每个元素为：相同下标根据func运算后的结果。当最短的可迭代对象执行完毕，则停止运算。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token code keyword\">\t\tfunc中的形参的个数，必须匹配可迭代对象的个数</span></pre></td></tr></table></figure><ul>\n<li>reduce()</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python2：内置函数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>python3：函数，functools之下</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>reduce：折叠</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> reduce(function, sequence, initial=_initial_missing)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 将序列中的前两个元素传入给function作为参数</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> function将计算出的结果和序列中的下一个元素，作为新的两个参数，重新传递给function，以此类推</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> 最终得到一个结果（最终的数值）</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token list punctuation\">4.</span> 如果设置了initial，则先传入initial和序列的第一个元素，给function</pre></td></tr></table></figure><h3 id=\"函数的嵌套调用和\"><a class=\"markdownIt-Anchor\" href=\"#函数的嵌套调用和\">#</a> 函数的嵌套调用和？？</h3>\n<ul>\n<li>函数的嵌套调用</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 一个函数里面调用另一个函数，函数的嵌套调用</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t两个函数之间有没有关系：没有必然的联系</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 分别属于两个不同的函数</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 内嵌函数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 自己调用自己</pre></td></tr></table></figure><ul>\n<li>使用函数的必要性</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 重复使用的代码，抽取出来，封装成函数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 拥有特殊功能的代码抽取出来，封装为函数，解耦合</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 简化开发流程</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>f(x) = 0</pre></td></tr></table></figure><p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>a</mi><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mi>b</mi><mi>x</mi><mo>+</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">f(x) = ax^2+bx+c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span></p>\n<ul>\n<li>函数的递归</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 函数的嵌套使用：一个函数调用量另一个函数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 函数的递归使用：一个函数调用自己</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">1.</span> 注意：避免无穷递归</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t解决方案：控制好递归的边界。通过return来终止流程。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 递归异常：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tRecursionError: maximum recursion depth exceeded while calling a Python object</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">3.</span> 报错的原因：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t执行原理：函数的无穷递归区别于死循环</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t循环：代码块级别---在同一个代码块中无限的执行，占用的空间永远是一个代码块的空间，只不过是重复执行罢了。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t递归：对象级别---对象的内存占用量是远大于一个代码块。每一次的递归都会创建一个新的对象，内存就会无限累加使用---无限递归会发生内存溢出。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t小结：循环消耗小，递归消耗较大</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t直接原因：超过了最大深度</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tpython为了保护系统的内存，设置了递归的层数，如果超过层数，则会报错。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token list punctuation\">4.</span> 递归的使用:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 将大问题分解为小问题，如果一个大问题的解决方案和一个小问题的解决方案一样，那么只需要解决小问题，大问题则迎刃而解。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 递归的效率很低，一般用于解决难题。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 尽量不要使用递归，能用递归解决的问题一定可以用循环解决。</pre></td></tr></table></figure><h2 id=\"图书管理系统20\"><a class=\"markdownIt-Anchor\" href=\"#图书管理系统20\">#</a> 图书管理系统 2.0</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>图书管理系统封装成函数</pre></td></tr></table></figure><h2 id=\"字典\"><a class=\"markdownIt-Anchor\" href=\"#字典\">#</a> 字典</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>目录---字的位置（页数）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>映射</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>dict---唯一的映射类型</pre></td></tr></table></figure><ul>\n<li>字典的结构</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>键值对</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>键：值</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>key:value</pre></td></tr></table></figure><ul>\n<li>字典的特点</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 字典没有下标这个概念---字典是无序的</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 字典不支持索引操作，不支持切片操作</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 字典是一个可迭代对象</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">4.</span> 字典中的键不能重复</pre></td></tr></table></figure><ul>\n<li>字典的创建</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 直接创建</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t变量 = &#123;'胡承龙':'女','高凯':'女','闫伟':'女','许晋铭':'女'&#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t空字典：&#123;&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">2.</span> 利用构造方法</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> dict()</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t返回一个空字典</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> dict(mapping)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t利用字典创建字典</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tmapping：是一个映射类型</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> dict(iterable)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t利用可迭代对象创建字典</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t可迭代对象中的元素必须是拥有映射关系，必须是拥有两个元素的容器(二维)</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token list punctuation\">4.</span> dict(**kwargs)</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t利用可边长参数的特性创建字典</pre></td></tr></table></figure><ul>\n<li>访问字典</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 访问一个元素</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t可以通过键直接访问对应的值</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t变量名[键]</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t字典是没有下标的，没有索引的概念</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t如果访问了不存在键：KeyError</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 访问部分元素</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t不支持访问部分元素</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">3.</span> 访问所有元素</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t遍历</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tfor循环本身只能遍历出所有的键</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t*python中的字典，本质上只存键，字典中存储的键对应的有一个地址，而这个地址是值存储的位置</pre></td></tr></table></figure><ul>\n<li>修改字典中的键值对</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 直接修改</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t变量[键]=新值</pre></td></tr></table></figure><ul>\n<li>添加键值对</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>直接添加</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t变量[新键]=值</pre></td></tr></table></figure><ul>\n<li>删除键值对</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>del语句</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tdel 变量名[键]</pre></td></tr></table></figure><ul>\n<li>字典中常用的方法</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> clear()</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t清空</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> copy()</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t浅拷贝</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> fromkeys(iterable,value)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t利用iterable中的元素作为键，value作为值，创建新的字典</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">4.</span> get(k[,d])</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tk:key键</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\td:提示信息/返回值</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t通过传入的k获得对应的值，如果k在字典中，则返回对应的value</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t如果k不在字典中，则返回d提示信息，如果没有填入d，则默认返回\t\tNone</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token list punctuation\">5.</span> items()</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t返回一个类集合对象，每一个元素都是表示映射关系的元组</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t通常用来访问字典的键值对</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token list punctuation\">6.</span> keys()</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t返回一个类集合对象，每一个元素都是字典的键</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token list punctuation\">7.</span> values()</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t返回一个类集合对象，每一个元素都是字典的值</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token list punctuation\">8.</span> pop(k[,d])</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t删除并且返回k对应的值</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t如果值不存在并且没有传入d会报错</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t如果传入d并且值不存在，则返回提示的d</pre></td></tr></table></figure><ul>\n<li>补充</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 字典的值：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t没有要求</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 字典的键</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 必须是可哈希的</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t不可变类型</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 元组作为不可变类型，可以作为字典的键</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t元组里面的所有元素必须是不可变类型</pre></td></tr></table></figure><h2 id=\"集合set\"><a class=\"markdownIt-Anchor\" href=\"#集合set\">#</a> 集合 (set)</h2>\n<ul>\n<li>集合的特点</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 集合是无序的</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 集合中的元素必须是可哈希的</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t字典中的键是由set实现的</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> 是一个可迭代对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">4.</span> 集合中的所有元素都是唯一的</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t不可重复</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">5.</span> 集合是可变类型</pre></td></tr></table></figure><ul>\n<li>集合的创建</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 直接创建</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t变量=&#123;元素1,元素2,......&#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\td=&#123;1,2,3&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t无法手动创建空集合</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> 构造方法</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tset()：空集合</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tset(iterable)：通过可迭代对象来创建集合</pre></td></tr></table></figure><ul>\n<li>集合的访问</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 访问一个元素</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t不能访问一个元素</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 访问多个元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t无法访问多个元素</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> 访问所有元素</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t遍历：将容器中的元素，不重复，不遗漏的访问一遍</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tfor循环</pre></td></tr></table></figure><ul>\n<li>集合的修改</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> update(set)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t通过一个集合，更新原有的集合</pre></td></tr></table></figure><ul>\n<li>集合的添加</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> add(value)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t向集合中添加一个元素</pre></td></tr></table></figure><ul>\n<li>集合的删除</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> remove(value)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t删除某个元素</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t如果不存在，则报keyerror</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">2.</span> pop()</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t删除并且返回一个元素</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t随机删除</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t如果为空则报错：KeyError</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">3.</span> discard()</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t删除某个元素</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t如果删除的元素不存在，不报错，并且什么都不做</pre></td></tr></table></figure><ul>\n<li>补充</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>去重</pre></td></tr></table></figure><ul>\n<li>交集、并集、补集</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>交集：intersection</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>差集：difference</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>并集：union</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>分离集：isdisjoint</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>对称差集：symmetric_difference</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>子集：issubset</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>父集：issuperset</pre></td></tr></table></figure><ul>\n<li>不可变集合</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>frozenset：不可变集合</pre></td></tr></table></figure><ul>\n<li>特点</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 是一个不可变类型</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 是一个可迭代对象</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 是无序的</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">4.</span> 没有下标的概念</pre></td></tr></table></figure><ul>\n<li>可迭代对象</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list/tuple/str/range/dict/set/frozenset</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>可变类型：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>list/dict/set</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>不可变类型：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>tuple/str/frozenset</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>iterable</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>拥有迭代器的对象称之为可迭代对象</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>常见的可迭代对象：</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tlist、tuple、dict、set、frozenset、str</pre></td></tr></table></figure><h2 id=\"迭代器和生成器\"><a class=\"markdownIt-Anchor\" href=\"#迭代器和生成器\">#</a> 迭代器和生成器</h2>\n<ul>\n<li>迭代器</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>iterator</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>迭代器是一种特殊的可迭代对象</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">1.</span> iter():返回一个对象的迭代器</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tobj.<span class=\"token bold\"><span class=\"token punctuation\">__</span><span class=\"token content\">iter</span><span class=\"token punctuation\">__</span></span>()</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> next()：将迭代器中的游标向后挪一个单位，并且将划过的元素进行返回,迭代器是自己的迭代器</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tobj.<span class=\"token bold\"><span class=\"token punctuation\">__</span><span class=\"token content\">next</span><span class=\"token punctuation\">__</span></span>()</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token code keyword\">\t迭代器中的游标只能够向后移动</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">3.</span> 只要是实现了<span class=\"token bold\"><span class=\"token punctuation\">__</span><span class=\"token content\">iter</span><span class=\"token punctuation\">__</span></span>()和<span class=\"token bold\"><span class=\"token punctuation\">__</span><span class=\"token content\">next</span><span class=\"token punctuation\">__</span></span>()的对象都是迭代器对象</pre></td></tr></table></figure><ul>\n<li>生成器</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>generator</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>生成器也是一种特殊的迭代器</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">1.</span> 利用生成式创建生成器</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tl = (i for i in range(10))</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> 通过yield来创建生成器</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tl = ['胡承龙','许晋铭','段朝','孙林娜','王剑']</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token code keyword\">        def a():</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            for i in l:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                yield i</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token list punctuation\">3.</span> 支持遍历</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token list punctuation\">4.</span> 生成器的迭代器是他自己</pre></td></tr></table></figure><h2 id=\"推导式\"><a class=\"markdownIt-Anchor\" href=\"#推导式\">#</a> 推导式</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 列表推导式</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 字典推导式</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 集合推导式</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>推导式：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t也称之为解析式</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t利用逐步解析的方式，创建一个对象</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t是python独有的特性</pre></td></tr></table></figure><ul>\n<li>列表推导式</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>语法</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t变量=[元素 for i in 可迭代对象 if 布尔表达式]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t布尔判断：对数据进行筛选---可以省略</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tfor循环：给列表提供数据或者提供元素数量</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t元素：最终列表中的元素</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t固定的值</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t变量</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t表达式</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t函数对象</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t函数调用</pre></td></tr></table></figure><ul>\n<li>字典推导式</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>语法：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t变量=&#123;键:值 for i in 可迭代对象 if 布尔表达式&#125;</pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># d = &#123;' 许晋铭 ':i for i in range (10)&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># d = &#123;k:v for k,v in [[' 许晋铭 ',250],[' 欢欢 ',' 鸡 '],[' 辫儿 ','250']]&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>d1 <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>许晋铭<span class=\"token operator\">=</span><span class=\"token number\">250</span><span class=\"token punctuation\">,</span>欢欢<span class=\"token operator\">=</span><span class=\"token number\">290</span><span class=\"token punctuation\">,</span>辫儿<span class=\"token operator\">=</span><span class=\"token number\">540</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>d2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>v<span class=\"token punctuation\">:</span>k <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> d1<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d2<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>集合推导式</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>语法：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t变量=&#123;值 for i in 可迭代对象 if 布尔表达式&#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t布尔运算：对数据进行筛选---可以省略</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tfor循环：给列表提供数据、提供元素的数量</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t元素：最终列表中的元素</pre></td></tr></table></figure><h2 id=\"面向对象\"><a class=\"markdownIt-Anchor\" href=\"#面向对象\">#</a> 面向对象</h2>\n<h3 id=\"类和对象\"><a class=\"markdownIt-Anchor\" href=\"#类和对象\">#</a> 类和对象</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>真·万物皆对象</pre></td></tr></table></figure><h3 id=\"面向对象的思想\"><a class=\"markdownIt-Anchor\" href=\"#面向对象的思想\">#</a> 面向对象的思想</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>OOP:面向对象的编程</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>利用对象的思想解决问题、</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>第一个面向对象的语言：small talk</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>C(纯面向过程)--->C++--->Java--->python(纯面向对象的语言)</pre></td></tr></table></figure><ul>\n<li>对象</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python:万物皆对象</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>现实世界中：一切客观存在的事物</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>面向对象编程的核心：模拟现实世界，从而解决现实世界的问题</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>打开洗衣机的盖子---把衣服扔进去---倒洗衣液---关洗衣机的盖子---打开开关---选择模式---选择水位---开始</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>拿出来衣服---取水---收集聚乙烯---造盆---皂角---砍树---造搓衣板---开搓..........</pre></td></tr></table></figure><ul>\n<li>现实世界中的对象</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 有什么？\t属性</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 能做什么？\t方法</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>对象=属性+方法</pre></td></tr></table></figure><ul>\n<li>属性</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 属性可以由小对象构成</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 相对抽象的事物也可以作为属性</pre></td></tr></table></figure><ul>\n<li>方法</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 对象和对象之间的相互调用</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 方法被别的对象调用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 调用别的对象的方法</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 自己调用自己的方法</pre></td></tr></table></figure><h3 id=\"如何建立面向对象的解题思路\"><a class=\"markdownIt-Anchor\" href=\"#如何建立面向对象的解题思路\">#</a> 如何建立面向对象的解题思路</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token title important\"><span class=\"token punctuation\">#</span> 现实世界</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>从天津---上海</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">1.</span> 面向过程的思路</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t将过程细化，细化到十分精细，任何情况都要考虑到位，所有方案都要手动设置</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t上飞机：安检---找座位---关手机---安全带---吃饭---厕所---</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t如果发生问题：降落伞、救生衣、直接跳、急救、生火、</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">2.</span> 面向对象：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t只考虑对象，其次再关注过程</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t飞机、高铁、汽车、UFO、走着、马、船、御剑、TP</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token code keyword\">\t1. 选取对象：飞机</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t2. 调用方法：上飞机、开飞机(收襟翼、收起落架、打开双发.....)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>注意：面向对象的思想，会让事情更加的简单(解题的思路简单了一些，代码其实并没有简化)</pre></td></tr></table></figure><ul>\n<li>解决客观问题</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 找到合适的对象</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 调用对象的方法</pre></td></tr></table></figure><h3 id=\"面向对象在计算机中的应用\"><a class=\"markdownIt-Anchor\" href=\"#面向对象在计算机中的应用\">#</a> 面向对象在计算机中的应用</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>核心：让计算机来模拟现实世界，从而来解决现实世界的问题</pre></td></tr></table></figure><figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>现实：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 沟通的需求</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 购物的需求</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 吃饭</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">4.</span> 娱乐</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">5.</span> Money</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>计算机：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> QQ、微信</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 淘宝、京东、并夕夕、苏宁、国美、唯品会、Snaker</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 美团、饿了么、百度外卖</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token list punctuation\">4.</span> LOL、It takes two、PUBG、APEX</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token list punctuation\">5.</span> 58同城、支付宝、BTC、NFT</pre></td></tr></table></figure><ul>\n<li>计算机中的对象</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>计算机的对象是在内存中的一块存储空间，属性和方法是在内存中数据</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>对象：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>现实：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t对象名字：小明\t对象年龄：18\t对象性别：男\t对象学历：初中辍学\t身体状况：健康\t对象身高：130\t体重：200g\t性格：胆小</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t国籍：中国\t感情经历：二婚带俩娃\t家庭状况：北京\t家庭成员：父母健在十个兄弟</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>python：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tname='小明'</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tage=18</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tgender='man'</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\teducation='drop junior school'</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\theath = 'heathy'</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\theight='130'</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tweight='200'</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tcharacter='The shy'</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>图书管理系统：</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t现实：</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t书架、书籍、座位、管理员、收银台、撤硕、VIP</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token code keyword\">\t计算机：</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t书架对象：</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t属性：书籍、分类....</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t方法：保存、删除</span></pre></td></tr></table></figure><ul>\n<li>小结</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>面向对象这种思想，为生活，编程提供了优质的解题思路。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t可以简化流程，让复杂的需求更加容易实现</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>面向对象的特点：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 各司其职</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 弱耦合性</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t强耦合：对象之间的关系紧密</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t弱耦合：对象之间的关系松散</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t面向对象的过程中，更希望代码偏向于弱耦合</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 可重用性：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t一处实现，处处使用</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t框架：SSM，Django，scrapy</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token list punctuation\">4.</span> 可扩展性：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t在原有的基础上增加额外的功能 诺基亚5800</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t手机：大哥大---BB机---小灵通---黑白手机---和弦彩铃手机---苹果3 2G---苹果4 3G---4G---5G</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t单摄，双摄，三摄，四摄，AI神经......</pre></td></tr></table></figure><h3 id=\"类\"><a class=\"markdownIt-Anchor\" href=\"#类\">#</a> 类</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 类是对象共性的抽象</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 是客观对象在人脑中的主观反映</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 类是对象的模板</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>学生：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t属性：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 学籍</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 学号</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> 姓名</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token list punctuation\">4.</span> 性别</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token list punctuation\">5.</span> 班级</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token list punctuation\">6.</span> 专业</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token list punctuation\">7.</span> 情感状态</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t方法：</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 学习</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 吃饭</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> 睡觉</pre></td></tr></table></figure><ul>\n<li>编写一个类</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>类=属性+方法</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>语法：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t关键字：class 定义一个类</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tclass 类名:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t属性</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t方法</pre></td></tr></table></figure><ul>\n<li>属性</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 属性的分类</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 类属性</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">1.</span> 直接定义在类中的属性</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">2.</span> 类创建的所有对象都有对应的类属性，且属性值相同</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">3.</span> 类属性在使用的时候，不用创建一个对象</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t\t\t创建对象以后也可以使用</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">4.</span> 类属性属于类</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">5.</span> 类属性变化则所有对象全部发生变化</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t\t\t牵一发而动全身</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">6.</span> 可以通过：类名.新属性 = 值    来添加类属性</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">7.</span> 类属性的作用域：整个类，全类</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 实例属性</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">1.</span> 属于实例对象的属性---称之为实例属性</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">2.</span> 创建在方法内部的属性是实例属性</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\t<span class=\"token list punctuation\">1.</span> self.属性名=值</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t\t<span class=\"token list punctuation\">2.</span> 实例对象.新属性名=值</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">3.</span> 实例属性属于实例对象，通过类无法调用</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">4.</span> 实例属性如果发生改变，不影响其他的实例对象，更不影响类属性</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">5.</span> 实例对象如果要使用，必须进行实例化</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">6.</span> 如果实例属性和类属性发生命名冲突，在当前实例对象范围内，遮蔽类属性</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">7.</span> 实例属性的作用范围：这整个实例对象</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token list punctuation\">2.</span> 实例：</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t通过类创建的对象称之为实例</pre></td></tr></table></figure><ul>\n<li>小结</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 实例属性：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t各个实例各自拥有，相互之间不影响，不影响类</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 类属性：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t全类都拥有，有且只有一个值，类属性发生了更改，影响所有的实例对象</pre></td></tr></table></figure><h2 id=\"面向对象的特性\"><a class=\"markdownIt-Anchor\" href=\"#面向对象的特性\">#</a> 面向对象的特性</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>三大特性：封装、继承、多态</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">-</span> 什么是面向对象</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t封装、继承、多态</pre></td></tr></table></figure><h3 id=\"封装\"><a class=\"markdownIt-Anchor\" href=\"#封装\">#</a> 封装</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 任何对象都有一个边界，把属性和方法保护在边界之内，称为封装</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t数据隐藏</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 封装的粒度</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 粒度过小：造成每个单个对象过于简单，让开发过程和使用过程过于复杂</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 粒度过大：对象过于复杂，使用过程过于简单</pre></td></tr></table></figure><h3 id=\"继承\"><a class=\"markdownIt-Anchor\" href=\"#继承\">#</a> 继承</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>类</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>猫类、狗类、动物类、生物类\t满足 ？？？ is a ？？？的关系</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>父类：更加的抽象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>子类：更加的特殊、具体。子类继承父类的一些特性。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>class 子类类名(父类类名):</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>父类：基类，超类，BaseClass</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>object：是所有类的父类、基类、超类---根类</pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Teacher</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">study</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我会学习'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span>Teacher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat_shit</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我会吃*'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>tao <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>tao<span class=\"token punctuation\">.</span>eat_shit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>tao<span class=\"token punctuation\">.</span>study<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>继承的特点</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 子类可以继承父类的成员</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 子类能不能继承父类的私有成员</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 具有扩展性</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t父类扩展了子类</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">4.</span> 父类可以拥有多个子类，子类也可以拥有多个父类</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">5.</span> 如果子类有构造方法则使用子类的构造方法，如果子类没有构造方法，则向父类调用构造方法</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">6.</span> 如果子类没有写出任何的继承关系，默认继承object类</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tobject类中有构造方法</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token list punctuation\">7.</span> 子类可以调用父类的成员</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 属性</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 方法</pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Teacher1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\"># 父</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>yanzhi<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">,</span>hahaha<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>yanzhi <span class=\"token operator\">=</span> yanzhi</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        self<span class=\"token punctuation\">.</span>__money <span class=\"token operator\">=</span> money</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        self<span class=\"token punctuation\">.</span>salary <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>__money<span class=\"token operator\">*</span><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>yanzhi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我会唱'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        self<span class=\"token punctuation\">.</span>yanzhi <span class=\"token operator\">=</span> yanzhi</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">study</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我会学习'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Boy_Student</span><span class=\"token punctuation\">(</span>Teacher1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\"># 孙</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\"># def __init__(self,zhishang):</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">#     self.zhishang = zhishang</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\"># def eat_shit(self):</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">#     print (' 我会吃 *')</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">#     print(self.zhishang)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># class Girl_Student(Teacher):</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">#     pass</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>tao <span class=\"token operator\">=</span> Boy_Student<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\"># tao.play(20)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\"># tao.eat_shit()</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tao<span class=\"token punctuation\">.</span>salary<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tao<span class=\"token punctuation\">.</span>yanzhi<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\"># meng = Teacher()</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\"># tao = Boy_Student()</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\"># fei = Girl_Student()</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\"># tao.eat_shit()</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\"># tao.study()</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\"># tao.yanzhi = 0</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\"># fei.study()</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\"># print(tao.tizhong)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\"># print(tao.yanzhi)</span></pre></td></tr></table></figure><ul>\n<li>多继承</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 钻石继承问题(菱形继承问题)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t子类可以继承多个父类，且多个父类又继承了同一个父类</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t导致：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t越高级的父类，会被创建的次数越多。大量的浪费空间。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t多继承的形势下资源被浪费的问题</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 解决方案：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tsuper的底层，通过mro解决继承的调用问题</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tmro：继承链式关系---在整个继承网上，所有的类只会出现一次</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tsuper()的用法是指根据链式关系，调用本类右侧的类</pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Grand</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'grand'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">f1</span><span class=\"token punctuation\">(</span>Grand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'f1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">f2</span><span class=\"token punctuation\">(</span>Grand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'f2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">f3</span><span class=\"token punctuation\">(</span>Grand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'f3'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">f4</span><span class=\"token punctuation\">(</span>Grand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'f4'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">sun</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">,</span> f2<span class=\"token punctuation\">,</span> f3<span class=\"token punctuation\">,</span> f4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sun'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>s <span class=\"token operator\">=</span> sun<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sun<span class=\"token punctuation\">.</span>mro<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>多态性</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 向不同的对象发送同一条信息，不同的对象可以产生不同的行为</pre></td></tr></table></figure><h2 id=\"模块\"><a class=\"markdownIt-Anchor\" href=\"#模块\">#</a> 模块</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python中的模块就是python中的文件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>模块：.py文件\t.pyc</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>程序的构成：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 顶层文件</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 各个模块</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>模块：module</pre></td></tr></table></figure><ul>\n<li>模块的特点</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 模块的概念：可以将代码量较大的程序，分割成若干个有组织、彼此独立又能相互调用的代码片段，这些有组织的代码，称为模块。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 模块在物理形式上，表现为：以.py为结尾的文件</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 一个文件可以被看做是一个模块，一个模块也可以被看做是一个文件</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 文件名：模块名+后缀</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> 每个模块都有自己的命名空间(变量的作用域)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">3.</span> python利用导入的形式，完成模块之间的相互调用</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t关键字：import</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t通过导入的形式，将多个模块之间关联起来，构成庞大的项目体系</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token list punctuation\">4.</span> 模块的特性：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t模块也是一个对象</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t模块中所有的类、变量、函数都当做模块本身的属性</pre></td></tr></table></figure><ul>\n<li>模块的导入</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 包：package</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 包是一个目录结构</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 包也是一个对象</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t\t<span class=\"token bold\"><span class=\"token punctuation\">__</span><span class=\"token content\">init</span><span class=\"token punctuation\">__</span></span>.py就是包对象的构造方法</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> 创建包：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t\t右键，new，python package</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">2.</span> 导入的形式</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> import 完整的模块名</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">1.</span> 只要使用引入的模块，就必须加上所有的包的路径</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">2.</span> 只要使用引入的模块，就必须加上所有的包的路径</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">3.</span> 只能导入模块级别的东西</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> import 完整的模块名 as xxx</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">1.</span> 使用更加方便</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">2.</span> 注意别名不要和模块中的其他属性和方法冲突</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>小结：</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t如果要导入多个模块</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 写多个import语句</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 写一个import语句，多个模块可以用逗号分开</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> 如果要起别名的话，需要分别起名</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token list punctuation\">3.</span> from 完整的模块名 import 属性</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 可以导入属性级别的数据</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 注意模块中的属性，不要和被导入的属性名冲突</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token list punctuation\">4.</span> from 完整的模块名 import 属性 as 别名</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 可以避免命名冲突问题</pre></td></tr></table></figure><ul>\n<li>模块的作用</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 提高了代码的可重用性</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 是封装的产物</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 也简化了流程</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">2.</span> 提高了代码的可读性</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> 减少了代码的冗余</pre></td></tr></table></figure><figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>模块化图书管理系统</pre></td></tr></table></figure><ul>\n<li>补充</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 模块中尽量不要书写逻辑代码</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\twhile，for，输入输出函数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 模块中应该只包含</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 类</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 函数</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> 变量</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token list punctuation\">4.</span> if name=='<span class=\"token bold\"><span class=\"token punctuation\">__</span><span class=\"token content\">main</span><span class=\"token punctuation\">__</span></span>'</pre></td></tr></table></figure><h2 id=\"计算复杂度公式\"><a class=\"markdownIt-Anchor\" href=\"#计算复杂度公式\">#</a> 计算复杂度公式</h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>a</mi><mi>T</mi><mo stretchy=\"false\">(</mo><mfrac><mi>N</mi><mi>b</mi></mfrac><mo stretchy=\"false\">)</mo><mo>+</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mi>d</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(N) = aT(\\frac{N}{b})+O(N^d)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.217331em;vertical-align:-0.345em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.872331em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.099108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1.</mn><mi>l</mi><mi>o</mi><msubsup><mi>g</mi><mi>b</mi><mi>a</mi></msubsup><mo>&lt;</mo><mi>d</mi><mo separator=\"true\">,</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mi>d</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">1. log_b^a &lt; d ,O(N^d)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9775479999999999em;vertical-align:-0.2831079999999999em;\"></span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.4168920000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2831079999999999em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.099108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2.</mn><mi>l</mi><mi>o</mi><msubsup><mi>g</mi><mi>b</mi><mi>a</mi></msubsup><mo>&gt;</mo><mi>d</mi><mo separator=\"true\">,</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mrow><mi>l</mi><mi>o</mi><msubsup><mi>g</mi><mi>b</mi><mi>a</mi></msubsup></mrow></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">2. log_b^a &gt; d,O(N^{log_b^a})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9775479999999999em;vertical-align:-0.2831079999999999em;\"></span><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.4168920000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2831079999999999em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.12998em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.87998em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7385428571428572em;\"><span style=\"top:-2.214em;margin-left:-0.03588em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3.</mn><mi>l</mi><mi>o</mi><msubsup><mi>g</mi><mi>b</mi><mi>a</mi></msubsup><mo>=</mo><mi>d</mi><mo separator=\"true\">,</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mi>d</mi></msup><mi>l</mi><mi>o</mi><msubsup><mi>g</mi><mn>2</mn><mi>n</mi></msubsup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">3.log_b^a=d,O(N^dlog_2^n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9775479999999999em;vertical-align:-0.2831079999999999em;\"></span><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.4168920000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2831079999999999em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.099108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mtext>：调用子问题的次数</mtext></mrow><annotation encoding=\"application/x-tex\">a：调用子问题的次数</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord cjk_fallback\">：</span><span class=\"mord cjk_fallback\">调</span><span class=\"mord cjk_fallback\">用</span><span class=\"mord cjk_fallback\">子</span><span class=\"mord cjk_fallback\">问</span><span class=\"mord cjk_fallback\">题</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">次</span><span class=\"mord cjk_fallback\">数</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mtext>：子问题的规模是原始问题的倍数</mtext></mrow><annotation encoding=\"application/x-tex\">b：子问题的规模是原始问题的倍数</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord cjk_fallback\">：</span><span class=\"mord cjk_fallback\">子</span><span class=\"mord cjk_fallback\">问</span><span class=\"mord cjk_fallback\">题</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">规</span><span class=\"mord cjk_fallback\">模</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord cjk_fallback\">原</span><span class=\"mord cjk_fallback\">始</span><span class=\"mord cjk_fallback\">问</span><span class=\"mord cjk_fallback\">题</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">倍</span><span class=\"mord cjk_fallback\">数</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mtext>：除递归以外的部分的算法时间复杂度</mtext></mrow><annotation encoding=\"application/x-tex\">d：除递归以外的部分的算法时间复杂度</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord cjk_fallback\">：</span><span class=\"mord cjk_fallback\">除</span><span class=\"mord cjk_fallback\">递</span><span class=\"mord cjk_fallback\">归</span><span class=\"mord cjk_fallback\">以</span><span class=\"mord cjk_fallback\">外</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">部</span><span class=\"mord cjk_fallback\">分</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">算</span><span class=\"mord cjk_fallback\">法</span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">间</span><span class=\"mord cjk_fallback\">复</span><span class=\"mord cjk_fallback\">杂</span><span class=\"mord cjk_fallback\">度</span></span></span></span></p>\n<h2 id=\"文件\"><a class=\"markdownIt-Anchor\" href=\"#文件\">#</a> 文件</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>计算机：硬件+软件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>硬件：CPU、显卡、硬盘、主板、机箱、....</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>软件：OS（operation System）、lol、IOS、OW</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>主板：承载各种硬件+传递命令+自主运算</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>内存：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 快、贵</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t缺点：一旦断电---寄</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t所有的程序，都是运行在内存中的</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>硬盘：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t便宜</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t永久存储---持久化</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t机械不能摔</pre></td></tr></table></figure><ul>\n<li>文件</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>txt py md xml doc docx xlsx xls pdf exe html cpp css dll bat jpg png gif avi psd ts m3u8 mp4 mp3 rmvb obj link</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 文件都是以计算机硬盘为载体存储在计算机上的信息集合</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t文件：可以是文本、图片、音频、视频</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t数据：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">1.</span> 直接存有价值</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">2.</span> 价值通过分析获得</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t文件通常都拥有扩展名</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\thost文件没有扩展名</pre></td></tr></table></figure><ul>\n<li>打开文件</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> open(file,mode='',encoding='')</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t打开一个文件资源，返回一个I/O流</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tfile：接收一个字符串，字符串的内容是需要开流的文件的路径</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tmode：打开流的方式</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tencoding：编码</pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>模式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>r</td>\n<td>以只读的方式打开文件，文件的指针在头部</td>\n</tr>\n<tr>\n<td>rb</td>\n<td>以二进制的形式只读打开文件，文件指针在头部</td>\n</tr>\n<tr>\n<td>rb+</td>\n<td>以二进制的形式读写文件，文件指针在头部</td>\n</tr>\n<tr>\n<td>w</td>\n<td>以只写的方式打开文件，覆盖写</td>\n</tr>\n<tr>\n<td>wb</td>\n<td>以二进制只写的方式打开文件，覆盖写</td>\n</tr>\n<tr>\n<td>wb+</td>\n<td>同上</td>\n</tr>\n<tr>\n<td>a</td>\n<td>追加：以只写的形式打开文件，如果文件存在，则追加写，如果不存在，则创建一个新文件</td>\n</tr>\n<tr>\n<td>ab</td>\n<td>同上，二进制</td>\n</tr>\n<tr>\n<td>ab+</td>\n<td>同上，读写</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "语言",
                "Python",
                "Python"
            ]
        },
        {
            "id": "http://example.com/computer-science/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/",
            "url": "http://example.com/computer-science/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/",
            "title": "数据结构与算法",
            "date_published": "2022-08-28T15:13:37.424Z",
            "content_html": "<h1 id=\"数据结构\"><a class=\"markdownIt-Anchor\" href=\"#数据结构\">#</a> 数据结构</h1>\n<h2 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\">#</a> 数组</h2>\n<p>数组的优点:</p>\n<ul>\n<li>存取速度快</li>\n</ul>\n<p>数组的缺点:</p>\n<ul>\n<li>事先必须知道数组的长度</li>\n<li>插入删除元素很慢</li>\n<li>空间通常是有限制的</li>\n<li>需要大块连续的内存块</li>\n<li>插入删除元素的效率很低</li>\n</ul>\n<h3 id=\"把数组中的-0-移到末尾\"><a class=\"markdownIt-Anchor\" href=\"#把数组中的-0-移到末尾\">#</a> 把数组中的 0 移到末尾</h3>\n<ul>\n<li>用一个辅助变量 <code>index</code>  指向第一个元素，依次判断</li>\n<li>若不为 0，则 <code>index</code>  下标所在位置替换为该元素，同时 <code>index++</code></li>\n<li>剩余后几位依次补 0</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># test01---283</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 把数组中的 0 移到末尾</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">method1</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">:</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    index <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> l<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> num <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            nums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> num</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">while</span> index <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        nums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> l</pre></td></tr></table></figure><h3 id=\"改变数组的维度\"><a class=\"markdownIt-Anchor\" href=\"#改变数组的维度\">#</a> 改变数组的维度</h3>\n<ul>\n<li>首先判断是否可以进行转化</li>\n<li>根据输入的行数和列数，构建一个空矩阵</li>\n<li>遍历该空矩阵，找寻规律（类似商和余数）依次填入</li>\n<li><code>new_nums[i][j] = nums[index // n][index % n]</code></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># test02---566</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 改变数组的维度</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># [[1,2],[3,4]] --->[[1,2,3,4]]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">:</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    m<span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> m <span class=\"token operator\">*</span> n <span class=\"token operator\">!=</span> r <span class=\"token operator\">*</span> c<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'无法转换'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> nums</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    new_nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    index <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            new_nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>index <span class=\"token operator\">//</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>index <span class=\"token operator\">%</span> n<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> new_nums</pre></td></tr></table></figure><h3 id=\"找出数组中最长的连续-1\"><a class=\"markdownIt-Anchor\" href=\"#找出数组中最长的连续-1\">#</a> 找出数组中最长的连续 1</h3>\n<ul>\n<li>假设最开始连续数为 0</li>\n<li>依次遍历，如果是 1 且连续则利用 <code>math.max</code>  替换，</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># test03---485</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># nums = [1,1,0,1,1,1] ---> 3</span></pre></td></tr></table></figure><h3 id=\"稀疏矩阵\"><a class=\"markdownIt-Anchor\" href=\"#稀疏矩阵\">#</a> 稀疏矩阵</h3>\n<p><em>当一个二维矩阵中大多数为 0，或同一个数字时采用稀疏矩阵</em></p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>数组的下标寻址非常快，由于计算机内存限制，数组的长度也有限制</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>--></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>后提出了二分查找，要求数组的构造一定有序，解决了普通数组查找复杂度过高的问题</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>--></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>在增删改比较频繁的数据结构中，数组不会被优先考虑</pre></td></tr></table></figure><ul>\n<li>\n<p>三元组</p>\n<ul>\n<li>\n<p>将二维数组转为稀疏数组</p>\n<ul>\n<li>遍历原始二维数组，得到有效个数 sum</li>\n<li>创建稀疏数组 spare int [sum+1] [3]</li>\n<li>将二维数组的有效值存入稀疏数组</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 生成二维数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 得到有效数值的个数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 创建稀疏数组</span></pre></td></tr></table></figure></li>\n<li>\n<p>将稀疏数组存盘，转换为二维数组</p>\n<ul>\n<li>读取稀疏数组的第一行，创建原始二维数组</li>\n<li>读取后几行数据写入原始数组</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>十字链表</p>\n</li>\n</ul>\n<h2 id=\"队列\"><a class=\"markdownIt-Anchor\" href=\"#队列\">#</a> 队列</h2>\n<p><em>为了防止假溢出或者假满的问题，一般将顺序队列转换为循环队列</em></p>\n<p><img data-src=\"/images/image/DataStructure/queue-01.png\" alt=\"queue-01\"></p>\n<p>当前元素：（rear-front+MAXSIZE）% MAXSIZE</p>\n<h2 id=\"链表\"><a class=\"markdownIt-Anchor\" href=\"#链表\">#</a> 链表</h2>\n<p><em>它的结构被证明不适合查找</em></p>\n<h4 id=\"创建单链表\"><a class=\"markdownIt-Anchor\" href=\"#创建单链表\">#</a> 创建单链表</h4>\n<ul>\n<li>\n<p>定义每个结点</p>\n</li>\n<li>\n<p>定义单链表</p>\n</li>\n</ul>\n<h4 id=\"增删改\"><a class=\"markdownIt-Anchor\" href=\"#增删改\">#</a> 增删改</h4>\n<ul>\n<li>添加节点，往末尾追加</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加结点，不考虑编号\t</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 通过一个辅助指针 (变量) 来帮助找到添加的位置</span></pre></td></tr></table></figure><ul>\n<li>增加节点，往指定位置</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加节点，考虑编号</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 通过一个辅助指针 (变量) 来帮助找到添加的位置</span></pre></td></tr></table></figure><ul>\n<li>修改</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 修改节点的信息，根据 no 编号来修改，即 no 编号不能改</span></pre></td></tr></table></figure><ul>\n<li>删除</li>\n</ul>\n<h4 id=\"求单链表有效长度的个数\"><a class=\"markdownIt-Anchor\" href=\"#求单链表有效长度的个数\">#</a> 求单链表有效长度的个数</h4>\n<h4 id=\"查找单链表中的倒数第k个结点\"><a class=\"markdownIt-Anchor\" href=\"#查找单链表中的倒数第k个结点\">#</a> 查找单链表中的倒数第 k 个结点</h4>\n<ul>\n<li>编写一个方法接收节点，index</li>\n<li>先将链表从头到尾遍历，得到总长度</li>\n<li>得到后从头开始遍历，若存在则取出</li>\n</ul>\n<h4 id=\"单链表的反转\"><a class=\"markdownIt-Anchor\" href=\"#单链表的反转\">#</a> 单链表的反转</h4>\n<ul>\n<li>如果当前链表为空，或者只有一个节点，无需反转，直接返回</li>\n<li>定义一个辅助的指针 (变量)，帮助我们遍历原来的链表</li>\n<li>指向当前节点 [cur] 的下一个节点</li>\n<li>遍历原来的链表，每遍历一个节点，就将其取出，并放在新的链表  <code>reverseHead</code>  的最前端</li>\n<li>将 cur 的下一个节点指向新的链表的最前端</li>\n<li>将 cur 连接到新的链表上</li>\n</ul>\n<h4 id=\"从尾到头打印单链表\"><a class=\"markdownIt-Anchor\" href=\"#从尾到头打印单链表\">#</a> 从尾到头打印单链表</h4>\n<p><em>反向遍历，用 stack 实现</em></p>\n<ul>\n<li>\n<p>方式一：先将单链表进行翻转操作，然后遍历，<em>破坏了原有链表的结构，不建议</em></p>\n</li>\n<li>\n<p>方式二：利用栈数据结构，将各个节点压入栈</p>\n</li>\n</ul>\n<h4 id=\"合并两个有序的单链表合并之后的链表依然有序\"><a class=\"markdownIt-Anchor\" href=\"#合并两个有序的单链表合并之后的链表依然有序\">#</a> 合并两个有序的单链表，合并之后的链表依然有序</h4>\n<h3 id=\"双向链表\"><a class=\"markdownIt-Anchor\" href=\"#双向链表\">#</a> 双向链表</h3>\n<ul>\n<li>\n<p>区别：</p>\n<ul>\n<li>单向链表的缺点：查找方向只能是一个，双向链表可以向前或向后查找</li>\n<li>单向链表需要辅助接点才能删除，双链表可以自我删除</li>\n</ul>\n</li>\n<li>\n<p>遍历</p>\n<ul>\n<li>与单链表相同，可以向前或者向后查找</li>\n</ul>\n</li>\n<li>\n<p>添加 (默认添加到双链表的最后)</p>\n<ul>\n<li>先找到双向链表的最后这个结点</li>\n<li><code>temp.next =newHeroNode;</code></li>\n<li><code>newHeroNode.pre=temp</code></li>\n</ul>\n</li>\n<li>\n<p>删除</p>\n<ul>\n<li>可以实现自我删除</li>\n<li><code>temp.pre.next=temp.next;</code></li>\n<li><code>temp.next.pre=temp.pre</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"约瑟夫环问题\"><a class=\"markdownIt-Anchor\" href=\"#约瑟夫环问题\">#</a> <em>约瑟夫环问题</em></h2>\n<p><code>Josephu </code> 问题为：设编号为 1，2，… n 的 n 个人围坐一圈，约定编号为 k（1&lt;=k&lt;=n）的人从 1 开始报数，数 到 m 的那个人出列，它的下一位又从 1 开始报数，数到 m 的那个人又出列，依次类推，直到所有人出列为止，由 此产生一个出队编号的序列。</p>\n<ul>\n<li>\n<p>创建环形链表</p>\n<ul>\n<li>先创建第一个节点，让 first 指向第一个节点，并形成环形</li>\n<li>每次创建新节点时，直接加入到环形链表中即可</li>\n</ul>\n</li>\n<li>\n<p>遍历环形链表</p>\n<ul>\n<li>先让一个辅助变量 cur 指向 first 结点，</li>\n<li>通过 <code>while</code>  循环遍历， <code>cur.next==first</code>  结束</li>\n</ul>\n</li>\n<li>\n<p>小孩出圈问题</p>\n<ul>\n<li>创建要给辅助指针，帮助完成小孩出圈</li>\n<li>小孩报数前，先让  <code>first</code>  和  <code>helper </code> 移动 k - 1 次</li>\n<li>当小孩报数时，让 <code>first</code>  和  <code>helper </code> 指针同时 的移动 m - 1 次，然后出圈</li>\n<li>让 <code>first</code>  和  <code>helper</code>  指针同时 的移动  <code>countNum</code>  - 1</li>\n<li>这时  <code>first</code>  指向的节点，就是要出圈的小孩节点</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"栈\"><a class=\"markdownIt-Anchor\" href=\"#栈\">#</a> 栈</h2>\n<p><em>stack, 先进后出的有序列表</em></p>\n<blockquote>\n<p>应用场景</p>\n</blockquote>\n<ul>\n<li>子程序的调用：跳往子程序之前，会先将下个指令的地址存入堆栈中，直到子程序执行后将地址取出</li>\n<li>处理递归调用：在子程序的基础上，将参数，区域变量等数据存入栈中</li>\n<li>表达式的转换与求值</li>\n<li>二叉树的遍历</li>\n<li>图形的深度优先搜索</li>\n</ul>\n<h2 id=\"表达式\"><a class=\"markdownIt-Anchor\" href=\"#表达式\">#</a> 表达式</h2>\n<ul>\n<li>\n<p>前缀表达式 (<strong>波兰表达式</strong>)</p>\n<ul>\n<li>从右至左扫描</li>\n</ul>\n</li>\n<li>\n<p>中缀表达式</p>\n<ul>\n<li>一般转化为后缀表达式</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>将中缀表达式“1+((2+3)×4)-5”转换为后缀表达式</pre></td></tr></table></figure><p><img data-src=\"/images/image/DataStructure/02.png\" alt=\"中缀表达式\"></p>\n</li>\n<li>\n<p>后缀表达式 (<strong>逆波兰表达式</strong>)</p>\n<ul>\n<li>从左至右扫描</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"递归\"><a class=\"markdownIt-Anchor\" href=\"#递归\">#</a> 递归</h2>\n<p><em>自己调用自己</em></p>\n<blockquote>\n<p>调用机制：当程序执行一个方法时，会开辟一个独立的空间</p>\n</blockquote>\n<h2 id=\"递归-迷宫问题\"><a class=\"markdownIt-Anchor\" href=\"#递归-迷宫问题\">#</a> 递归 - 迷宫问题</h2>\n<ul>\n<li>小球得到的路径，与设置的查找策略有关：找路的上下左右顺序</li>\n</ul>\n<h2 id=\"递归-八皇后问题\"><a class=\"markdownIt-Anchor\" href=\"#递归-八皇后问题\">#</a> 递归 - 八皇后问题</h2>\n<blockquote>\n<p><strong>任意两个皇后都不能处于同一行、</strong> <strong>同一列或同一斜线上，问有多少种摆法</strong></p>\n</blockquote>\n<ul>\n<li>第一个皇后先放第一行第一列</li>\n<li>第二个皇后放在第二行第一列、然后判断是否 OK， 如果不 OK，继续放在第二列、第三列、依次把所有列都 放完，找到一个合适</li>\n<li>继续第三个皇后，还是第一列、第二列…… 直到第 8 个皇后也能放在一个不冲突的位置，算是找到了一个正确 解</li>\n<li>当得到一个正确解时，在栈回退到上一个栈时，就会开始回溯，即将第一个皇后，放到第一列的所有正确解， 全部得到</li>\n<li>然后回头继续第一个皇后放第二列，后面继续循环执行 1,2,3,4 的步骤</li>\n</ul>\n<h2 id=\"排序\"><a class=\"markdownIt-Anchor\" href=\"#排序\">#</a> 排序</h2>\n<p>度量程序执行时间的方法：</p>\n<ul>\n<li>事后统计法</li>\n<li>事前估算法</li>\n</ul>\n<p>时间复杂度：</p>\n<p>​\t常见的算法时间复杂度由小到大依次为：$Ο(1)＜Ο(log2n)＜Ο(n)＜Ο(nlog2n)＜Ο(n2)＜Ο(n3)＜ Ο(nk) ＜ Ο(2n) $</p>\n<p>，随着问题规模 n 的不断增大，上述时间复杂度不断增大，算法的执行效率越低</p>\n<p><img data-src=\"/images/image/DataStructure/reverse.png\" alt=\"\"></p>\n<p><mark>不稳定：快些选堆</mark></p>\n<p><strong>时间快：快些归队</strong></p>\n<h3 id=\"冒泡排序\"><a class=\"markdownIt-Anchor\" href=\"#冒泡排序\">#</a> 冒泡排序</h3>\n<blockquote>\n<p>依次比较 相邻元素的值，若发现逆序则交换</p>\n</blockquote>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        flag <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                flag <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> flag<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span></pre></td></tr></table></figure><h3 id=\"选择排序\"><a class=\"markdownIt-Anchor\" href=\"#选择排序\">#</a> 选择排序</h3>\n<blockquote>\n<p>找到序列中最小的一个元素，依次放到首位</p>\n</blockquote>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span></pre></td></tr></table></figure><p><img data-src=\"/images/image/DataStructure/reverse-03.png\" alt=\"选择排序\"></p>\n<h3 id=\"插入排序\"><a class=\"markdownIt-Anchor\" href=\"#插入排序\">#</a> 插入排序</h3>\n<blockquote>\n<p><strong>把</strong> <strong>n</strong> <strong>个待排序的元素看成为一个有序表和一个无序表</strong>，开始时<strong>有</strong></p>\n<p><strong>序表中只包含一个元素</strong>，无序表中包含有 <strong>n-1</strong> <strong>个元素</strong>，</p>\n</blockquote>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span></pre></td></tr></table></figure><p><img data-src=\"/images/image/DataStructure/reverse-02.png\" alt=\"插入排序\"></p>\n<h3 id=\"希尔排序\"><a class=\"markdownIt-Anchor\" href=\"#希尔排序\">#</a> 希尔排序</h3>\n<blockquote>\n<p>是<strong>简单插入</strong>排序经过改进后的高效版本，也称为缩小增量排序</p>\n</blockquote>\n<ul>\n<li>初始增量为 <code>length/2</code> , 即将数组分为 <code>length/2</code>  个组，对每组进行快速排序</li>\n<li>然后继续缩小增量</li>\n</ul>\n<p><img data-src=\"/images/image/DataStructure/reverse-01.png\" alt=\"希尔排序\"></p>\n<h3 id=\"快速排序\"><a class=\"markdownIt-Anchor\" href=\"#快速排序\">#</a> 快速排序</h3>\n<blockquote>\n<p>对<strong>冒泡排序</strong>的改进，递归分治法</p>\n</blockquote>\n<p><em>快速排序在每一轮挑选一个基准元素，并让其他比它大的元素移动到数列一边，比它小的元素移动到数列的另一边，从而把数列拆解成了两个部分</em></p>\n<ul>\n<li>时间复杂度：每轮拆分为两部分，平均时间复杂度是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>空间复杂度：使用本身空间进行排序，空间复杂度是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token title important\"><span class=\"token punctuation\">#</span>例如</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>[1, 5, 3, 4, 2, 8, 7, 6]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>基准：1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    --></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    index=1,left=1,right=6</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    --></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    6>1</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    --></pre></td></tr></table></figure><p><img data-src=\"/images/image/DataStructure/reverse-04.png\" alt=\"快速排序\"></p>\n<h3 id=\"归并排序\"><a class=\"markdownIt-Anchor\" href=\"#归并排序\">#</a> 归并排序</h3>\n<p><em>利用归并的思想实现的排序方法</em></p>\n<h3 id=\"基数排序桶排序\"><a class=\"markdownIt-Anchor\" href=\"#基数排序桶排序\">#</a> 基数排序 (桶排序)</h3>\n<p><img data-src=\"/images/image/DataStructure/reverse-05.png\" alt=\"基数排序\"></p>\n<p><mark>有负数的数组不采用基数排序</mark></p>\n<h2 id=\"哈希表\"><a class=\"markdownIt-Anchor\" href=\"#哈希表\">#</a> 哈希表</h2>\n<ul>\n<li>介绍：</li>\n</ul>\n<pre><code>散列表，也叫哈希表，根据key-value直接访问数据结构，通过把关键码值映射到表中一个位置来访问，\n映射函数---&gt;称为散列函数\n存放记录的数组叫做散列表\n</code></pre>\n<h1 id=\"算法\"><a class=\"markdownIt-Anchor\" href=\"#算法\">#</a> 算法</h1>\n<blockquote>\n<p>算法的本质：穷举</p>\n</blockquote>\n<p><em>算法工程师：重点在数学建模，调参经验</em></p>\n<p><em>数据结构算法则侧重于计算机的思维</em></p>\n<ul>\n<li>如何穷举：无遗漏地穷举所有可能解\n<ul>\n<li>例如递归类问题，动态规划问题</li>\n</ul>\n</li>\n<li>如何聪明的穷举：避免所有冗余的计算，消耗尽可能少的资源\n<ul>\n<li>非递归问题， <code>Union Find</code>  并查集算法，贪心算法，KMP 算法</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"查找算法\"><a class=\"markdownIt-Anchor\" href=\"#查找算法\">#</a> 查找算法</h2>\n<ul>\n<li>顺序（线性）查找</li>\n<li>二分查找\n<ul>\n<li><strong>前提该数组是个有序数组</strong></li>\n<li>确定该数组中间的下标</li>\n<li>然后需要查找的数和中间的殊相比较，然后向左或向右递归查找</li>\n</ul>\n</li>\n<li>插值查收\n<ul>\n<li><strong>前提该数组是个有序数组</strong></li>\n<li>每次从自适应 mid 处开始查找</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mi>n</mi><mi>t</mi><mi>m</mi><mi>i</mi><mi>d</mi><mo>=</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo>+</mo><mo stretchy=\"false\">(</mo><mi>h</mi><mi>i</mi><mi>g</mi><mi>h</mi><mo>−</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>k</mi><mi>e</mi><mi>y</mi><mo>−</mo><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy=\"false\">[</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy=\"false\">[</mo><mi>h</mi><mi>i</mi><mi>g</mi><mi>h</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy=\"false\">[</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">int mid = low + (high - low) * (key - arr[low]) / (arr[high] - arr[low])</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>适合数据量大，分布均匀</li>\n</ul>\n</li>\n<li>斐波那契查找\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>i</mi><mi>d</mi><mo>=</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo>+</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>−</mo><mn>1</mn><mtext>（</mtext><mi>F</mi><mtext>代表斐波那契数列）</mtext></mrow><annotation encoding=\"application/x-tex\">mid=low+F(k-1)-1（F 代表斐波那契数列）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord cjk_fallback\">（</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord cjk_fallback\">代</span><span class=\"mord cjk_fallback\">表</span><span class=\"mord cjk_fallback\">斐</span><span class=\"mord cjk_fallback\">波</span><span class=\"mord cjk_fallback\">那</span><span class=\"mord cjk_fallback\">契</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">列</span><span class=\"mord cjk_fallback\">）</span></span></span></span></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"单链表\"><a class=\"markdownIt-Anchor\" href=\"#单链表\">#</a> 单链表</h2>\n<blockquote>\n<p>常用技巧：使用双指针</p>\n</blockquote>\n<ul>\n<li>二分搜索：两端指向中间的双指针，只能用在有序数组上</li>\n<li>滑动窗口：快慢双指针，用于解决字串问题\n<ul>\n<li>有限制，必须明确什么时候该扩大窗口，或收缩</li>\n</ul>\n</li>\n<li>回文串</li>\n</ul>\n<p><strong>前缀和技巧</strong>和<strong>差分数组技巧</strong></p>\n<h2 id=\"二叉树\"><a class=\"markdownIt-Anchor\" href=\"#二叉树\">#</a> 二叉树</h2>\n<p><em>递归解法</em></p>\n<ul>\n<li>遍历二叉树得出答案 **— 回溯算法核心 —**</li>\n<li>通过分解问题计算答案 **— 动态规划核心 —**</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "理论",
                "数据结构"
            ]
        },
        {
            "id": "http://example.com/%E5%9F%BA%E4%BA%8EMybatis%E7%9A%84log4j%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/",
            "url": "http://example.com/%E5%9F%BA%E4%BA%8EMybatis%E7%9A%84log4j%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/",
            "title": "基于Mybatis的log4j配置文件",
            "date_published": "2022-08-28T15:13:37.421Z",
            "content_html": "<h2 id=\"使用说明\"><a class=\"markdownIt-Anchor\" href=\"#使用说明\">#</a> 使用说明</h2>\n<blockquote>\n<ol>\n<li>导入 log4 的 jar 包</li>\n</ol>\n</blockquote>\n<span id=\"more\"></span>\n<pre><code class=\"language-pom\">&lt;dependency&gt;\n\t&lt;groupId&gt;log4j&lt;/groupId&gt;\n\t&lt;artifactId&gt;log4j&lt;/artifactId&gt;\n\t&lt;version&gt;1.2.17&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<blockquote>\n<ol start=\"2\">\n<li>mybatis 中设置 setting</li>\n</ol>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>settings</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> \t<span class=\"token comment\">&lt;!-- 指定 MyBatis 所用日志的具体实现，未指定时将自动查找。--></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>logImpl<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>LOG4J<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> \t<span class=\"token comment\">&lt;!-- 标准日志工厂实现 --></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> \t<span class=\"token comment\">&lt;!--&lt;setting name=\"logImpl\" value=\"STDOUT_LOGGING\"/>--></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>settings</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<ol start=\"3\">\n<li>配置 log4j 配置文件</li>\n</ol>\n</blockquote>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#将等级为 DEBUG 的日志信息输出到 console 和 file 这两个目的地，console 和 file 的定义在下 面的代码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key attr-name\">log4j.rootLogger</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">DEBUG,console,file</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#控制台输出的相关设置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key attr-name\">log4j.appender.console</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">org.apache.log4j.ConsoleAppender</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key attr-name\">log4j.appender.console.Target</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">System.out log4j.appender.console.Threshold=DEBUG</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key attr-name\">log4j.appender.console.layout</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">org.apache.log4j.PatternLayout</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key attr-name\">log4j.appender.console.layout.ConversionPattern</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">[%c]-%m%n</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#文件输出的相关设置</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token key attr-name\">log4j.appender.file</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">org.apache.log4j.RollingFileAppender</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token key attr-name\">log4j.appender.file.File</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">./log/zhao.log log4j.appender.file.MaxFileSize=10mb</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token key attr-name\">log4j.appender.file.Threshold</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">DEBUG</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token key attr-name\">log4j.appender.file.layout</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">org.apache.log4j.PatternLayout</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token key attr-name\">log4j.appender.file.layout.ConversionPattern</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#日志输出级别</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token key attr-name\">log4j.logger.org.mybatis</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">DEBUG</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token key attr-name\">log4j.logger.java.sql</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">DEBUG</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token key attr-name\">log4j.logger.java.sql.Statement</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">DEBUG</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token key attr-name\">log4j.logger.java.sql.ResultSet</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">DEBUG</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token key attr-name\">log4j.logger.java.sql.PreparedStatement</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">DEBUG</span></pre></td></tr></table></figure><blockquote>\n<ol start=\"4\">\n<li>要在使用的类中 导入包，参数设置为当前类</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserDaoTest</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<ol start=\"5\">\n<li>使用 log4j 查看输出</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"info\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"debug\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "Mybatis"
            ]
        },
        {
            "id": "http://example.com/%E5%9F%BA%E4%BA%8EJavaWeb%E7%9A%84%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/",
            "url": "http://example.com/%E5%9F%BA%E4%BA%8EJavaWeb%E7%9A%84%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/",
            "title": "基于JavaWeb的邮件发送",
            "date_published": "2022-08-28T15:13:37.415Z",
            "content_html": "<h2 id=\"前提\"><a class=\"markdownIt-Anchor\" href=\"#前提\">#</a> 前提</h2>\n<blockquote>\n<p>邮箱实现了 SMTP，POP 等服务，并且得到了有关的授权码</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"概述\"><a class=\"markdownIt-Anchor\" href=\"#概述\">#</a> 概述</h2>\n<blockquote>\n<p>使用<strong> Java</strong> 发送<strong> Email</strong> 需要 JavaMail 和 Java Activation Framework</p>\n</blockquote>\n<p>得到两个 jar 包：</p>\n<ul>\n<li>mail.jar</li>\n<li>activation.jar</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 相关 maven--></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>javax.activation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>activation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.1.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>javax.mail<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mail<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.4.7<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"使用示例\"><a class=\"markdownIt-Anchor\" href=\"#使用示例\">#</a> 使用示例</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> resp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">String</span> email <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">// 用户注册后给其发送邮件，使用线程来发送，防止出现耗时，和网站注册人数过多</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">Sendmail</span> send <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sendmail</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            send<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 注册用户</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            req<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"注册成功，发送了一封邮件给你\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            req<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestDispatcher</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"info.jsp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            req<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"注册失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            req<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestDispatcher</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index.jsp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"工具类\"><a class=\"markdownIt-Anchor\" href=\"#工具类\">#</a> 工具类</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zhao<span class=\"token punctuation\">.</span>pojo<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>mail<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>mail<span class=\"token punctuation\">.</span>internet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InternetAddress</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>mail<span class=\"token punctuation\">.</span>internet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MimeMessage</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Properties</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 网站三秒原则</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Sendmail</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  \t<span class=\"token comment\">// 设置发送邮件人的信息，以及授权码</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> from <span class=\"token operator\">=</span><span class=\"token string\">\"*****@qq.com\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span><span class=\"token string\">\"*****@qq.com\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span><span class=\"token string\">\"*****\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> host <span class=\"token operator\">=</span><span class=\"token string\">\"smtp.qq.com\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Sendmail</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>user<span class=\"token operator\">=</span>user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  \t<span class=\"token comment\">//c 重写 thread 的 run 方法</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">// 复杂文件，包含图片</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">Properties</span> prop <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            prop<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mail.host\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"smtp.qq.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 设置 qq 邮件服务器</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            prop<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mail.transport.protocol\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"smtp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 邮件发送协议</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            prop<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mail.smtp.auth\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 验证用户名密码</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">//===============qq 还得设置 ssl 加密</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token class-name\">MailSSLSocketFactory</span> sf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MailSSLSocketFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            sf<span class=\"token punctuation\">.</span><span class=\"token function\">setTrustAllHosts</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            prop<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mail.smtp.ssl.enable\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            prop<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mail.smtp.ssl.socketFactory\"</span><span class=\"token punctuation\">,</span>sf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">// 使用 JavaMail 发送邮件五步骤</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token comment\">//1. 创建定义整个应用程序所欲要的换陷阱信息 session,=============qq 才有</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token class-name\">Session</span> session <span class=\"token operator\">=</span> <span class=\"token class-name\">Session</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDefaultInstance</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Authenticator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token keyword\">protected</span> <span class=\"token class-name\">PasswordAuthentication</span> <span class=\"token function\">getPasswordAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    <span class=\"token comment\">// 发件人邮件用户名，授权码</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PasswordAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"******@qq.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"授权码\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token comment\">//2. 开启 session 的 debug 模式，查看邮件发送状态</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            session<span class=\"token punctuation\">.</span><span class=\"token function\">setDebug</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token comment\">// 通过 session 得到 transport 对象</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token class-name\">Transport</span> ts <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">getTransport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token comment\">//3. 使用用户的用户名，授权码链接</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            ts<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>username<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token comment\">//4. 创建文件</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token comment\">// 创建邮件对象</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token class-name\">MimeMessage</span> message <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MimeMessage</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token comment\">// 指名邮件的发件人</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            message<span class=\"token punctuation\">.</span><span class=\"token function\">setFrom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InternetAddress</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token comment\">// 指名邮件的收件人</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            message<span class=\"token punctuation\">.</span><span class=\"token function\">setRecipient</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Message<span class=\"token punctuation\">.</span>RecipientType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TO</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InternetAddress</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token comment\">// 邮件的标题</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            message<span class=\"token punctuation\">.</span><span class=\"token function\">setSubject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户注册邮件\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token comment\">//// 准备图片</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token comment\">//MimeBodyPart image = new MimeBodyPart();</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token comment\">//DataHandler dh = new DataHandler (new FileDataSource (\"F:\\\\IDEA\\\\workspace\\\\ 邮件发送 \\\\target\\\\classes\\\\1.png\"));</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token comment\">//image.setDataHandler(dh);</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token comment\">//image.setContentID(\"1.png\");</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token comment\">//// 准备附件</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token comment\">//MimeBodyPart bodyPart = new MimeBodyPart();</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token comment\">//bodyPart.setDataHandler (new DataHandler (new FileDataSource (\"F:\\\\IDEA\\\\workspace\\\\ 邮件发送 \\\\target\\\\classes\\\\db.properties\")));</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token comment\">//bodyPart.setFileName(\"db.properties\");</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token comment\">//// 邮件的内容</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token comment\">//MimeBodyPart text = new MimeBodyPart();</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token comment\">//text.setContent (\"这不只是一封邮件带图片 & lt;img src='cid:1.png'> 邮件\",\"text/html;charset=utf-8\");</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token comment\">//// 描述数据关系</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token comment\">//MimeMultipart mm = new MimeMultipart();</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token comment\">//mm.addBodyPart(text);</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token comment\">//mm.addBodyPart(image);</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token comment\">//mm.setSubType(\"related\");</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token comment\">//// 将这两个拼接的设置为主体</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token comment\">//MimeBodyPart contentText = new MimeBodyPart();</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token comment\">//contentText.setContent(mm);</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token comment\">//// 拼接附件</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            <span class=\"token comment\">//MimeMultipart allFile = new MimeMultipart();</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token comment\">//allFile.addBodyPart(bodyPart);</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            <span class=\"token comment\">//allFile.addBodyPart(contentText);</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token comment\">//mm.setSubType(\"mixed\");</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token class-name\">String</span> info<span class=\"token operator\">=</span><span class=\"token string\">\"恭喜您注册成功，您的用户名：\"</span><span class=\"token operator\">+</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\",您的密码：\"</span><span class=\"token operator\">+</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\",请妥善保管\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            message<span class=\"token punctuation\">.</span><span class=\"token function\">setContent</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">,</span><span class=\"token string\">\"text/html;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            message<span class=\"token punctuation\">.</span><span class=\"token function\">saveChanges</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>            <span class=\"token comment\">//5. 发送邮件</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>            ts<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">getAllRecipients</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token comment\">//6. 关闭连接</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            ts<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "邮件发送",
                "JavaWeb",
                "Email"
            ]
        },
        {
            "id": "http://example.com/%E5%9F%BA%E4%BA%8EJavaWeb%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/",
            "url": "http://example.com/%E5%9F%BA%E4%BA%8EJavaWeb%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/",
            "title": "基于JavaWeb的文件上传",
            "date_published": "2022-08-28T15:13:37.412Z",
            "content_html": "<h2 id=\"工具类\"><a class=\"markdownIt-Anchor\" href=\"#工具类\">#</a> 工具类</h2>\n<p><em>使用时 input 的 type 要设置为 file 类型</em></p>\n<blockquote>\n<ol>\n<li>创建 DiskFileItemFactory 对象，处理文件上传路径或者大小限制</li>\n</ol>\n</blockquote>\n<span id=\"more\"></span>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">DiskFileItemFactory</span> <span class=\"token function\">getDiskFileItemFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> tmpFile<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">DiskFileItemFactory</span> factory<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DiskFileItemFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 设置缓存区为 1m</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tfactory<span class=\"token punctuation\">.</span><span class=\"token function\">setSizeThreshold</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tfactory<span class=\"token punctuation\">.</span><span class=\"token function\">setRepository</span><span class=\"token punctuation\">(</span>tmpFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> factory<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<ol start=\"2\">\n<li>获取 ServletFileUpload</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">ServletFileUpload</span> <span class=\"token function\">getServletFileUpload</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DiskFileItemFactory</span> factory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">ServletFileUpload</span> upload<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ServletFileUpload</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 监听文件上传速度</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tupload<span class=\"token punctuation\">.</span><span class=\"token function\">setProgressListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ProgressListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> pBytesRead<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> pContentLength<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pItems<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"总大小：\"</span><span class=\"token operator\">+</span>pContentLength<span class=\"token operator\">+</span><span class=\"token string\">\"已上传：\"</span><span class=\"token operator\">+</span>pBytesRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 处理乱码问题</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tupload<span class=\"token punctuation\">.</span><span class=\"token function\">setHeaderEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 设置单个文件最大值</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tupload<span class=\"token punctuation\">.</span><span class=\"token function\">setFileSizeMax</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 设置总大小</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tupload<span class=\"token punctuation\">.</span><span class=\"token function\">setSizeMax</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">return</span>  upload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<ol start=\"3\">\n<li>处理上传的文件</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">uploadParseRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletFileUpload</span> upload<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> uploadPath<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">FileUploadException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">String</span> msg <span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 把前端请求解析</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FileItem</span><span class=\"token punctuation\">></span></span> fileItems <span class=\"token operator\">=</span> upload<span class=\"token punctuation\">.</span><span class=\"token function\">parseRequest</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileItem</span> fileItem <span class=\"token operator\">:</span> fileItems<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token comment\">// 判断上传的文件是普通文件还是带文件的</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fileItem<span class=\"token punctuation\">.</span><span class=\"token function\">isFormField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token class-name\">String</span> fieldName <span class=\"token operator\">=</span> fileItem<span class=\"token punctuation\">.</span><span class=\"token function\">getFieldName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> fileItem<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>fieldName<span class=\"token operator\">+</span><span class=\"token string\">\":\"</span><span class=\"token operator\">+</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token comment\">// 处理文件 ===================</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token comment\">// 拿到文件名字</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token class-name\">String</span> uploadFileName <span class=\"token operator\">=</span> fileItem<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"上传的文件名：\"</span> <span class=\"token operator\">+</span>uploadFileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>uploadFileName<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span>uploadFileName<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token comment\">// 获得上传的文件名</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token class-name\">String</span> fileName <span class=\"token operator\">=</span>uploadFileName<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>uploadFileName<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token comment\">// 获取后缀</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token class-name\">String</span> fileExtName<span class=\"token operator\">=</span>uploadFileName<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>uploadFileName<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件信息【件名：\"</span><span class=\"token operator\">+</span>fileName<span class=\"token operator\">+</span><span class=\"token string\">\"------文件类型\"</span><span class=\"token operator\">+</span>fileExtName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token comment\">// 如果后缀名不是想要的</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token comment\">// 使用 UUID 随机生成，网络传输都需要序列化</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token class-name\">String</span> uuidPath <span class=\"token operator\">=</span> <span class=\"token constant\">UUID</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token comment\">// 存放地址 =====================</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token class-name\">String</span> realPath<span class=\"token operator\">=</span>uploadPath<span class=\"token operator\">+</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">+</span>uuidPath<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token class-name\">File</span> realPathFile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>realPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>realPathFile<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    realPathFile<span class=\"token punctuation\">.</span><span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token comment\">//io 输入输出 ====================</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token class-name\">InputStream</span> inputStream <span class=\"token operator\">=</span> fileItem<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token class-name\">FileOutputStream</span> fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>realPath <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">=</span>inputStream<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    fos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                fos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                inputStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                msg<span class=\"token operator\">=</span><span class=\"token string\">\"文件上传成功\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                fileItem<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">return</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"合并\"><a class=\"markdownIt-Anchor\" href=\"#合并\">#</a> 合并</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> resp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token comment\">// 判断上传文件是普通表单还是文件类型</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">ServletFileUpload</span><span class=\"token punctuation\">.</span><span class=\"token function\">isMultipartContent</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token comment\">// 创建文件上传的真实路径，建议建在 web-inf 下，用户无法直接访问</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">String</span> uploadPath <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRealPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/WEB-INF/upload\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">File</span> uploadFile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>uploadPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>uploadFile<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                uploadFile<span class=\"token punctuation\">.</span><span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// 缓存，临时文件，假如文件超过了预期大小，把它放在一个临时文件中，过几天自动删除，或提醒用户转存</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">String</span> tmpPath <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRealPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/WEB-INF/tmp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token class-name\">File</span> tmpFile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>tmpPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>tmpFile<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                tmpFile<span class=\"token punctuation\">.</span><span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">//1. 创建 DiskFileItemFactory 对象，处理文件上传路径或者大小限制</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token class-name\">DiskFileItemFactory</span> factory<span class=\"token operator\">=</span><span class=\"token function\">getDiskFileItemFactory</span><span class=\"token punctuation\">(</span>tmpFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">//2. 获取 ServletFileUpload</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">ServletFileUpload</span> upload<span class=\"token operator\">=</span><span class=\"token function\">getServletFileUpload</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">//3. 处理上传的文件</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token class-name\">String</span> msg<span class=\"token operator\">=</span><span class=\"token function\">uploadParseRequest</span><span class=\"token punctuation\">(</span>upload<span class=\"token punctuation\">,</span>req<span class=\"token punctuation\">,</span>uploadPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">//servlet 请求转发</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            req<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">,</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            req<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestDispatcher</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"info.jsp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">IOException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">FileUploadException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Java"
            ]
        },
        {
            "id": "http://example.com/%E5%9F%BA%E4%BA%8EJavaWeb%E7%9A%84%E5%88%86%E9%A1%B5/",
            "url": "http://example.com/%E5%9F%BA%E4%BA%8EJavaWeb%E7%9A%84%E5%88%86%E9%A1%B5/",
            "title": "基于JavaWeb的分页",
            "date_published": "2022-08-28T15:13:37.408Z",
            "content_html": "<h2 id=\"limit实现分页\"><a class=\"markdownIt-Anchor\" href=\"#limit实现分页\">#</a> limit 实现分页</h2>\n<blockquote>\n<p>使用方式</p>\n</blockquote>\n<span id=\"more\"></span>\n<pre><code class=\"language-mysql\">#语法 \nSELECT * FROM table LIMIT stratIndex，pageSize \n\nSELECT * FROM table LIMIT 5,10; // 检索记录行 6-15 \n\n#为了检索从某一个偏移量到记录集的结束所有的记录行，可以指定第二个参数为 -1： \nSELECT * FROM table LIMIT 95,-1; // 检索记录行 96-last. \n\n#如果只给定一个参数，它表示返回最大的记录行数目： \nSELECT * FROM table LIMIT 5; //检索前 5 个记录行 \n\n#换句话说，LIMIT n 等价于 LIMIT 0,n。\n</code></pre>\n<blockquote>\n<ol>\n<li>修改 Mapper 文件</li>\n</ol>\n</blockquote>\n<pre><code class=\"language-xml-dtd\">&lt;select id=&quot;selectUser&quot; parameterType=&quot;map&quot; resultType=&quot;user&quot;&gt;\n\tselect * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125; \n&lt;/select&gt;\n</code></pre>\n<blockquote>\n<ol start=\"2\">\n<li>Mapper 接口，参数为 map</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 选择全部用户实现分页 List&lt;User> </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">selectUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<ol start=\"3\">\n<li>起始位置 = （当前页面 - 1 ） * 页面大小</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 分页查询，两个参数 startIndex , pageSize </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSelectUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">SqlSession</span> session <span class=\"token operator\">=</span> <span class=\"token class-name\">MybatisUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token class-name\">UserMapper</span> mapper <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> currentPage <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第几页 </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">int</span> pageSize <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 每页显示几个 Map</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"startIndex\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>currentPage<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>pageSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pageSize\"</span><span class=\"token punctuation\">,</span>pageSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectUser</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token operator\">:</span> users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"rowbounds分页\"><a class=\"markdownIt-Anchor\" href=\"#rowbounds分页\">#</a> RowBounds 分页</h2>\n<p>使用 RowBounds 在 Java 代码层面实现分页，当然此种方式作为了解即可</p>\n<blockquote>\n<ol>\n<li>修改 Mapper 文件</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 选择全部用户 RowBounds 实现分页 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getUserByRowBounds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<ol start=\"2\">\n<li>mapper 文件</li>\n</ol>\n</blockquote>\n<pre><code class=\"language-xml-dtd\">&lt;select id=&quot;getUserByRowBounds&quot; resultType=&quot;user&quot;&gt; \n\tselect * from user \n&lt;/select&gt;\n</code></pre>\n<blockquote>\n<ol start=\"3\">\n<li>需要使用 RowBounds 类</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testUserByRowBounds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">SqlSession</span> session <span class=\"token operator\">=</span> <span class=\"token class-name\">MybatisUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> currentPage <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第几页 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> pageSize <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 每页显示几个 </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token class-name\">RowBounds</span> rowBounds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RowBounds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>currentPage<span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>pageSize<span class=\"token punctuation\">,</span>pageSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 通过 session.** 方法进行传递 rowBounds，[此种方式现在已经不推荐使用了] </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.kuang.mapper.UserMapper.getUserByRowBounds\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> rowBounds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token operator\">:</span> users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tsession<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"pagehelper插件\"><a class=\"markdownIt-Anchor\" href=\"#pagehelper插件\">#</a> PageHelper 插件</h2>\n<p>官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYWdlaGVscGVyLmdpdGh1Yi5pby8=\">https://pagehelper.github.io/</span></p>\n",
            "tags": [
                "Java",
                "JavaWeb"
            ]
        },
        {
            "id": "http://example.com/VS-Code%E5%AE%89%E8%A3%85C++%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/",
            "url": "http://example.com/VS-Code%E5%AE%89%E8%A3%85C++%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/",
            "title": "VS-Code安装C++安装教程",
            "date_published": "2022-08-28T15:13:37.405Z",
            "content_html": "<h2 id=\"1下载安装vscode\"><a class=\"markdownIt-Anchor\" href=\"#1下载安装vscode\">#</a> 1. 下载安装 vscode</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20v\">https://code.visualstudio.com/</span></p>\n<span id=\"more\"></span>\n<h2 id=\"2安装编译调试环境\"><a class=\"markdownIt-Anchor\" href=\"#2安装编译调试环境\">#</a> 2. 安装编译，调试环境</h2>\n<ul>\n<li>使用 mingGW</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL21pbmd3Lm9yZy8=\">http://mingw.org/</span></li>\n<li>安装后配置环境变量，方便直接使用 gcc/g++ 等命令</li>\n</ul>\n<h2 id=\"3打开vscode\"><a class=\"markdownIt-Anchor\" href=\"#3打开vscode\">#</a> 3. 打开 VScode</h2>\n<ol>\n<li>\n<p>安装 c++ 插件</p>\n</li>\n<li>\n<p>创建工作环境文件夹</p>\n<ul>\n<li>创建.vscode 文件夹</li>\n<li>编写<strong> c_cpp_properties.json</strong>   <strong>launch.json</strong>   <strong>tasks.json</strong></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"4编辑c_cpp_properties\"><a class=\"markdownIt-Anchor\" href=\"#4编辑c_cpp_properties\">#</a> 4. 编辑 c_cpp_properties</h2>\n<p>将 &quot;includePath&quot; 与 &quot;path&quot; 替换为相对应的 mingw64 的路径</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">\"configurations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Win32\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token property\">\"includePath\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token string\">\"$&#123;workspaceRoot&#125;\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token string\">\"F:/MingGW/mingw64/include/**\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token string\">\"F:/MingGW/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     <span class=\"token string\">\"F:/MingGW/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/x86_64-w64-mingw32\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token string\">\"F:/MingGW/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/backward\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     <span class=\"token string\">\"F:/MingGW/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     <span class=\"token string\">\"F:/MingGW/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include-fixed\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     <span class=\"token string\">\"F:/MingGW/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/../../../../x86_64-w64-mingw32/include\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token property\">\"defines\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     <span class=\"token string\">\"_DEBUG\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     <span class=\"token string\">\"UNICODE\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     <span class=\"token string\">\"__GNUC__=6\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     <span class=\"token string\">\"__cdecl=__attribute__((__cdecl__))\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token property\">\"intelliSenseMode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"msvc-x64\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token property\">\"browse\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     <span class=\"token property\">\"limitSymbolsToIncludedHeaders\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     <span class=\"token property\">\"databaseFilename\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>       <span class=\"token string\">\"$&#123;workspaceRoot&#125;\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>       <span class=\"token string\">\"F:/MingGW/mingw64/include/**\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>       <span class=\"token string\">\"F:/MingGW/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>       <span class=\"token string\">\"F:/MingGW/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/x86_64-w64-mingw32\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>       <span class=\"token string\">\"F:/MingGW/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/backward\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>       <span class=\"token string\">\"F:/MingGW/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>       <span class=\"token string\">\"F:/MingGW/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include-fixed\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>       <span class=\"token string\">\"F:/MingGW/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/../../../../x86_64-w64-mingw32/include\"</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   <span class=\"token property\">\"compilerPath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"5编辑launchjson\"><a class=\"markdownIt-Anchor\" href=\"#5编辑launchjson\">#</a> 5. 编辑 launch.json</h2>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.2.0\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">\"configurations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"(gdb) Launch\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 配置名称，将会在启动配置的下拉菜单中显示  </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cppdbg\"</span><span class=\"token punctuation\">,</span>       <span class=\"token comment\">// 配置类型，这里只能为 cppdbg  </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token property\">\"request\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"launch\"</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 请求配置类型，可以为 launch（启动）或 attach（附加）  </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token property\">\"program\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"$&#123;workspaceFolder&#125;/exe/$&#123;fileBasenameNoExtension&#125;.exe\"</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 将要进行调试的程序的路径  </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token property\">\"args\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>             <span class=\"token comment\">// 程序调试时传递给程序的命令行参数，一般设为空即可  </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token property\">\"stopAtEntry\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 设为 true 时程序将暂停在程序入口处，一般设置为 false  </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token property\">\"cwd\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"$&#123;workspaceFolder&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 调试程序时的工作目录，一般为 $&#123;workspaceFolder&#125; 即代码所在目录  </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token property\">\"environment\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token property\">\"externalConsole\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 调试时是否显示控制台窗口，一般设置为 true 显示控制台  </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token property\">\"MIMode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gdb\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token property\">\"miDebuggerPath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"F:\\\\MingGW\\\\mingw64\\\\bin\\\\gdb.exe\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//miDebugger 的路径，注意这里要与 MinGw 的路径对应  </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token property\">\"preLaunchTask\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gcc\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 调试会话开始前执行的任务，一般为编译程序，c++ 为 g++, c 为 gcc  </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token property\">\"setupCommands\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>       <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Enable pretty-printing for gdb\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>       <span class=\"token property\">\"text\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"-enable-pretty-printing\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>       <span class=\"token property\">\"ignoreFailures\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token punctuation\">]</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">]</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"6编辑tasksjson\"><a class=\"markdownIt-Anchor\" href=\"#6编辑tasksjson\">#</a> 6. 编辑 tasks.json</h2>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2.0.0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">\"tasks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"shell\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gcc\"</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 修改此项</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token comment\">//\"command\": \"F:\\\\MingGW\\\\mingw64\\\\bin\\\\gcc.exe\",</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token property\">\"command\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gcc\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token property\">\"args\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token string\">\"-g\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     <span class=\"token string\">\"$&#123;file&#125;\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     <span class=\"token string\">\"-o\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     <span class=\"token string\">\"$&#123;workspaceFolder&#125;/exe/$&#123;fileBasenameNoExtension&#125;.exe\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token property\">\"options\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     <span class=\"token property\">\"cwd\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"F:\\\\MingGW\\\\mingw64\\\\bin\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token property\">\"problemMatcher\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     <span class=\"token string\">\"$gcc\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token property\">\"group\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"build\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>tasks 中的 label 与 launch.json 中的 preLaunchTask 相对应</strong></p>\n<h2 id=\"7运行第一个cc程序\"><a class=\"markdownIt-Anchor\" href=\"#7运行第一个cc程序\">#</a> 7. 运行第一个 c++/c 程序</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 防止 VScode 代码运行成功后自动关闭</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Vs-code",
                "C++"
            ]
        },
        {
            "id": "http://example.com/Spring%E4%BA%8B%E5%8A%A1%E5%B1%9E%E6%80%A7/",
            "url": "http://example.com/Spring%E4%BA%8B%E5%8A%A1%E5%B1%9E%E6%80%A7/",
            "title": "Spring中事务属性",
            "date_published": "2022-08-28T15:13:37.401Z",
            "content_html": "<h2 id=\"事务属性\"><a class=\"markdownIt-Anchor\" href=\"#事务属性\">#</a> 事务属性</h2>\n<blockquote>\n<p>种类：传播行为，隔离级别，只读，事务超时</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"传播行为\"><a class=\"markdownIt-Anchor\" href=\"#传播行为\">#</a> 传播行为</h2>\n<blockquote>\n<p><em>定义了被调用方法的事务边界</em></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>传播行为</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>PROPAGATION_MANDATORY</td>\n<td>一定要有事务，没有事务就抛出异常</td>\n</tr>\n<tr>\n<td>PROPAGATION_NESTED</td>\n<td>表示如果当前事务存在，则方法应该运行在一个嵌套事务中。</td>\n</tr>\n<tr>\n<td>PROPAGATION_NEVER</td>\n<td>表示方法不能运行在一个事务中，否则抛出异常</td>\n</tr>\n<tr>\n<td>PROPAGATION_NOT_SUPPORTED</td>\n<td>不支持事物，如果存在事物就挂起</td>\n</tr>\n<tr>\n<td>PROPAGATION_REQUIRED</td>\n<td>表示当前方法必须运行在一个事务中，如果当前存在一个事务，那么该方法运行在这个事务中，否则，将创建一个新的事务</td>\n</tr>\n<tr>\n<td>PROPAGATION_REQUIRES_NEW</td>\n<td>表示当前方法必须运行在自己的事务中，如果当前存在一个事务，那么这个事务将在该方法运行期间被挂起</td>\n</tr>\n<tr>\n<td>PROPAGATION_SUPPORTS</td>\n<td>表示当前方法不需要运行在一个是事务中，但如果有一个事务已经存在，该方法也可以运行在这个事务中</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"隔离级别\"><a class=\"markdownIt-Anchor\" href=\"#隔离级别\">#</a> 隔离级别</h2>\n<blockquote>\n<p>在操作数据时可能带来 3 个副作用：分别是脏读、不可重复读、幻读。</p>\n<p>SQL 语句中定义了 4 种隔离级别，分别是未提交读、已提交读、可重复读、可序列化。</p>\n<p>而在 spring 事务中提供了 5 种隔离级别来对应在 SQL 中定义的 4 种隔离级别，</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ISOLATION_DEFAULT</td>\n<td>使用后端数据库默认的隔离级别</td>\n</tr>\n<tr>\n<td>ISOLATION_READ_UNCOMMITTED</td>\n<td>允许读取未提交的数据（对应未提交读），可能导致脏读、不可重复读、幻读</td>\n</tr>\n<tr>\n<td>ISOLATION_READ_COMMITTED</td>\n<td>允许在一个事务中读取另一个已经提交的事务中的数据（对应已提交读）。可以避免脏读，但是无法避免不可重复读和幻读</td>\n</tr>\n<tr>\n<td>ISOLATION_REPEATABLE_READ</td>\n<td>一个事务不可能更新由另一个事务修改但尚未提交（回滚）的数据（对应可重复读）。可以避免脏读和不可重复读，但无法避免幻读</td>\n</tr>\n<tr>\n<td>ISOLATION_SERIALIZABLE</td>\n<td>这种隔离级别是所有的事务都在一个执行队列中，依次顺序执行，而不是并行（对应可序列化）。可以避免脏读、不可重复读、幻读。但是这种隔离级别效率很低，因此，除非必须，否则不建议使用。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"只读\"><a class=\"markdownIt-Anchor\" href=\"#只读\">#</a> 只读</h2>\n<p>如果在一个事务中所有关于数据库的操作都是只读的，也就是说，这些操作只读取数据库中的数据，而并不更新数据，那么应将事务设为只读模式（ READ_ONLY_MARKER ） , 这样更有利于数据库进行优化 。</p>\n<p>因为只读的优化措施是事务启动后由数据库实施的，因此，只有将那些具有可能启动新事务的传播行为 (PROPAGATION_NESTED 、 PROPAGATION_REQUIRED 、 PROPAGATION_REQUIRED_NEW) 的方法的事务标记成只读才有意义。</p>\n<p>如果使用 Hibernate 作为持久化机制，那么将事务标记为只读后，会将 Hibernate 的 flush 模式设置为 FULSH_NEVER, 以告诉 Hibernate 避免和数据库之间进行不必要的同步，并将所有更新延迟到事务结束。</p>\n<h2 id=\"事务延时\"><a class=\"markdownIt-Anchor\" href=\"#事务延时\">#</a> 事务延时</h2>\n<p>如果一个事务长时间运行，这时为了尽量避免浪费系统资源，应为这个事务设置一个有效时间，使其等待数秒后自动回滚。与设置 “只读” 属性一样，事务有效属性也需要给那些具有可能启动新事物的传播行为的方法的事务标记成只读才有意义。</p>\n",
            "tags": [
                "Spring"
            ]
        },
        {
            "id": "http://example.com/Resource%E8%B5%84%E6%BA%90%E6%89%BE%E4%B8%8D%E5%88%B0%E9%97%AE%E9%A2%98/",
            "url": "http://example.com/Resource%E8%B5%84%E6%BA%90%E6%89%BE%E4%B8%8D%E5%88%B0%E9%97%AE%E9%A2%98/",
            "title": "Resource资源找不到问题",
            "date_published": "2022-08-28T15:13:37.396Z",
            "content_html": "<blockquote>\n<p>在 maven 的 pom 中进行配置</p>\n</blockquote>\n<span id=\"more\"></span>\n<pre><code>&lt;build&gt;\n        &lt;resources&gt;\n            &lt;!--解决资源导出失败的问题--&gt;\n            &lt;resource&gt;\n                &lt;directory&gt;src/main/resources&lt;/directory&gt;\n                &lt;includes&gt;\n                    &lt;include&gt;**/*.properties&lt;/include&gt;\n                    &lt;include&gt;**/*.xml&lt;/include&gt;\n                &lt;/includes&gt;\n                &lt;filtering&gt;true&lt;/filtering&gt;\n            &lt;/resource&gt;\n            &lt;resource&gt;\n                &lt;directory&gt;src/main/java&lt;/directory&gt;\n                &lt;includes&gt;\n                    &lt;include&gt;**/*.properties&lt;/include&gt;\n                    &lt;include&gt;**/*.xml&lt;/include&gt;\n                &lt;/includes&gt;\n                &lt;filtering&gt;true&lt;/filtering&gt;\n            &lt;/resource&gt;\n        &lt;/resources&gt;\n    &lt;/build&gt;\n</code></pre>\n",
            "tags": [
                "Java",
                "JavaWeb",
                "Maven"
            ]
        },
        {
            "id": "http://example.com/MySQL%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE%EF%BC%88%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%89%88%E6%9C%AC%EF%BC%89/",
            "url": "http://example.com/MySQL%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE%EF%BC%88%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%89%88%E6%9C%AC%EF%BC%89/",
            "title": "MySQL的安装与配置（命令行版本）",
            "date_published": "2022-08-28T15:13:37.393Z",
            "content_html": "<h2 id=\"1官网下载\"><a class=\"markdownIt-Anchor\" href=\"#1官网下载\">#</a> 1. 官网下载</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2Rvd25sb2Fkcy9teXNxbC8=\">https://dev.mysql.com/downloads/mysql/</span></p>\n<span id=\"more\"></span>\n<p><img data-src=\"https://img-blog.csdnimg.cn/0040afa5479a4654ad27a4bb691422c3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNDU4ODA2NDg=,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"请添加图片描述\"></p>\n<h2 id=\"2解压\"><a class=\"markdownIt-Anchor\" href=\"#2解压\">#</a> 2. 解压</h2>\n<h2 id=\"3配置环境变量\"><a class=\"markdownIt-Anchor\" href=\"#3配置环境变量\">#</a> 3. 配置环境变量</h2>\n<p><img data-src=\"https://img-blog.csdnimg.cn/433c77fb17bd4e14b2ec6f098f02b09e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAemhk4oCm4oCm,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\" alt=\"在这里插入图片描述\"><br>\n<img data-src=\"https://img-blog.csdnimg.cn/5a8ce787428a4430b7e01bf96a98fbc7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAemhk4oCm4oCm,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\" alt=\"在这里插入图片描述\"><br>\n在 path 下添加 mysql 路径：<br>\nF:\\mysql-8.0.27-winx64\\bin</p>\n<h2 id=\"4编写myini\"><a class=\"markdownIt-Anchor\" href=\"#4编写myini\">#</a> 4. 编写 my.ini</h2>\n<pre><code>[mysqld]\n#设置3306端口\nport=3306\n#设置mysql的安装目录\nbasedir=F:\\mysql-8.0.27-winx64\n#设置mysql数据库的数据的存放目录\ndatadir=F:\\mysql-8.0.27-winx64\\Data\n#允许最大连接数\nmax_connections=200\n#允许连接失败的次数。\nmax_connect_errors=10\n#服务端使用的字符集默认为utf8mb4\ncharacter-set-server=utf8mb4\n#创建新表时将使用的默认存储引擎\ndefault-storage-engine=INNODB\n#默认使用“mysql_native_password”插件认证\n#mysql_native_password\ndefault_authentication_plugin=mysql_native_password\n[mysql]\n#设置mysql客户端默认字符集\ndefault-character-set=utf8mb4\n[client]\n#设置mysql客户端连接服务端时默认使用的端口\nport=3306\ndefault-character-set=utf8mb4\n\n</code></pre>\n<h2 id=\"5生成data文件\"><a class=\"markdownIt-Anchor\" href=\"#5生成data文件\">#</a> 5. 生成 data 文件</h2>\n<p>在安装的 MySQL 的 bin 下 管理员方式运行命令提示符</p>\n<pre><code>mysqld --initialize --console\n</code></pre>\n<p>执行过后找到 A temporary password is generated for root@localhost: 这句，localhost 后面就是自己的初始化密码</p>\n<h2 id=\"6安装mysql服务\"><a class=\"markdownIt-Anchor\" href=\"#6安装mysql服务\">#</a> 6. 安装 MySQL 服务</h2>\n<pre><code>mysqld -install\n</code></pre>\n<h2 id=\"7启动服务\"><a class=\"markdownIt-Anchor\" href=\"#7启动服务\">#</a> 7. 启动服务</h2>\n<pre><code>net start mysql\n</code></pre>\n<h2 id=\"8登录\"><a class=\"markdownIt-Anchor\" href=\"#8登录\">#</a> 8. 登录</h2>\n<pre><code>mysql -u root -p\n</code></pre>\n<p>提示需要密码，使用初始化密码</p>\n<h2 id=\"9修改密码\"><a class=\"markdownIt-Anchor\" href=\"#9修改密码\">#</a> 9. 修改密码</h2>\n<pre><code>ALTER USER 'username'@'localhost' identified with mysql_native_password by '123456';\n</code></pre>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://example.com/arithmetic/LeetCode-100-199/",
            "url": "http://example.com/arithmetic/LeetCode-100-199/",
            "title": "LeetCode-100-199",
            "date_published": "2022-08-28T15:13:37.371Z",
            "content_html": "<h2 id=\"108有序数组转二叉搜索树\"><a class=\"markdownIt-Anchor\" href=\"#108有序数组转二叉搜索树\">#</a> 108. 有序数组转二叉搜索树</h2>\n<blockquote>\n<p>将一个整数数组 <code>nums</code> ，其中元素按照升序排列，将其转化为一颗<strong>高度平衡</strong>二叉搜索树</p>\n</blockquote>\n<span id=\"more\"></span>\n<ul>\n<li>\n<p>方法一：</p>\n<pre><code class=\"language-java\"></code></pre>\n</li>\n<li>\n<p>方法二：</p>\n</li>\n</ul>\n<h2 id=\"118杨辉三角\"><a class=\"markdownIt-Anchor\" href=\"#118杨辉三角\">#</a> 118. 杨辉三角</h2>\n<blockquote>\n<p>给定一个非负整数 * <code>numRows</code> ，* 生成「杨辉三角」的前 <em> <code>numRows</code> </em> 行</p>\n</blockquote>\n<!--more-->\n<ul>\n<li>\n<p>方法一：从第三层开始，每层除去第一个与最后一个元素剩下的值根据上层对应下表来计算</p>\n</li>\n<li>\n<p>方法二：</p>\n</li>\n</ul>\n<h2 id=\"119杨辉三角ii\"><a class=\"markdownIt-Anchor\" href=\"#119杨辉三角ii\">#</a> 119. 杨辉三角 II</h2>\n<blockquote>\n<p>给定一个非负索引  <code>rowIndex</code> ，返回「杨辉三角」的第  <code>rowIndex</code>  行。</p>\n</blockquote>\n<p><em>在「杨辉三角」中，每个数是它左上方和右上方的数的和</em></p>\n<!--more -->\n<ul>\n<li>\n<p>方法一：暴力破解，求出前 n 行的杨辉三角存入二维列表，后直接取值</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getRow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rowIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> lists <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayLi</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> rowIndex<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span>i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>j<span class=\"token operator\">==</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">else</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>lists<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>g</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        lists<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> lists<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>rowIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>优化：对第  <code>i+1</code>  行的计算仅用到了第  <code>i</code>  行的数据，因此可以使用<strong>滚动数组</strong>的思想优化空间复杂度</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getRow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rowIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> pre <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> rowIndex<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> cur <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> i<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> j <span class=\"token operator\">==</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                cur<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                cur<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pre<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        pre <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>优化：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getRow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rowIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> row <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    row<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> rowIndex<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        row<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            row<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> row<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> row<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>方法二：线性递推</p>\n<p><img data-src=\"/images/image/LeetCode/119.png\" alt=\"119\"></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getRow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rowIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> row <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    row<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> rowIndex<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        row<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> row<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>rowIndex <span class=\"token operator\">-</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> row<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"121买卖股票的最佳时机\"><a class=\"markdownIt-Anchor\" href=\"#121买卖股票的最佳时机\">#</a> 121. 买卖股票的最佳时机</h2>\n<blockquote>\n<p>给定一个数组  <code>prices</code>  ，它的第  <code>i</code>  个元素  <code>prices[i]</code>  表示一支给定股票第  <code>i</code>  天的价格。</p>\n</blockquote>\n<p><em>只能选择 <strong>某一天</strong> 买入这只股票，并选择在 <strong>未来的某一个不同的日子</strong> 卖出</em></p>\n<!--more -->\n<ul>\n<li>\n<p>方法一：暴力破解，会超时</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxProfit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> prices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> maxprofit <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> prices<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> prices<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">int</span> profit <span class=\"token operator\">=</span> prices<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>profit <span class=\"token operator\">></span> maxprofit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                maxprofit <span class=\"token operator\">=</span> profit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> maxprofit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>方法二：</p>\n<ul>\n<li>记录【今天之前买入的最小值】</li>\n<li>计算【今天之前最小值买入，今天卖出的获利】，也即【今天卖出的最大获利】</li>\n<li>比较【每天的最大获利】，取最大值即可</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxProfit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> prices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>prices<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> min <span class=\"token operator\">=</span> prices<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> prices<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        max <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span> prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        min <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">,</span> prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"136只出现一次的数字\"><a class=\"markdownIt-Anchor\" href=\"#136只出现一次的数字\">#</a> 136. 只出现一次的数字</h2>\n<blockquote>\n<p>给定一个<strong>非空</strong>整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>\n</blockquote>\n<p><em>不使用额外空间</em></p>\n<!--more-->\n<ul>\n<li>\n<p>若不考虑时间，空间复杂度</p>\n<ul>\n<li>使用集合存储数字，遍历数组中的每个元素，若没有则加入，若存在，则从集合中删除</li>\n<li>使用哈希表存储每个数字和该数字出现的次数，遍历哈希表，得到只出现一次的数字</li>\n<li>使用集合存储数组中出现的数字，并计算数组的元素之和，集合中保证保证元素无重复，集合的元素之和 * 2 - 数组元素之和即为单个不重复元素</li>\n</ul>\n</li>\n<li>\n<p>方法二：采用异或的方式</p>\n<ul>\n<li>任何数和 0 异或运算，结果仍然是它本身</li>\n<li>任何数与自身做异或运算，结果仍然是零</li>\n<li>异或运算满足结合律交换律</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> single<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        single<span class=\"token operator\">^=</span>num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> single<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"169多数之和\"><a class=\"markdownIt-Anchor\" href=\"#169多数之和\">#</a> 169. 多数之和</h2>\n<blockquote>\n<p>给定一个大小为  <code>n</code>  的数组  <code>nums</code>  ，返回其中的多数元素。多数元素是指在数组中出现次数 <strong>大于</strong>  <code>⌊ n/2 ⌋</code>  的元素。</p>\n</blockquote>\n<!--more-->\n<ul>\n<li></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">majorityElement</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\ts <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> value</pre></td></tr></table></figure>",
            "tags": [
                "算法",
                "LeetCode",
                "LeetCode"
            ]
        },
        {
            "id": "http://example.com/arithmetic/LeetCode-1-99/",
            "url": "http://example.com/arithmetic/LeetCode-1-99/",
            "title": "LeetCode-1-99",
            "date_published": "2022-08-28T15:13:37.347Z",
            "content_html": "<h2 id=\"9回文数\"><a class=\"markdownIt-Anchor\" href=\"#9回文数\">#</a> 9. 回文数</h2>\n<blockquote>\n<p>给你一个整数  <code>x</code>  ，如果  <code>x</code>  是一个回文整数，返回  <code>true</code>  ；否则，返回  <code>false</code>  。</p>\n</blockquote>\n<p><em>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</em></p>\n<span id=\"more\"></span>\n<ul>\n<li>方法一：将整数转变为字符串，采用字符串下标逆向遍历，判断两个字符串是否相等</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#实现方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Class <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">:</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        y<span class=\"token operator\">=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>y</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>answer<span class=\"token operator\">=</span>Solution<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">.</span>isPalindrome<span class=\"token punctuation\">(</span><span class=\"token number\">478</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>方法二：依次判断整数的首位与尾位</li>\n</ul>\n<pre><code class=\"language-python\"></code></pre>\n<h2 id=\"21合并两个有序列表\"><a class=\"markdownIt-Anchor\" href=\"#21合并两个有序列表\">#</a> 21. 合并两个有序列表</h2>\n<blockquote>\n<p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p>\n</blockquote>\n<ul>\n<li>方法一：\n<ul>\n<li>创建一个新的链表， <code>p</code>  指向该链表</li>\n<li>当两个链表不为空时，比较，小的则 <code>p.next</code>  指向该结点，并后移</li>\n<li>若其中一个为空，则直接将剩余节点追加进去</li>\n</ul>\n</li>\n<li>方法二：递归\n<ul>\n<li>对两个链表的头节点进行比较，然后递归的判断剩余结点，并返回该节点</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"23合并k个升序链表\"><a class=\"markdownIt-Anchor\" href=\"#23合并k个升序链表\">#</a> 23. 合并 k 个升序链表</h2>\n<blockquote>\n<p>一个链表数组，每个链表都已经按升序排列。</p>\n</blockquote>\n<p><em>将所有链表合并到一个升序链表中，返回合并后的链表</em></p>\n<ul>\n<li>方法一：</li>\n</ul>\n<h2 id=\"26删除排序数组中的重复项\"><a class=\"markdownIt-Anchor\" href=\"#26删除排序数组中的重复项\">#</a> 26. 删除排序数组中的重复项</h2>\n<blockquote>\n<p>给你一个 <strong>升序排列</strong> 的数组  <code>nums</code>  ，请你 **<span class=\"exturl\" data-url=\"aHR0cDovL2JhaWtlLmJhaWR1LmNvbS9pdGVtLyVFNSU4RSU5RiVFNSU5QyVCMCVFNyVBRSU5NyVFNiVCMyU5NQ==\"> 原地</span> ** 删除重复出现的元素，使每个元素 <strong>只出现一次</strong> ，返回删除后数组的新长度。元素的 <strong>相对顺序</strong> 应该保持 <strong>一致</strong> 。</p>\n</blockquote>\n<p><em>不要使用额外的空间，你必须在 <strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOEUlOUYlRTUlOUMlQjAlRTclQUUlOTclRTYlQjMlOTU=\">原地 </span>修改输入数组</strong> 并在使用 O (1) 额外空间的条件下完成。</em></p>\n<!--more-->\n<ul>\n<li>\n<p>方法一：暴力破解</p>\n<ul>\n<li>使用额外空间，将未重复的元素添加到新数组中</li>\n<li>时间复杂度：O (n) <em>扫描所有元素</em></li>\n<li>空间复杂度：O (n) <em>使用新的数组</em></li>\n</ul>\n</li>\n<li>\n<p>方法二：双指针</p>\n<ul>\n<li>\n<p>采用快指针与慢指针，快指针用来扫描，慢指针用来指向答案</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">removeDuplicates</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 判断是否有元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"27移除元素\"><a class=\"markdownIt-Anchor\" href=\"#27移除元素\">#</a> 27. 移除元素</h2>\n<blockquote>\n<p>给你一个数组  <code>nums</code>  和一个值  <code>val</code> ，你需要 原地 移除所有数值等于  <code>val</code>  的元素，并返回移除后数组的新长度。</p>\n</blockquote>\n<p><em>不要使用额外的数组空间，你必须仅使用 O (1) 额外空间并 原地 修改输入数组。元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</em></p>\n<!--more-->\n<ul>\n<li>\n<p>方法一：暴力破解</p>\n<ul>\n<li>\n<p>两层 for 循环，一个 for 循环遍历数组元素 ，第二个 for 循环更新数组</p>\n</li>\n<li>\n<p>时间复杂度是 O (n^2)</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">removeElement02</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 发现需要移除的元素，就将数组集体向前移动一位</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\tnums<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\ti<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 因为下表 i 以后的数值都向前移动了一位，所以 i 也向前移动一位</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\tsize<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 此时数组的大小 - 1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>方法二：双指针法</p>\n<ul>\n<li>时间复杂度：O (n)</li>\n<li>空间复杂度：O (1)</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">removeElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"35搜索插入位置\"><a class=\"markdownIt-Anchor\" href=\"#35搜索插入位置\">#</a> 35. 搜索插入位置</h2>\n<blockquote>\n<p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>\n</blockquote>\n<p><em>请必须使用时间复杂度为 O (log n) 的算法。</em></p>\n<!--more-->\n<ul>\n<li>\n<p>方法一：</p>\n<ul>\n<li>\n<p>xxxxxxxxxx5 1def majorityElement(self, nums: List[int]) -&gt; int:2    s = set(nums)3    for value in s:4        if nums.count(value) &gt; len(nums) // 2:5            return valuepython</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">searchInsert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>方法二：二分查找</p>\n<ul>\n<li>\n<p>不断用二分法逼近查找第一个大于等于 <code>target</code>  的下标</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">searchInsert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> ans <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token comment\">//(right - left) >> 1  二进制右移一位相当于除以 2，</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token comment\">// 因为 left+right 可能会超出基本数据类型的范围，采用位运算，并且位运算比 / 更快</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">&lt;=</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            ans <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            right <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            left <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"66加一\"><a class=\"markdownIt-Anchor\" href=\"#66加一\">#</a> 66. 加一</h2>\n<blockquote>\n<p>给定一个由 <strong>整数</strong> 组成的 <strong>非空</strong> 数组所表示的非负整数，在该数的基础上加一</p>\n</blockquote>\n<p><em>假设除了整数 0 之外，这个整数不会以零开头</em></p>\n<!-- more -->\n<ul>\n<li>\n<p>方法一：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">plusOne</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> digits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> digits<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>flag <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> num<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            digits<span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">-</span> num<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ints <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>len <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                ints<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ints<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> digits<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">return</span> ints<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            digits<span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> num<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> digits<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>方法二：</p>\n<ul>\n<li>\n<p>如果首位是 9，其余位也是 9。即 [9,9,9,9] 则需要设置新数组，首位为 1，其余位为 0 即可</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">plusOne</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> digits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> digits<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 从末尾检查元素 + 1 后，取余是否为 0，是则判断前一位，否则输出结果</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        digits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">return</span> digits<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    digits <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>len <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    digits<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> digits<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"86分割链表\"><a class=\"markdownIt-Anchor\" href=\"#86分割链表\">#</a> 86. 分割链表</h2>\n<blockquote>\n<p>给你一个链表的头节点 <code> head</code>  和一个特定值  <code>x</code>  ，请你对链表进行分隔，使得所有 小于 x 的节点都出现在 大于或等于 x 的节点之前。 保留 两个分区中每个节点的初始相对位置。</p>\n</blockquote>\n<ul>\n<li>方法一：虚拟节点\n<ul>\n<li>创建两个虚拟的头指针，小于 x 则指向其中一个链表，反之指向另一个</li>\n<li>合并两个链表</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"88合并两个有序数组\"><a class=\"markdownIt-Anchor\" href=\"#88合并两个有序数组\">#</a> 88. 合并两个有序数组</h2>\n<blockquote>\n<p>给你两个按 非递减顺序 排列的整数数组  <code>nums1</code>  和  <code>nums2</code> ，另有两个整数  <code>m</code>  和  <code>n</code>  ，分别表示  <code>nums1</code>  和  <code>nums2</code>  中的元素数目。</p>\n<p>合并  <code>nums2</code>  到  <code>nums1</code>  中，使合并后的数组同样按 <strong>非递减顺序</strong> 排列。</p>\n</blockquote>\n<p><em>合并后数组不应由函数返回，而是存储在数组  <code>nums1</code>  中。为了应对这种情况， <code>nums1</code>  的初始长度为  <code>m + n</code> ，其中前 m 个元素表示应合并的元素，后 n 个元素为 0 ，应忽略。 <code>nums2</code>  的长度为  <code>n</code> </em></p>\n<!--more-->\n<ul>\n<li>\n<p>方法一：先将 <code>nums2</code>  插入 <code>nums1</code>  后，直接调用 Array.sort () 从小到大冒泡排序</p>\n<ul>\n<li>\n<p>时间复杂度 ：O ((m+n)\\log (m+n))<br>\n 排序序列长度为 m+n，套用快速排序的时间复杂度即可，平均情况为 O ((m+n)\\log (m+n))<em>O</em>((<em>m</em>+<em>n</em>)log(<em>m</em>+<em>n</em>))</p>\n</li>\n<li>\n<p>空间复杂度 <em>O</em>(log(<em>m</em>+<em>n</em>))</p>\n<p>排序序列长度为 m+n，套用快速排序的空间复杂度即可，平均情况为 O (\\log (m+n))<em>O</em>(log(<em>m</em>+<em>n</em>))</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> m<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums1<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        nums1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//for (int i = 0; i &lt; nums1.length; i++) &#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">//    for (int j = i+1; j &lt; nums1.length; j++) &#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">//        if (nums1[i]>nums1[j])&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">//            int tmp=nums1[j];</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">//            nums1[j]=nums1[i];</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">//            nums1[i]=tmp;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">//        &#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">//    &#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">//&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>方法二：双指针</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> p1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> p2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> sorted <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>m <span class=\"token operator\">+</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">&lt;</span> m <span class=\"token operator\">||</span> p2 <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">==</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            cur <span class=\"token operator\">=</span> nums2<span class=\"token punctuation\">[</span>p2<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p2 <span class=\"token operator\">==</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            cur <span class=\"token operator\">=</span> nums1<span class=\"token punctuation\">[</span>p1<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums2<span class=\"token punctuation\">[</span>p2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            cur <span class=\"token operator\">=</span> nums1<span class=\"token punctuation\">[</span>p1<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            cur <span class=\"token operator\">=</span> nums2<span class=\"token punctuation\">[</span>p2<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        sorted<span class=\"token punctuation\">[</span>p1 <span class=\"token operator\">+</span> p2 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> m <span class=\"token operator\">+</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        nums1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sorted<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>时间复杂度：O (m+n)</li>\n<li>空间复杂度：O (m+n)</li>\n</ul>\n</li>\n<li>\n<p>方法三：逆向双指针</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> p1 <span class=\"token operator\">=</span> m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> p2 <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> tail <span class=\"token operator\">=</span> m <span class=\"token operator\">+</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> p2 <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            cur <span class=\"token operator\">=</span> nums2<span class=\"token punctuation\">[</span>p2<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p2 <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            cur <span class=\"token operator\">=</span> nums1<span class=\"token punctuation\">[</span>p1<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> nums2<span class=\"token punctuation\">[</span>p2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            cur <span class=\"token operator\">=</span> nums1<span class=\"token punctuation\">[</span>p1<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            cur <span class=\"token operator\">=</span> nums2<span class=\"token punctuation\">[</span>p2<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        nums1<span class=\"token punctuation\">[</span>tail<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n",
            "tags": [
                "算法",
                "LeetCode",
                "LeetCode"
            ]
        },
        {
            "id": "http://example.com/Hexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/",
            "url": "http://example.com/Hexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/",
            "title": "Hexo静态博客",
            "date_published": "2022-08-28T15:13:37.345Z",
            "content_html": "<h2 id=\"使用介绍\"><a class=\"markdownIt-Anchor\" href=\"#使用介绍\">#</a> 使用介绍</h2>\n<p>个人博客框架 hexo, 托管于 GitHub，博客网站使用 Github 自带的 Page<s> 或者 netlify 生成，国内访问采用 cloudflare 进行 CDN 加速</s></p>\n<span id=\"more\"></span>\n<h2 id=\"hexo框架\"><a class=\"markdownIt-Anchor\" href=\"#hexo框架\">#</a> hexo 框架</h2>\n<p><em>介绍：基于 nodejs 的静态博客网站生成器，支持 <code>markdown</code>  语法，能够快速生成静态 html</em></p>\n<blockquote>\n<p>安装 Git</p>\n</blockquote>\n<ul>\n<li>详解：</li>\n<li><strong>后序所有命令可以使用 Git Bash 完成</strong></li>\n</ul>\n<blockquote>\n<p>安装 Node.js</p>\n</blockquote>\n<ul>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==\">https://nodejs.org/en/</span> ，<strong>默认安装稳定版</strong></p>\n</li>\n<li>\n<p>修改安装路径</p>\n</li>\n<li>\n<p>默认添加 Path 环境变量，若无则自行添加～～F:\\environment\\NodeJs~~</p>\n</li>\n<li>\n<p>检测安装是否完成</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cmd打开命令行，使用命令查看是否安装完成</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>node <span class=\"token operator\">-</span>v\t\t<span class=\"token comment\">#查看 node 版本信息</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>npm <span class=\"token operator\">-</span>v\t\t<span class=\"token comment\">#查看 npm 版本信息</span></pre></td></tr></table></figure></li>\n<li>\n<p>可以更换镜像下载源</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#打开 cmd 使用命令</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#查看原来的源</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>npm config get registry</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>https<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>registry<span class=\"token punctuation\">.</span>npmjs<span class=\"token punctuation\">.</span>org<span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#修改为淘宝源</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>npm config <span class=\"token builtin\">set</span> registry https<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>registry<span class=\"token punctuation\">.</span>npm<span class=\"token punctuation\">.</span>taobao<span class=\"token punctuation\">.</span>org</pre></td></tr></table></figure></li>\n<li>\n<p>出现问题</p>\n<ul>\n<li>更新 npm</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm update <span class=\"token operator\">-</span>g</pre></td></tr></table></figure><ul>\n<li>没有修改权限</li>\n</ul>\n<pre><code>#问题\nnpm WARN config global `--global`, `--local` are deprecated. Use `--location\n\n#解决办法\n打开nodejs文件夹。并打开两个文件 npm.cmd 和 npm\n找到那2个文件里面的prefix -g替换为prefix --location=global\n(如果提示，要更新到相对应的版本)\n</code></pre>\n<ul>\n<li>node 目录权限不够</li>\n</ul>\n<pre><code>#问题\nC:\\Users\\admin&gt;npm -v\nnpm WARN logfile could not create logs-dir: Error: EPERM: operation not permitted, mkdir 'C:\\Program Files\\nodejs\\node_cache\\_logs'\nnpm WARN logfile could not be created: Error: ENOENT: no such file or directory, open 'C:\\Program Files\\nodejs\\node_cache\\_logs\\2022-07-07T01_23_05_078Z-debug-0.log'\nnpm WARN logfile could not create logs-dir: Error: EPERM: operation not permitted, mkdir 'C:\\Program Files\\nodejs\\node_cache\\_logs'\nnpm WARN logfile could not be created: Error: ENOENT: no such file or directory, open 'C:\\Program Files\\nodejs\\node_cache\\_logs\\2022-07-07T01_23_05_505Z-debug-0.log'\n\n#结局办法\n对安装的Node.js文件夹进行权限的修改，全部勾选为√\n</code></pre>\n<p><img data-src=\"/images/image/Hexo/Hexo-01.png\" alt=\"Hexo-01\"></p>\n<p><img data-src=\"/images/image/Hexo/Hexo-02.png\" alt=\"Hexo-02\"></p>\n</li>\n</ul>\n<blockquote>\n<p>npm 配置</p>\n</blockquote>\n<ul>\n<li>简介：npm 是 JavaScript 运行时环境 Node.js 的默认包管理器，用于管理依赖包的下载与卸载</li>\n<li>检查 npm 的路径</li>\n</ul>\n<pre><code>#使用命令查看位置(默认在c盘)\nnpm config get prefix\nnpm config get cache\n\n#建议修改到其他盘\n在Node.js文件下创建node_cache文件夹\n使用命令：\nnpm config set prefix &quot;F:\\environment\\NodeJs&quot;\nnpm config set cache &quot;F:\\environment\\NodeJs\\node_cache&quot;\n</code></pre>\n<p><img data-src=\"/images/image/Hexo/Hexo-03.png\" alt=\"Hexo-03\"></p>\n<h2 id=\"注意万分重要\"><a class=\"markdownIt-Anchor\" href=\"#注意万分重要\">#</a> <em>注意 (万分重要！！！)</em></h2>\n<p>在对后序所有地方修改时都需要注意：空格</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#所有地方的空格不可省略，包括 md 上传的文件中配置信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>eg<span class=\"token punctuation\">:</span>\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">type</span><span class=\"token punctuation\">:</span> git</pre></td></tr></table></figure><blockquote>\n<p>安装 hexo</p>\n</blockquote>\n<pre><code>npm install hexo -g #-g表示全局安装, npm默认为当前项目安装\n</code></pre>\n<blockquote>\n<p>hexo 基本命令</p>\n</blockquote>\n<pre><code>npm update hexo -g  #升级 \nhexo init &lt;folder&gt;  #执行init命令初始化hexo到你指定的目录\nhexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章\nhexo generate       #自动根据当前目录下文件,生成静态网页 hexo g\nhexo server         #运行本地服务 hexo s\nhexo clean          #清理\nhexo deploy         #部署 hexo d\n\nhexo server         #Hexo会监视文件变动并自动更新，无须重启服务器\nhexo server -s      #静态模式\nhexo server -p 5000 #更改端口\nhexo server -i 192.168.1.1 #自定义 IP\n</code></pre>\n<h2 id=\"初始化\"><a class=\"markdownIt-Anchor\" href=\"#初始化\">#</a> 初始化</h2>\n<blockquote>\n<p>方式一：</p>\n</blockquote>\n<ul>\n<li>选择合适的位置创建博客所在位置 ，假设创建的文件夹为：blog</li>\n<li><strong>进入该文件夹</strong></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#先初始化，此时文件夹内必须为空</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo init</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#若初始化成功则显示</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>INFO Cloning hexo<span class=\"token operator\">-</span>starter <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>INFO Start blogging <span class=\"token keyword\">with</span> Hexo!</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#此步骤：若初始化后没有 node_modules, 则需要添加依赖</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>npm install  <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>g<span class=\"token punctuation\">)</span>  \t<span class=\"token operator\">//</span>添加依赖</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#初始化 git</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>git init</pre></td></tr></table></figure><blockquote>\n<p>方式二：</p>\n</blockquote>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#先初始化，此时文件夹内必须为空</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo init <span class=\"token string\">\"你的博客目录名称\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#若初始化成功则显示</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>INFO Cloning hexo<span class=\"token operator\">-</span>starter <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>INFO Start blogging <span class=\"token keyword\">with</span> Hexo!</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#进入博客目录</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>cd <span class=\"token string\">\"博客目录\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#安装依赖</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>npm install</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#初始化 git</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>git init</pre></td></tr></table></figure><blockquote>\n<p>执行命令后生成的文件</p>\n</blockquote>\n<ul>\n<li>_config.yml\n<ul>\n<li>全局配置文件，例如网站的名称，副标题，描述，作者，语言，主题等</li>\n</ul>\n</li>\n<li>scaffolds\n<ul>\n<li>骨架文件，生成新页面或者新博客的模板，当 <code>hexo</code>  生成新博客时，会在这里初始化</li>\n</ul>\n</li>\n<li>source\n<ul>\n<li>存放 <code>markdown</code>  源文件，，里面的 <code>_post</code>  文件夹也就是笔记存放的位置</li>\n</ul>\n</li>\n<li>themes\n<ul>\n<li>网站主题目录，可以在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3RoZW1lcy8lRTQlQjglOEIlRTYlODklQkUlRTUlODglQjAlRTclOUIlQjglRTUlODUlQjMlRTQlQjglQkIlRTklQTIlOTg=\">https://hexo.io/themes/ 下找到相关主题</span></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>生成文章</p>\n</blockquote>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo new post <span class=\"token string\">\"test\"</span> <span class=\"token comment\">#测试用，会在 source/_post/ 下生成 test.md 文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#生成静态 Html 文件在 /public</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>hexo generate</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#本地运行 server 服务</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>hexo server</pre></td></tr></table></figure><h2 id=\"博客配置\"><a class=\"markdownIt-Anchor\" href=\"#博客配置\">#</a> 博客配置</h2>\n<ul>\n<li>\n<p>_config.yml 配置</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Site</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>title<span class=\"token punctuation\">:</span> Alex\t\t\t<span class=\"token comment\">#网站标题</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>subtitle<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span>\t\t<span class=\"token comment\">#网站副标题</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>description<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span>\t\t<span class=\"token comment\">#网站描述</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>keywords<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>author<span class=\"token punctuation\">:</span> 赵浩栋\t\t\t<span class=\"token comment\">#作者\t</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>language<span class=\"token punctuation\">:</span> en\t\t  <span class=\"token comment\">#语言</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>timezone<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span>\t\t  <span class=\"token comment\">#网站时区，默认使用电脑自带时区</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># URL</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>url<span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>example<span class=\"token punctuation\">.</span>com\t\t<span class=\"token comment\">#站点 Url</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>permalink<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">:</span>year<span class=\"token operator\">/</span><span class=\"token punctuation\">:</span>month<span class=\"token operator\">/</span><span class=\"token punctuation\">:</span>day<span class=\"token operator\">/</span><span class=\"token punctuation\">:</span>title<span class=\"token operator\">/</span>\t<span class=\"token comment\">#文章的 永久链接格式</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>permalink_defaults<span class=\"token punctuation\">:</span>\t\t\t\t\t\t<span class=\"token comment\">#永久链接中的默认值</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>pretty_urls<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  trailing_index<span class=\"token punctuation\">:</span> true <span class=\"token comment\"># Set to false to remove trailing 'index.html' from permalinks</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  trailing_html<span class=\"token punctuation\">:</span> true <span class=\"token comment\"># Set to false to remove trailing '.html' from permalinks</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># Directory</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>source_dir<span class=\"token punctuation\">:</span> source\t\t\t\t\t\t<span class=\"token comment\">#资源文件夹，用来存放 `.md` 源文件</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>public_dir<span class=\"token punctuation\">:</span> public\t\t\t\t\t\t<span class=\"token comment\">#公共文件夹，用于存放生成的站点文件</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>tag_dir<span class=\"token punctuation\">:</span> tags\t\t\t\t\t\t\t<span class=\"token comment\">#标签文件夹</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>archive_dir<span class=\"token punctuation\">:</span> archives\t\t\t\t\t<span class=\"token comment\">#归档文件夹</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>category_dir<span class=\"token punctuation\">:</span> categories\t\t\t\t<span class=\"token comment\">#分类文件夹</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>code_dir<span class=\"token punctuation\">:</span> downloads<span class=\"token operator\">/</span>code</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>i18n_dir<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">:</span>lang\t\t\t\t\t\t\t<span class=\"token comment\">#国际化文件夹</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>skip_render<span class=\"token punctuation\">:</span> README<span class=\"token punctuation\">.</span>md\t\t\t\t\t<span class=\"token comment\">#用来指定跳过渲染的文件，</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\"># Writing</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>new_post_name<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">:</span>title<span class=\"token punctuation\">.</span>md \t\t\t\t<span class=\"token comment\">#新文件的文件名称，与 md 中的 title 编辑对应</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>default_layout<span class=\"token punctuation\">:</span> post\t\t\t\t\t<span class=\"token comment\">#预设布局</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>titlecase<span class=\"token punctuation\">:</span> false \t\t\t\t\t\t<span class=\"token comment\"># Transform title into titlecase</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>external_link<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  enable<span class=\"token punctuation\">:</span> true <span class=\"token comment\"># Open external links in new tab</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  field<span class=\"token punctuation\">:</span> site <span class=\"token comment\"># Apply to the whole site</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  exclude<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>filename_case<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\t\t\t\t\t\t<span class=\"token comment\">#把文件名转化为 1 小写，2 大写</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>render_drafts<span class=\"token punctuation\">:</span> false\t\t\t\t\t<span class=\"token comment\">#是否显示草稿</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>post_asset_folder<span class=\"token punctuation\">:</span> false\t\t\t\t<span class=\"token comment\">#是否启动 Asset 文件夹</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>relative_link<span class=\"token punctuation\">:</span> false\t\t\t\t\t<span class=\"token comment\">#把链接改为与根目录的相对位置</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>future<span class=\"token punctuation\">:</span> true\t\t\t\t\t\t\t<span class=\"token comment\">#显示未来的文章</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>highlight<span class=\"token punctuation\">:</span>\t\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  enable<span class=\"token punctuation\">:</span> true\t\t\t\t\t\t\t<span class=\"token comment\">#代码块中的高亮限制</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  line_number<span class=\"token punctuation\">:</span> true\t\t\t\t\t\t<span class=\"token comment\">#显示行数</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  auto_detect<span class=\"token punctuation\">:</span> false\t\t\t\t\t<span class=\"token comment\">#如果未指定语言，则启动自动检测</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  tab_replace<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span>\t\t\t\t\t\t<span class=\"token comment\">#用 n 个空格替换 tabs，如果值为空，则不会替换</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  wrap<span class=\"token punctuation\">:</span> true</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  hljs<span class=\"token punctuation\">:</span> false</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>prismjs<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  enable<span class=\"token punctuation\">:</span> false</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  preprocess<span class=\"token punctuation\">:</span> true</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  line_number<span class=\"token punctuation\">:</span> true</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  tab_replace<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\"># Home page setting</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\"># path: Root path for your blogs index page. (default = '')</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\"># per_page: Posts displayed per page. (0 = disable pagination)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\"># order_by: Posts order. (Order by date descending by default)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>index_generator<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  path<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  per_page<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  order_by<span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span>date</pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\"># Category &amp; Tag</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>default_category<span class=\"token punctuation\">:</span> uncategorized</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>category_map<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>tag_map<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\"># Metadata elements</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token comment\">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>meta_generator<span class=\"token punctuation\">:</span> true</pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>date_format<span class=\"token punctuation\">:</span> YYYY<span class=\"token operator\">-</span>MM<span class=\"token operator\">-</span>DD</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>time_format<span class=\"token punctuation\">:</span> HH<span class=\"token punctuation\">:</span>mm<span class=\"token punctuation\">:</span>ss</pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token comment\">## updated_option supports 'mtime', 'date', 'empty'</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>updated_option<span class=\"token punctuation\">:</span> <span class=\"token string\">'mtime'</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token comment\">#分页数量，分页目录</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>per_page<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>pagination_dir<span class=\"token punctuation\">:</span> page</pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token comment\"># Include / Exclude file(s)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token comment\">## include:/exclude: options only apply to the 'source/' folder</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>include<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>exclude<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>ignore<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token comment\">#主题名称</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>theme<span class=\"token punctuation\">:</span> Alex</pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token comment\"># Deployment</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token comment\">## Docs: https://hexo.io/docs/one-command-deployment</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>deploy<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>  <span class=\"token builtin\">type</span><span class=\"token punctuation\">:</span> git</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  repository<span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>gitee<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>AlexMelt<span class=\"token operator\">/</span>alexmelt<span class=\"token punctuation\">.</span>git</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>  branch<span class=\"token punctuation\">:</span> master</pre></td></tr></table></figure></li>\n<li>\n<p>在 https://hexo.io/themes/ 中选择合适的主题，然后下载到本地，将其解压到 blog/themes 下，根据相关主题的 README.md 设置文件夹名称:    eg：解压后，有一个文件夹是 <code>layout</code>   F:\\Projects\\Blog\\themes\\shoka\\shoka\\layout.yml，要修改为 F:\\Projects\\Blog\\themes\\layout.yml</p>\n</li>\n<li>\n<p>对 blog/_config.yml 进行更改，并且 theme 的值设置为解压的文件夹名，</p>\n</li>\n<li>\n<p>同时仓库设置为 gitee/github 的仓库中的 https 链接，例如</p>\n<ul>\n<li><img data-src=\"/images/image/Hexo/Hexo-04.png\" alt=\"Hexo-04\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"推送至github\"><a class=\"markdownIt-Anchor\" href=\"#推送至github\">#</a> 推送至 GitHub</h2>\n<blockquote>\n<p>前提是 GitHub 或者 gitee 配置了与本地的 SSH 公钥</p>\n</blockquote>\n<blockquote>\n<p>GitHub 仓库设置</p>\n</blockquote>\n<ul>\n<li>创建一个新仓库，命名为 ***.github.io (方便使用自带的（gitpage）</li>\n<li>获取该仓库的仓库地址</li>\n</ul>\n<blockquote>\n<p>上传至 github：</p>\n</blockquote>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#首次上传，需要 git 部署插件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>npm install hexo<span class=\"token operator\">-</span>deployer<span class=\"token operator\">-</span>git <span class=\"token operator\">-</span><span class=\"token operator\">-</span>save</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#依次执行：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>hexo clean</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>hexo g</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>hexo d</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#若执行 hexo g 出错则执行</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>npm install hexo <span class=\"token operator\">-</span><span class=\"token operator\">-</span>save</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#若执行 hexo d 出错则执行</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>npm install hexo<span class=\"token operator\">-</span>deployer<span class=\"token operator\">-</span>git <span class=\"token operator\">-</span><span class=\"token operator\">-</span>save</pre></td></tr></table></figure><blockquote>\n<p>或者使用 Git, 上传</p>\n</blockquote>\n<pre><code class=\"language-unix\">git init\ngit add.\ngit commit -m &quot;my blog first&quot;\ngit remote add origin &quot;远程github的仓库地址&quot;\ngit branche -M main\ngit push -u origin main\n</code></pre>\n<h2 id=\"后面操作可用可不用\"><a class=\"markdownIt-Anchor\" href=\"#后面操作可用可不用\">#</a> 后面操作，可用，可不用</h2>\n<h2 id=\"netlify建站\"><a class=\"markdownIt-Anchor\" href=\"#netlify建站\">#</a> Netlify 建站</h2>\n<p><em>免费的提供静态网站部署的平台</em></p>\n",
            "tags": [
                "Git",
                "Node.js"
            ]
        },
        {
            "id": "http://example.com/tools/Git%E4%BD%BF%E7%94%A8/",
            "url": "http://example.com/tools/Git%E4%BD%BF%E7%94%A8/",
            "title": "Git使用",
            "date_published": "2022-08-28T15:13:37.328Z",
            "content_html": "<h2 id=\"git分类\"><a class=\"markdownIt-Anchor\" href=\"#git分类\">#</a> Git 分类</h2>\n<p><a href=\"https://bingohuang.gitbooks.io/progit2/content/01-introduction/sections/about-version-control.html\"><strong>帮助文档</strong></a></p>\n<p><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFybmdpdGJyYW5jaGluZy5qcy5vcmcv\">图文了解</span></strong></p>\n<span id=\"more\"></span>\n<blockquote>\n<p>常见的版本控制工具</p>\n</blockquote>\n<ul>\n<li>\n<p>Git</p>\n</li>\n<li>\n<p>SVN</p>\n</li>\n<li>\n<p>CVS</p>\n</li>\n<li>\n<p>VSS</p>\n</li>\n<li>\n<p>TFS</p>\n</li>\n</ul>\n<blockquote>\n<p>版本控制分类</p>\n</blockquote>\n<ol>\n<li>本地版本控制 RCS</li>\n<li>集中版本控制 SVN CVS VSS</li>\n<li>分布式版本控制 Git</li>\n</ol>\n<blockquote>\n<p>GIt 与 SVN 最主要的区别</p>\n</blockquote>\n<p>SVN 是集中版本控制系统，版本库是集中放在中央服务器，工作时用的都是自己的电脑，首先得从中央服务器得到最新的版本，然后工作，完成工作后，将完成的工作推送到中央服务器，必须联网才能工作，对网络带宽要求较高 。</p>\n<p>Git 是分布式版本控制，没有中央服务器，每个人的电脑就是一个完整的版本库，工作时不需要联网，协同的方法：比如自己在电脑上修改了 A，其他人也在电脑上修改了 A, 这时只需把各自的修改推送给对方。</p>\n<h2 id=\"安装git以及配置\"><a class=\"markdownIt-Anchor\" href=\"#安装git以及配置\">#</a> 安装 Git 以及配置</h2>\n<blockquote>\n<p>下载 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWdpc3RyeS5ucG1taXJyb3IuY29tL2JpbmFyeS5odG1sP3BhdGg9Z2l0LWZvci13aW5kb3dz\">https://registry.npmmirror.com/binary.html?path=git-for-windows</span></p>\n</blockquote>\n<p>修改安装路径，在中途有一个默认 vim 编辑器，可以选择更换为 notepad++，其余一路 next</p>\n<p><s>卸载：先清理环境变量，后卸载</s></p>\n<blockquote>\n<p>启动 Git</p>\n</blockquote>\n<p>安装后会在菜单生成 3 个程序：</p>\n<ul>\n<li>Git Bash：Unix 与 Linux 风格的命令行，使用最多，</li>\n<li>Git CMD：Windows 风格的命令行</li>\n<li>Git GUI：图形界面的 Git，不建议初学者使用</li>\n</ul>\n<blockquote>\n<p>基本的 Linux 命令</p>\n</blockquote>\n<p>1）、cd : 改变目录。</p>\n<p>2）、cd . . 回退到上一个目录，直接 cd 进入默认目录</p>\n<p>3）、pwd : 显示当前所在的目录路径。</p>\n<p>4）、ls (ll): 都是列出当前目录中的所有文件，只不过 ll (两个 ll) 列出的内容更为详细。</p>\n<p>5）、touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个 index.js 文件。</p>\n<p>6）、rm: 删除一个文件，rm index.js 就会把 index.js 文件删除。</p>\n<p>7）、mkdir: 新建一个目录，就是新建一个文件夹。</p>\n<p>8）、rm -r : 删除一个文件夹，rm -r src 删除 src 目录</p>\n<p>9）、mv 移动文件，mv index.html src index.html 是我们要移动的文件，src 是目标文件夹，当然，这样写，</p>\n<p>必须保证文件和目标文件夹在同一目录下。</p>\n<p>10）、reset 重新初始化终端 / 清屏。</p>\n<p>11）、clear 清屏。</p>\n<p>12）、history 查看命令历史。</p>\n<p>13）、help 帮助。</p>\n<p>14）、exit 退出。</p>\n<p>15）、# 表示注释</p>\n<blockquote>\n<p>Git 配置</p>\n</blockquote>\n<p>查看配置 <mark>git config -l</mark></p>\n<pre><code>#查看系统config \ngit config --system --list \n\n#查看当前用户（global）配置 \ngit config --global --list\n</code></pre>\n<p>查看 Git 相关的配置文件：</p>\n<ol>\n<li>Git\\mingw64\\etc\\gitconfifig ： Git 安装目录下的 gitconfifig --system 系统级</li>\n<li>C:\\Users\\Administrator\\ .gitconfifig 只适用于当前登录用户的配置 --global 全局</li>\n</ol>\n<p>这里可以直接编辑配置文件，通过命令设置后会响应到这里</p>\n<blockquote>\n<p>设置用户名与邮箱（用户标识，必要）</p>\n</blockquote>\n<p>安装 Git 后首先要做的事情是设置用户名称和 e-mail 地址。因为每次 Git 提交都会使用该信息。它被永远的嵌入到了你的提交中：</p>\n<pre><code>git config --global user.name &quot;***&quot; #名称 \ngit config --global user.email **@qq.com #邮箱 \n</code></pre>\n<h2 id=\"git基本理论\"><a class=\"markdownIt-Anchor\" href=\"#git基本理论\">#</a> Git 基本理论</h2>\n<blockquote>\n<p>工作区域</p>\n</blockquote>\n<p>Git 本地有三个工作区域：工作目录（Working Directory）、暂存区 (Stage/Index)、资源库 (Repository 或 Git Directory)。如果在加上远程的 git 仓库 (Remote Directory) 就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：<img data-src=\"/images/image/Git/Git-01.png\" alt=\"Git-01\"></p>\n<ul>\n<li><strong>Workspace</strong>：工作区，就是你平时存放项目代码的地方</li>\n<li><strong>Index / Stage</strong>：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li>\n<li><strong>Repository</strong>：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中 HEAD 指向最新放入仓库的版本</li>\n<li><strong>Remote</strong>：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li>\n</ul>\n<p>本地的三个区域确切的说应该是 git 仓库中 HEAD 指向的版本：</p>\n<p><img data-src=\"/images/image/Git/Git-02.png\" alt=\"Git-02\"></p>\n<ul>\n<li><strong>Directory</strong>：使用 Git 管理的一个目录，也就是一个仓库，包含我们的工作空间和 Git 的管理空间。</li>\n<li><strong>WorkSpace</strong>：需要通过 Git 进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li>\n<li><strong>.git</strong>：存放 Git 管理信息的目录，初始化仓库的时候自动创建。</li>\n<li><strong>Index/Stage</strong>：暂存区，或者叫待提交更新区，在提交进入 repo 之前，我们可以把所有的更新放在暂存区。</li>\n<li><strong>Local Repo</strong>：本地仓库，一个存放在本地的版本库；HEAD 会只是当前的开发分支（branch）。</li>\n<li><strong>Stash</strong>：隐藏，是一个工作状态保存栈，用于保存 / 恢复 WorkSpace 中的临时状态。</li>\n</ul>\n<blockquote>\n<p>工作流程</p>\n</blockquote>\n<p>git 的工作流程一般是：</p>\n<ol>\n<li>在工作目录中添加，修改文件</li>\n<li>将要进行版本管理的问文件放入暂存区</li>\n<li>将暂存区的文件提交到 git 仓库</li>\n</ol>\n<p>因此，git 管理的文件有三种状态：已修改（modifified）, 已暂存（staged）, 已提交 (committed)</p>\n<h2 id=\"git项目搭建\"><a class=\"markdownIt-Anchor\" href=\"#git项目搭建\">#</a> Git 项目搭建</h2>\n<blockquote>\n<p>创建工作目录与常用命令</p>\n</blockquote>\n<p>工作目录（WorkSpace) 一般就是你希望 Git 帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。</p>\n<p><img data-src=\"/images/image/Git/Git-03.png\" alt=\"Git-03\"></p>\n<blockquote>\n<p>本地仓库搭建</p>\n</blockquote>\n<p>创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库.</p>\n<ol>\n<li>\n<p>创建全新的仓库，需要用 GIT 管理的项目的根目录执行：</p>\n<pre><code># 在当前目录新建一个Git代码库 \n$ git init 12\n</code></pre>\n</li>\n<li>\n<p>执行后可以看到，仅仅在项目目录多出了一个.git 目录，关于版本等的所有信息都在这个目录里面</p>\n</li>\n</ol>\n<blockquote>\n<p>克隆远程仓库</p>\n</blockquote>\n<pre><code># 克隆一个项目和它的整个代码历史(版本信息) \n$ git clone [url]\n</code></pre>\n<h2 id=\"git文件操作\"><a class=\"markdownIt-Anchor\" href=\"#git文件操作\">#</a> Git 文件操作</h2>\n<blockquote>\n<p>文件 4 种状态</p>\n</blockquote>\n<ul>\n<li><strong>Untracked</strong>: 未跟踪，此文件在文件夹中，但并没有加入到 git 库，不参与版本控制。通过 <strong>git add</strong> 状态变为 <strong>Staged</strong> .</li>\n<li><strong>Unmodify</strong>: 文件已经入库，未修改，即版本库中的文件快照内容与文件夹中完全一致。这种类型的文件有两种去处，如果它被修改，而变为 Modified . 如果使用 git rm 移出版本库，则成为 Untracked 文件</li>\n<li><strong>Modifified</strong>: 文件已修改，仅仅是修改，并没有进行其他的操作。这个文件也有两个去处，通过 git add 可进入暂存 staged 状态，使用 git checkout 则丢弃修改过，返回到 unmodify 状态，这个 git checkout 即从库中取出文件，覆盖当前修改！</li>\n<li><strong>Staged</strong>: 暂存状态。执行 git commit 则将修改同步到库中，这时库中的文件和本地文件又变为一致，文件为 Unmodify 状态。执行 git reset HEAD filename 取消暂存，文件状态为 Modified</li>\n</ul>\n<blockquote>\n<p>查看文件状态</p>\n</blockquote>\n<pre><code>#查看指定文件状态\ngit status [filename] \n\n#查看所有文件状态 \ngit status\n\n# git add .\t\t\t添加所有文件到暂存区\n# git commit -m\t&quot;内容&quot;\t提交暂存区中的内容到本地仓库 -m 提交信息\n</code></pre>\n<blockquote>\n<p>忽略文件</p>\n</blockquote>\n<p>主目录下建立 &quot;.gitignore&quot; 文件，此文件有如下规则:</p>\n<ol>\n<li>\n<p>忽略文件中的空行或以井号（#）开始的行将会被忽略。</p>\n</li>\n<li>\n<p>可以使用 Linux 通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号 [abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</p>\n</li>\n<li>\n<p>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</p>\n</li>\n<li>\n<p>如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</p>\n</li>\n<li>\n<p>如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件默认文件或目录都忽略）。</p>\n</li>\n</ol>\n<pre><code>#为注释 \n*.txt \t\t   #忽略所有 .txt结尾的文件 \n!lib.txt \t   #但lib.txt除外 \n/temp \t\t   #仅忽略项目根目录下的TODO文件,不包括其它目录temp build/ \t     #忽略build/目录下的所有文件 \ndoc/*.txt \t  #会忽略 doc/notes.txt 但不包括 doc/server/arch.txt\n</code></pre>\n<h2 id=\"git分支中常用指令\"><a class=\"markdownIt-Anchor\" href=\"#git分支中常用指令\">#</a> git 分支中常用指令</h2>\n<pre><code># 列出所有本地分支 \ngit branch \n\n# 列出所有远程分支 \ngit branch -r \n\n# 新建一个分支，但依然停留在当前分支 \ngit branch [branch-name] \n\n# 新建一个分支，并切换到该分支 \ngit checkout -b [branch] \n\n# 合并指定分支到当前分支 \ngit merge [branch] \n\n# 删除分支 \ngit branch -d [branch-name] \n\n# 删除远程分支 \ngit push origin --delete [branch-name] \n$ git branch -dr [remote/branch] \n</code></pre>\n<h2 id=\"使用gitee或者github\"><a class=\"markdownIt-Anchor\" href=\"#使用gitee或者github\">#</a> 使用 Gitee 或者 Github</h2>\n<p>设置本机绑定 SSH 公钥，实现免密码登录</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 进入 C:\\Users\\Administrator</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 新建.ssh文件</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 进入该文件夹，搜索栏cmd进入该路径下的命令提示符</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">4.</span> 敲入ssh-keygen -t rsa -C \"\"   生成公钥</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">5.</span> 打开GitHub设置配置ssh：将.ssh下生成的pub公钥打开复制即可</pre></td></tr></table></figure><p>测试是否成功</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ssh -T git@github.com</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ssh -T git@gitee.com</pre></td></tr></table></figure>",
            "tags": [
                "工具",
                "git",
                "Git"
            ]
        },
        {
            "id": "http://example.com/hello-world/",
            "url": "http://example.com/hello-world/",
            "title": "Hi guys",
            "date_published": "2022-08-28T08:35:16.362Z",
            "content_html": "<p>Welcome to <strong>my blog</strong>! This is my first article.</p>\n<p>When you have eliminated the impossible, whatever remains, however improbable, must be the truth.</p>\n<p>If you have any questions while reading, you can leave a comment below the article or ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0FsZXgtTWVsdA==\">GitHub</span>.</p>\n",
            "tags": []
        }
    ]
}