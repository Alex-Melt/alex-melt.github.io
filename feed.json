{
    "version": "https://jsonfeed.org/version/1",
    "title": "melt",
    "subtitle": "",
    "icon": "http://example.com/images/favicon.ico",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/language/%E7%AC%94%E8%AE%B0%E5%A4%A7%E5%85%A8/",
            "url": "http://example.com/language/%E7%AC%94%E8%AE%B0%E5%A4%A7%E5%85%A8/",
            "title": "笔记大全",
            "date_published": "2022-08-30T04:39:38.824Z",
            "content_html": "<h1 id=\"什么是python\"><a class=\"markdownIt-Anchor\" href=\"#什么是python\">#</a> 什么是 Python？</h1>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python：巨蟒</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>python是一门程序设计语言</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>语言：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 自然语言：肢体语言、汉语、英语、法语......</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 机器语言：001101010101二进制（微码编程）</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 程序设计语言：C、C艹、C艹艹、Java、python、PHP、GO</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>语言的高级型：越接近自然语言的编程语言就越高级，越高级的编程语言效率越低。汇编语言相对来说开发难度高，但是效率相对高，语言相对低级。</pre></td></tr></table></figure><ul>\n<li>python</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python:1989年，圣诞节，Guido Van Rossum</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Guido，退出了python的决策层。回归。</pre></td></tr></table></figure><ul>\n<li>python 的特点</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 语法简洁而清晰</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 强大的类库（17W)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 胶水语言</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">4.</span> 纯面向对象的语言</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>其他特点：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 跨平台：win、linux、mac.....</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 运行机制：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 直接解释执行</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 先编译，后解释/执行</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 代码量较少</pre></td></tr></table></figure><ul>\n<li>python 的应用场景</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>领域：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 航空航天 图像识别</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 3D动画</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> WEB应用</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">4.</span> 云计算</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">5.</span> 企业应用</pre></td></tr></table></figure><ul>\n<li>python 解释器的实现</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> Cpython：原生的解释器（官方）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t用C语言实现的解释器</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> Jython：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t用Java实现的解释器</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> IronPython：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t用.NET实现的解释器</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">4.</span> pypy：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t用python实现的解释器</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>效率最高的是：pypy</pre></td></tr></table></figure><ul>\n<li>python 的安装</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 版本必须是3.8or3.9</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 安装，选择路径，强烈建议装在C盘并且路径中不要有中文，路径一定要牢记</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 勾选add ???? to path</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">4.</span> 下一步</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">5.</span> 打开cmd窗口，输入python，查看版本是否正确</pre></td></tr></table></figure><ul>\n<li>八大排序</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 冒泡排序</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 选择排序</pre></td></tr></table></figure><h1 id=\"列表\"><a class=\"markdownIt-Anchor\" href=\"#列表\">#</a> 列表</h1>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>列表：list   是一个类是一个对象</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 存储多个数据，有没有上限？理论上没有长度限制</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 存储多种数据</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> 是一个可迭代对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">4.</span> 列表是一个可变类型的数据</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>不可变类型</pre></td></tr></table></figure><h3 id=\"创建列表\"><a class=\"markdownIt-Anchor\" href=\"#创建列表\">#</a> 创建列表</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 直接创建</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tl = [元素1,元素2,...,元素n]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 普通列表：[1,2,3,4]整型列表，['a','b','c','d']字符串列表</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 混合列表：[1,2,'a','b',[1,2,3]]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> l = []:空列表</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 通过构造方法来创建</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> list():返回一个空的列表</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> list(iterable)：从可迭代对象中的元素，初始化一个列表</pre></td></tr></table></figure><h4 id=\"访问列表里面的元素\"><a class=\"markdownIt-Anchor\" href=\"#访问列表里面的元素\">#</a> 访问列表里面的元素</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>访问：读、改、删</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>读取元素：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 通过索引来获取元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t索引：下标</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t索引不是下标</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tpython中索引是从0开始技术</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t访问形式：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t变量[下标]---访问一个元素</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 读取所有的元素</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t遍历：所有的元素不重复、不遗漏的访问一遍</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t通过for来进行遍历</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 如果下标超出了范围则会报错</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t列表的长度：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t列表的下标范围：</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t0<span class=\"token strike\"><span class=\"token punctuation\">~</span><span class=\"token content\">len(l)-1</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t列表的索引支持负数</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t负号：代表的是方向（反向）</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t-1</span><span class=\"token punctuation\">~</span></span>-len(l)</pre></td></tr></table></figure><h4 id=\"螺旋填数\"><a class=\"markdownIt-Anchor\" href=\"#螺旋填数\">#</a> 螺旋填数</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>螺旋填数：读入两个整数m,n，输出一个m行n列的矩阵，这个矩阵是1~m * n这些自然数按照右、下、左、上螺旋填入的结果。</pre></td></tr></table></figure><h4 id=\"向列表中添加元素\"><a class=\"markdownIt-Anchor\" href=\"#向列表中添加元素\">#</a> 向列表中添加元素</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> append(obj):</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t向列表的末尾添加一个obj</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tobject：对象，在python可以是任何数据</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t用于添加一个数据</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> extend(iterable):</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t通过可迭代对象的元素，来扩展当前的列表</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\titerable：可迭代对象</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t用于向列表中添加多个数据</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token list punctuation\">3.</span> insert(index,object)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t在index之前插入object</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tindex：索引值(下标)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tobject：任何对象</pre></td></tr></table></figure><h4 id=\"修改列表中的元素\"><a class=\"markdownIt-Anchor\" href=\"#修改列表中的元素\">#</a> 修改列表中的元素</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>直接赋值修改</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t变量[下标] = 新值</pre></td></tr></table></figure><h4 id=\"删除列表中的元素\"><a class=\"markdownIt-Anchor\" href=\"#删除列表中的元素\">#</a> 删除列表中的元素</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> clear():</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t清空列表中的所有元素</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> pop([index])：弹栈</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t删除并且返回下标为index的元素(index默认为最后一个)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t如果为空列表则会抛出IndexError</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t栈：是一种数据结构，FILO：First In Last Out</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">3.</span> remove(value):</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t删除第一个出现的value元素（下标最小）</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t如果value不存在会报ValueError</pre></td></tr></table></figure><h4 id=\"切片\"><a class=\"markdownIt-Anchor\" href=\"#切片\">#</a> 切片</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>slice：切片</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>列表通过索引可以获取一个元素,索引处可以接收更多的参数。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>l=[1,2,3,4,5]</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>l[2:4]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>作用：通过起始下标和结束下标获取一段元素(多个元素)，该数据是拷贝出来的数据，原数据不变</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>语法：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t变量[start:end]</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tstart：起始下标</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tend：结束下标</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t取值：[start:stop)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token list punctuation\">1.</span> 如果start为0那么可以不写</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tlist[:3]</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token list punctuation\">2.</span> 如果要直接获取到最后一个元素</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tlist[2:]</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token list punctuation\">3.</span> 如果要全取：</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tlist[:]</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>切片操作往往用于数据的拷贝</pre></td></tr></table></figure><ul>\n<li>切片的高级应用</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>切片还支持第三个参数，表示步长</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>变量[start:end:step]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>start:起始下标</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>end:结束下标</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>step:步长</pre></td></tr></table></figure><h4 id=\"列表的常用运算符\"><a class=\"markdownIt-Anchor\" href=\"#列表的常用运算符\">#</a> 列表的常用运算符</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 加法运算</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tlist1+list2----列表的拼接</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 比较运算(布尔运算)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t>,>=,&lt;,&lt;=,==,!=</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t比较原则：对应下标的元素，按照下标从小到大逐个比较，只要比较出大小则停止比较</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t需要注意类型的兼容性</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">3.</span> 重复运算</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t乘法</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t本质：是多个加法运算</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">4.</span> 成员关系运算:in/not in </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t判断列表中是否有某个成员</pre></td></tr></table></figure><ul>\n<li>列表中的其他方法</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> copy()</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t浅拷贝</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> count(value)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t返回value值在列表中出现的次数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> index(value[,start[,stop]])</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t返回value在列表中从start到stop的范围内的第一次出现的索引</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tvalue：要查询的值</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">4.</span> reverse()</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t原地翻转</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t和大小无关，不排序</pre></td></tr></table></figure><ul>\n<li>补充</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 列表中的所有元素，本质上都不是数据本身，而是数据的首地址</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 列表作为可变类型的数据</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t可变：当列表中的内容发生改变的时候，列表本身的地址不发生改变，但是列表中的元素发生改变。</pre></td></tr></table></figure><h3 id=\"二维列表\"><a class=\"markdownIt-Anchor\" href=\"#二维列表\">#</a> 二维列表</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>维度：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t[[1,2,3],[4,5,6],[4,5,6],[4,5,6],[4,5,6],[4,5,6],[4,5,6]]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>二维列表：一维列表下的一堆列表(一维列表)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>二维列表的访问：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 直接访问</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t访问一个元素可以通过下标进行访问</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tlist<span class=\"token url\">[<span class=\"token content\">行坐标</span>][<span class=\"token variable\">列坐标</span>]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 双重for循环</pre></td></tr></table></figure><ul>\n<li>二维列表的创建</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>l = [[1,2,3]]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>l = []</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>l.append([123])</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>[list()]</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>列表的推导式/生成式</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>l = [i for i in range(10)]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>print(l)</pre></td></tr></table></figure><h1 id=\"元组\"><a class=\"markdownIt-Anchor\" href=\"#元组\">#</a> 元组</h1>\n<h4 id=\"圆括号\"><a class=\"markdownIt-Anchor\" href=\"#圆括号\">#</a> 圆括号</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> ():可以修改运算的优先级</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 元组的组成部分</pre></td></tr></table></figure><h4 id=\"元组-2\"><a class=\"markdownIt-Anchor\" href=\"#元组-2\">#</a> 元组</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 可以存储多个数据</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 可以存储多种数据</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 是不可变类型</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">4.</span> 支持切片操作</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">5.</span> 可迭代对象</pre></td></tr></table></figure><h4 id=\"创建一个元组\"><a class=\"markdownIt-Anchor\" href=\"#创建一个元组\">#</a> 创建一个元组</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 直接创建</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tt = (1,2,3)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tt = (True,1,2,3)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tt = ()</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> 构造方法</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> tuple()---返回一个空元组</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> tuple(iterable)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t利用可迭代对象的元素，初始化一个新的元组</pre></td></tr></table></figure><h4 id=\"访问元组\"><a class=\"markdownIt-Anchor\" href=\"#访问元组\">#</a> 访问元组</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 访问一个元素</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t和列表一样</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 访问多个元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t和列表一样</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> 访问所有元素</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t和列表一样</pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>include <span class=\"token operator\">&lt;</span>stdio<span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">mian</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> d1<span class=\"token punctuation\">,</span>d2<span class=\"token punctuation\">,</span>d3<span class=\"token punctuation\">,</span>d4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    d1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>a<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">></span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d1=%d,a=%d,v=%d,c=%d\\n\"</span><span class=\"token punctuation\">,</span>d1<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    d2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">></span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>a<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">></span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d1=%d,a=%d,v=%d,c=%d\\n\"</span><span class=\"token punctuation\">,</span>d2<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    d3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>a<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">></span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d1=%d,a=%d,v=%d,c=%d\\n\"</span><span class=\"token punctuation\">,</span>d3<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    d4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">></span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>a<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">></span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d1=%d,a=%d,v=%d,c=%d\\n\"</span><span class=\"token punctuation\">,</span>d4<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"增加和修改以及删除元素\"><a class=\"markdownIt-Anchor\" href=\"#增加和修改以及删除元素\">#</a> 增加和修改以及删除元素</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">*</span> 元组是不可变类型，所以，本身不支持增删改操作</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">1.</span> 向元组中添加元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t利用切片然后元组拼接</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> 从元组中删除元素</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t利用切片删除元素</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">3.</span> 修改元组中的元素</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t先删除，后添加</pre></td></tr></table></figure><h4 id=\"元组的操作符\"><a class=\"markdownIt-Anchor\" href=\"#元组的操作符\">#</a> 元组的操作符</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 拼接操作</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t+</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 重复操作</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">*</span> ：本质是多个加法</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> 布尔操作：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t>,&lt;,==,!==</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t比较方法和列表一样</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">4.</span> 成员关系运算</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tin/not in</pre></td></tr></table></figure>",
            "tags": [
                "语言，Python",
                "Python"
            ]
        },
        {
            "id": "http://example.com/language/day5/",
            "url": "http://example.com/language/day5/",
            "title": "day5",
            "date_published": "2022-08-30T04:39:38.822Z",
            "content_html": "<h1 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\">#</a> 字符串</h1>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>最常用的数据类型，没有之一</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>str</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>特点：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 天生就具有跨平台性</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 是一个可迭代对象</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 支持索引操作</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token list punctuation\">4.</span> 支持切片操作</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token list punctuation\">5.</span> 是一个不可变类型</pre></td></tr></table></figure><ul>\n<li>字符串的类别</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 单引号字符串</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t其他语言：字符串必须使用双引号，单引号只能用于字符</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tpython：允许使用单引号来表达字符串</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t简单，可以和双引号进行嵌套</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> 双引号字符串</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t一般字符串</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">3.</span> 三引号字符串</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t多行字符串</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t单三引号、双三引号</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t一般用于文档注释，必须出现在代码块的第一行</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t也成为长字符串可以换行</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token list punctuation\">4.</span> 原始字符串</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t让所有的转义字符全部失效（只体现最原本的含义）</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\ts = r'Jerry\\tom'</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token list punctuation\">5.</span> 二进制字符串</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t不是字符串类型，是bytes类型</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tstr---bytes:encode()编码</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tbytes---str:decode()解码</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token list punctuation\">6.</span> unicode字符串</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t以unicode的方式来解析字符串</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tu'abc'</pre></td></tr></table></figure><ul>\n<li>创建字符串</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 直接创建：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\ts = 'abc'</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\ts = \"abc\"</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\ts = \"\"\"abc\"\"\"</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\ts = '''abc'''</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 构造方法</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tstr(obj)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tobject：可以接收任何参数</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tinput和print</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tconsole.log(\"\")</pre></td></tr></table></figure><ul>\n<li>访问字符串</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 访问一个</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t通过索引</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 访问多个</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t通过切片</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> 访问所有</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t遍历</pre></td></tr></table></figure><h3 id=\"图书管理系统\"><a class=\"markdownIt-Anchor\" href=\"#图书管理系统\">#</a> 图书管理系统</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 首页：登录注册，用户输入1则登录，输入2则注册</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 登录：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 用户登录</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 提示用户输入用户名</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token list punctuation\">2.</span> 提示用户输入密码</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token list punctuation\">3.</span> 判断用户输入的用户名和密码是否正确</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token list punctuation\">4.</span> 如果输入正确，则成功登录</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token list punctuation\">5.</span> 如果输入不正确，则重新登录</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 管理员登录</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">3.</span> 注册：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 提示用户输入用户名</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 不允许出现特殊字符</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 大于等于四个字儿</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 提示用户输入密码</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 用户密码需要分为高级、中级、低级</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t除了下面三种情况，剩下的情况全都不合规</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t高级：用户密码是大于14位，且由数字、字符、字母构成</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t中级：用户密码是大于8位小于14位，且由数字、字符、字母中的任意两个组合构成</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t低级：用户密码大于6位，小于8位</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 提示用户再次输入密码</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token list punctuation\">4.</span> 如果全部合规，则注册成功</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token list punctuation\">5.</span> 如果不合规，则重新输入</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token list punctuation\">4.</span> 进入图书管理系统：</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 查看所有图书--->用户、管理员</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 根据书名查找图书--->用户、管理员</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 根据作者查找图书--->用户、管理员</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token list punctuation\">4.</span> 修改图书名称 --->管理员</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token list punctuation\">5.</span> 修改图书价格--->管理员</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token list punctuation\">6.</span> 删除图书--->管理员</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token list punctuation\">7.</span> 增加新书--->管理员</pre></td></tr></table></figure><h3 id=\"常用的方法\"><a class=\"markdownIt-Anchor\" href=\"#常用的方法\">#</a> 常用的方法</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> capitalize()</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t首字母大写，其余字符小写</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> casefold()</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t字母全小写</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> center(字符长度,填充物)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tcenter(20, '-')</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">4.</span> count()</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tcount(sub[, start[, end]])</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t计算字符串中出现了多少sub元素</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">5.</span> encode()</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t编码</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t把字符串编成二进制的内容</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token list punctuation\">6.</span> endswith(suffix[, start[, end]])</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t是否以suffix结尾</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tendswith('系统',0,10)</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token list punctuation\">7.</span> find(sub[, start[, end]])</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t找到在start和end之间的第一个sub元素的下标，如果不存在，则返回-1</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token list punctuation\">8.</span> index(sub[, start[, end]])</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t如果sub在字符串中，则返回最小的下标</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token list punctuation\">9.</span> isalnum()</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t注：问一下</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t人类语言都为True，其他的为false</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token list punctuation\">10.</span> isalpha()</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t注：问一下</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t人类语言字母都为True，其他的为false</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token list punctuation\">11.</span> isdecimal()</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t十进制数字</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t判断字符中是否都是十进制阿拉伯数字</pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token list punctuation\">12.</span> isdigit()</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t判断是否都是十进制数字</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token list punctuation\">13.</span> islower()</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t判断当前字符串是否全都是小写</pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token list punctuation\">14.</span> isnumeric()</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t判断当前字符是否是由数字(只包含中文和阿拉伯，不包含英文)构成的</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token list punctuation\">15.</span> isspace()</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t判断是否全是空格</pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token list punctuation\">16.</span> isupper()</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t判断字符串是否全都是大写</pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token list punctuation\">17.</span> ljust(width[,fillchar])</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\ts.ljust(10,'-')</pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token list punctuation\">18.</span> rjust(width[,fillchar])</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\ts.rjust(10,'-')</pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token list punctuation\">19.</span> lstrip():</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t去掉字符串左侧的空格、回车、指标等空字符</pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token list punctuation\">20.</span> rstrip():</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t去掉字符串右侧的空格、回车、指标等空字符</pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token list punctuation\">21.</span> strip():</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t去掉字符串两侧的空格、回车、指标等空字符</pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token list punctuation\">22.</span> replace(old,new):</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t替换</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t把字符串中的old替换成new</pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token list punctuation\">23.</span> startswith(prefix)</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t判断是否是以prefix开头的字符串</pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token list punctuation\">24.</span> upper()</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t将字符串转为大写</pre></td></tr></table></figure><ul>\n<li>格式化</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>format(<span class=\"token italic\"><span class=\"token punctuation\">*</span><span class=\"token content\">args, </span><span class=\"token punctuation\">*</span></span>*kwargs)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token italic\"><span class=\"token punctuation\">*</span><span class=\"token content\">args：可变长参数，把参数打包成元组来处理</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t</span><span class=\"token punctuation\">*</span></span>kwargs：关键字参数，把参数打包成字典来处理</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">1.</span> 源字符通过下标的方式进行填充获取</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tprint('&#123;0&#125;,haha,&#123;1&#125;'.format('a', 'b'))</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 源字符通过关键字的方式来获取数据</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tprint('&#123;name&#125;,haha'.format(name='乔鼎'))</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">3.</span> 花括号的转义</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t如果需要让大括号失去意义，只需要编成两个大括号即可</pre></td></tr></table></figure><ul>\n<li>格式化字符串</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>通过%的方式来匹配字符串和匹配对象之间的关系</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 格式化编码：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\ts = 'this is a %c'%97</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">2.</span> 格式化字符串:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\ts = 'this is a %s'%'abc'</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">3.</span> 格式化整数</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\ts = 'this is a %d'%123</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">4.</span> 格式化无符号八进制数</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\ts = 'this is a %o'%123</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">5.</span> 格式化无符号十六进制数</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\ts = 'this is a %x'%123</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token list punctuation\">6.</span> 格式化定点数</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\ts = 'this is a %f'%123.0000004</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t四舍五入保留六位</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token list punctuation\">7.</span> 格式化科学计数法</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\ts = 'this is a %e'%123.0000004</pre></td></tr></table></figure><ul>\n<li>转义字符</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>作用：拥有特殊含义的字符</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> \\t:横向制表符</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> \\n:换行</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> \\v:纵向制表符</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">4.</span> \\r:老版windows的换行</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">5.</span> \\b:退格符</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">6.</span> \\f:换页符</pre></td></tr></table></figure>",
            "tags": [
                "语言",
                "Python",
                "Python"
            ]
        },
        {
            "id": "http://example.com/language/day4/",
            "url": "http://example.com/language/day4/",
            "title": "day4",
            "date_published": "2022-08-30T04:39:38.819Z",
            "content_html": "<h1 id=\"八大排序\"><a class=\"markdownIt-Anchor\" href=\"#八大排序\">#</a> 八大排序</h1>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 冒泡排序</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 选择排序</pre></td></tr></table></figure><h2 id=\"列表\"><a class=\"markdownIt-Anchor\" href=\"#列表\">#</a> 列表</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>列表：list   是一个类是一个对象</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 存储多个数据，有没有上限？理论上没有长度限制</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 存储多种数据</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> 是一个可迭代对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">4.</span> 列表是一个可变类型的数据</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>不可变类型</pre></td></tr></table></figure><h3 id=\"创建列表\"><a class=\"markdownIt-Anchor\" href=\"#创建列表\">#</a> 创建列表</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 直接创建</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tl = [元素1,元素2,...,元素n]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 普通列表：[1,2,3,4]整型列表，['a','b','c','d']字符串列表</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 混合列表：[1,2,'a','b',[1,2,3]]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> l = []:空列表</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 通过构造方法来创建</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> list():返回一个空的列表</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> list(iterable)：从可迭代对象中的元素，初始化一个列表</pre></td></tr></table></figure><h4 id=\"访问列表里面的元素\"><a class=\"markdownIt-Anchor\" href=\"#访问列表里面的元素\">#</a> 访问列表里面的元素</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>访问：读、改、删</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>读取元素：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 通过索引来获取元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t索引：下标</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t索引不是下标</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tpython中索引是从0开始技术</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t访问形式：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t变量[下标]---访问一个元素</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 读取所有的元素</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t遍历：所有的元素不重复、不遗漏的访问一遍</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t通过for来进行遍历</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 如果下标超出了范围则会报错</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t列表的长度：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t列表的下标范围：</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t0<span class=\"token strike\"><span class=\"token punctuation\">~</span><span class=\"token content\">len(l)-1</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t列表的索引支持负数</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t负号：代表的是方向（反向）</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t-1</span><span class=\"token punctuation\">~</span></span>-len(l)</pre></td></tr></table></figure><h4 id=\"螺旋填数\"><a class=\"markdownIt-Anchor\" href=\"#螺旋填数\">#</a> 螺旋填数</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>螺旋填数：读入两个整数m,n，输出一个m行n列的矩阵，这个矩阵是1~m * n这些自然数按照右、下、左、上螺旋填入的结果。</pre></td></tr></table></figure><h4 id=\"向列表中添加元素\"><a class=\"markdownIt-Anchor\" href=\"#向列表中添加元素\">#</a> 向列表中添加元素</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> append(obj):</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t向列表的末尾添加一个obj</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tobject：对象，在python可以是任何数据</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t用于添加一个数据</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> extend(iterable):</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t通过可迭代对象的元素，来扩展当前的列表</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\titerable：可迭代对象</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t用于向列表中添加多个数据</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token list punctuation\">3.</span> insert(index,object)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t在index之前插入object</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tindex：索引值(下标)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tobject：任何对象</pre></td></tr></table></figure><h4 id=\"修改列表中的元素\"><a class=\"markdownIt-Anchor\" href=\"#修改列表中的元素\">#</a> 修改列表中的元素</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>直接赋值修改</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t变量[下标] = 新值</pre></td></tr></table></figure><h4 id=\"删除列表中的元素\"><a class=\"markdownIt-Anchor\" href=\"#删除列表中的元素\">#</a> 删除列表中的元素</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> clear():</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t清空列表中的所有元素</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> pop([index])：弹栈</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t删除并且返回下标为index的元素(index默认为最后一个)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t如果为空列表则会抛出IndexError</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t栈：是一种数据结构，FILO：First In Last Out</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">3.</span> remove(value):</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t删除第一个出现的value元素（下标最小）</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t如果value不存在会报ValueError</pre></td></tr></table></figure><h4 id=\"切片\"><a class=\"markdownIt-Anchor\" href=\"#切片\">#</a> 切片</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>slice：切片</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>列表通过索引可以获取一个元素,索引处可以接收更多的参数。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>l=[1,2,3,4,5]</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>l[2:4]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>作用：通过起始下标和结束下标获取一段元素(多个元素)，该数据是拷贝出来的数据，原数据不变</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>语法：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t变量[start:end]</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tstart：起始下标</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tend：结束下标</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t取值：[start:stop)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token list punctuation\">1.</span> 如果start为0那么可以不写</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tlist[:3]</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token list punctuation\">2.</span> 如果要直接获取到最后一个元素</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tlist[2:]</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token list punctuation\">3.</span> 如果要全取：</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tlist[:]</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>切片操作往往用于数据的拷贝</pre></td></tr></table></figure><ul>\n<li>切片的高级应用</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>切片还支持第三个参数，表示步长</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>变量[start:end:step]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>start:起始下标</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>end:结束下标</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>step:步长</pre></td></tr></table></figure><h4 id=\"列表的常用运算符\"><a class=\"markdownIt-Anchor\" href=\"#列表的常用运算符\">#</a> 列表的常用运算符</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 加法运算</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tlist1+list2----列表的拼接</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 比较运算(布尔运算)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t>,>=,&lt;,&lt;=,==,!=</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t比较原则：对应下标的元素，按照下标从小到大逐个比较，只要比较出大小则停止比较</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t需要注意类型的兼容性</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">3.</span> 重复运算</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t乘法</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t本质：是多个加法运算</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">4.</span> 成员关系运算:in/not in </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t判断列表中是否有某个成员</pre></td></tr></table></figure><ul>\n<li>列表中的其他方法</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> copy()</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t浅拷贝</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> count(value)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t返回value值在列表中出现的次数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> index(value[,start[,stop]])</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t返回value在列表中从start到stop的范围内的第一次出现的索引</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tvalue：要查询的值</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">4.</span> reverse()</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t原地翻转</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t和大小无关，不排序</pre></td></tr></table></figure><ul>\n<li>补充</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 列表中的所有元素，本质上都不是数据本身，而是数据的首地址</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 列表作为可变类型的数据</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t可变：当列表中的内容发生改变的时候，列表本身的地址不发生改变，但是列表中的元素发生改变。</pre></td></tr></table></figure><h2 id=\"二维列表\"><a class=\"markdownIt-Anchor\" href=\"#二维列表\">#</a> 二维列表</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>维度：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t[[1,2,3],[4,5,6],[4,5,6],[4,5,6],[4,5,6],[4,5,6],[4,5,6]]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>二维列表：一维列表下的一堆列表(一维列表)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>二维列表的访问：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 直接访问</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t访问一个元素可以通过下标进行访问</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tlist<span class=\"token url\">[<span class=\"token content\">行坐标</span>][<span class=\"token variable\">列坐标</span>]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 双重for循环</pre></td></tr></table></figure><ul>\n<li>二维列表的创建</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>l = [[1,2,3]]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>l = []</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>l.append([123])</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>[list()]</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>列表的推导式/生成式</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>l = [i for i in range(10)]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>print(l)</pre></td></tr></table></figure><h1 id=\"元组\"><a class=\"markdownIt-Anchor\" href=\"#元组\">#</a> 元组</h1>\n<h4 id=\"圆括号\"><a class=\"markdownIt-Anchor\" href=\"#圆括号\">#</a> 圆括号</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> ():可以修改运算的优先级</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 元组的组成部分</pre></td></tr></table></figure><h4 id=\"元组-2\"><a class=\"markdownIt-Anchor\" href=\"#元组-2\">#</a> 元组</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 可以存储多个数据</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 可以存储多种数据</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 是不可变类型</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">4.</span> 支持切片操作</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">5.</span> 可迭代对象</pre></td></tr></table></figure><h4 id=\"创建一个元组\"><a class=\"markdownIt-Anchor\" href=\"#创建一个元组\">#</a> 创建一个元组</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 直接创建</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tt = (1,2,3)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tt = (True,1,2,3)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tt = ()</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> 构造方法</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> tuple()---返回一个空元组</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> tuple(iterable)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t利用可迭代对象的元素，初始化一个新的元组</pre></td></tr></table></figure><h4 id=\"访问元组\"><a class=\"markdownIt-Anchor\" href=\"#访问元组\">#</a> 访问元组</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 访问一个元素</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t和列表一样</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 访问多个元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t和列表一样</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> 访问所有元素</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t和列表一样</pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>include <span class=\"token operator\">&lt;</span>stdio<span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">mian</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> d1<span class=\"token punctuation\">,</span>d2<span class=\"token punctuation\">,</span>d3<span class=\"token punctuation\">,</span>d4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    d1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>a<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">></span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d1=%d,a=%d,v=%d,c=%d\\n\"</span><span class=\"token punctuation\">,</span>d1<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    d2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">></span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>a<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">></span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d1=%d,a=%d,v=%d,c=%d\\n\"</span><span class=\"token punctuation\">,</span>d2<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    d3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>a<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">></span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d1=%d,a=%d,v=%d,c=%d\\n\"</span><span class=\"token punctuation\">,</span>d3<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    d4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">></span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>a<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">></span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d1=%d,a=%d,v=%d,c=%d\\n\"</span><span class=\"token punctuation\">,</span>d4<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"增加和修改以及删除元素\"><a class=\"markdownIt-Anchor\" href=\"#增加和修改以及删除元素\">#</a> 增加和修改以及删除元素</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">*</span> 元组是不可变类型，所以，本身不支持增删改操作</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">1.</span> 向元组中添加元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t利用切片然后元组拼接</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> 从元组中删除元素</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t利用切片删除元素</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">3.</span> 修改元组中的元素</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t先删除，后添加</pre></td></tr></table></figure><h4 id=\"元组的操作符\"><a class=\"markdownIt-Anchor\" href=\"#元组的操作符\">#</a> 元组的操作符</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 拼接操作</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t+</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 重复操作</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">*</span> ：本质是多个加法</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> 布尔操作：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t>,&lt;,==,!==</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t比较方法和列表一样</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">4.</span> 成员关系运算</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tin/not in</pre></td></tr></table></figure><h1 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\">#</a> 字符串</h1>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>最常用的数据类型，没有之一</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>str</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>特点：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 天生就具有跨平台性</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 是一个可迭代对象</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 支持索引操作</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token list punctuation\">4.</span> 支持切片操作</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token list punctuation\">5.</span> 是一个不可变类型</pre></td></tr></table></figure><ul>\n<li>字符串的类别</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 单引号字符串</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t其他语言：字符串必须使用双引号，单引号只能用于字符</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tpython：允许使用单引号来表达字符串</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t简单，可以和双引号进行嵌套</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> 双引号字符串</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t一般字符串</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">3.</span> 三引号字符串</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t多行字符串</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t单三引号、双三引号</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t一般用于文档注释，必须出现在代码块的第一行</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t也成为长字符串可以换行</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token list punctuation\">4.</span> 原始字符串</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t让所有的转义字符全部失效（只体现最原本的含义）</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\ts = r'Jerry\\tom'</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token list punctuation\">5.</span> 二进制字符串</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t不是字符串类型，是bytes类型</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tstr---bytes:encode()编码</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tbytes---str:decode()解码</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token list punctuation\">6.</span> unicode字符串</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t以unicode的方式来解析字符串</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tu'abc'</pre></td></tr></table></figure><ul>\n<li>创建字符串</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 直接创建：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\ts = 'abc'</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\ts = \"abc\"</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\ts = \"\"\"abc\"\"\"</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\ts = '''abc'''</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 构造方法</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tstr(obj)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tobject：可以接收任何参数</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tinput和print</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tconsole.log(\"\")</pre></td></tr></table></figure><ul>\n<li>访问字符串</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 访问一个</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t通过索引</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 访问多个</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t通过切片</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> 访问所有</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t遍历</pre></td></tr></table></figure><h3 id=\"图书管理系统\"><a class=\"markdownIt-Anchor\" href=\"#图书管理系统\">#</a> 图书管理系统</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 首页：登录注册，用户输入1则登录，输入2则注册</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 登录：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 提示用户输入用户名</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 提示用户输入密码</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 判断用户输入的用户名和密码是否正确</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">4.</span> 如果输入正确，则成功登录</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token list punctuation\">5.</span> 如果输入不正确，则重新登录</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">3.</span> 注册：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 提示用户输入用户名</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 不允许出现特殊字符</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 大于等于四个字儿</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 提示用户输入密码</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 用户密码需要分为高级、中级、低级</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t除了下面三种情况，剩下的情况全都不合规</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t高级：用户密码是大于14位，且由数字、字符、字母构成</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t中级：用户密码是大于8位小于14位，且由数字、字符、字母中的任意两个组合构成</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t低级：用户密码大于6位，小于8位</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 提示用户再次输入密码</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token list punctuation\">4.</span> 如果全部合规，则注册成功</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token list punctuation\">5.</span> 如果不合规，则重新输入</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token list punctuation\">4.</span> 进入图书管理系统：</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 查看所有图书</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 根据书名查找图书</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 根据作者查找图书</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token list punctuation\">4.</span> 修改图书名称 </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token list punctuation\">5.</span> 修改图书价格</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token list punctuation\">6.</span> 删除图书</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token list punctuation\">7.</span> 增加新书</pre></td></tr></table></figure><h3 id=\"常用的方法\"><a class=\"markdownIt-Anchor\" href=\"#常用的方法\">#</a> 常用的方法</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> capitalize()</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t首字母大写，其余字符小写</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> casefold()</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t字母全小写</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> center(字符长度,填充物)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tcenter(20, '-')</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">4.</span> count()</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tcount(sub[, start[, end]])</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t计算字符串中出现了多少sub元素</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">5.</span> encode()</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t编码</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t把字符串编成二进制的内容</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token list punctuation\">6.</span> endswith(suffix[, start[, end]])</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t是否以suffix结尾</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tendswith('系统',0,10)</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token list punctuation\">7.</span> find(sub[, start[, end]])</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t找到在start和end之间的第一个sub元素的下标，如果不存在，则返回-1</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token list punctuation\">8.</span> index(sub[, start[, end]])</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t如果sub在字符串中，则返回最小的下标</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token list punctuation\">9.</span> isalnum()</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t注：问一下</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t人类语言都为True，其他的为false</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token list punctuation\">10.</span> isalpha()</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t注：问一下</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t人类语言字母都为True，其他的为false</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token list punctuation\">11.</span> isdecimal()</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t十进制数字</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t判断字符中是否都是十进制阿拉伯数字</pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token list punctuation\">12.</span> isdigit()</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t判断是否都是十进制数字</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token list punctuation\">13.</span> islower()</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t判断当前字符串是否全都是小写</pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token list punctuation\">14.</span> isnumeric()</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t判断当前字符是否是由数字(只包含中文和阿拉伯，不包含英文)构成的</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token list punctuation\">15.</span> isspace()</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t判断是否全是空格</pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token list punctuation\">16.</span> isupper()</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t判断字符串是否全都是大写</pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token list punctuation\">17.</span> ljust(width[,fillchar])</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\ts.ljust(10,'-')</pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token list punctuation\">18.</span> rjust(width[,fillchar])</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\ts.rjust(10,'-')</pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token list punctuation\">19.</span> lstrip():</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t去掉字符串左侧的空格、回车、指标等空字符</pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token list punctuation\">20.</span> rstrip():</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t去掉字符串右侧的空格、回车、指标等空字符</pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token list punctuation\">21.</span> strip():</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t去掉字符串两侧的空格、回车、指标等空字符</pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token list punctuation\">22.</span> replace(old,new):</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t替换</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t把字符串中的old替换成new</pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token list punctuation\">23.</span> startswith(prefix)</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t判断是否是以prefix开头的字符串</pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token list punctuation\">24.</span> upper()</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t将字符串转为大写</pre></td></tr></table></figure><ul>\n<li>格式化</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>format(<span class=\"token italic\"><span class=\"token punctuation\">*</span><span class=\"token content\">args, </span><span class=\"token punctuation\">*</span></span>*kwargs)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token italic\"><span class=\"token punctuation\">*</span><span class=\"token content\">args：可变长参数，把参数打包成元组来处理</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t</span><span class=\"token punctuation\">*</span></span>kwargs：关键字参数，把参数打包成字典来处理</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">1.</span> 源字符通过下标的方式进行填充获取</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tprint('&#123;0&#125;,haha,&#123;1&#125;'.format('a', 'b'))</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 源字符通过关键字的方式来获取数据</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tprint('&#123;name&#125;,haha'.format(name='乔鼎'))</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">3.</span> 花括号的转义</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t如果需要让大括号失去意义，只需要编成两个大括号即可</pre></td></tr></table></figure><ul>\n<li>格式化字符串</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>通过%的方式来匹配字符串和匹配对象之间的关系</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 格式化编码：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\ts = 'this is a %c'%97</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">2.</span> 格式化字符串:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\ts = 'this is a %s'%'abc'</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">3.</span> 格式化整数</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\ts = 'this is a %d'%123</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">4.</span> 格式化无符号八进制数</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\ts = 'this is a %o'%123</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">5.</span> 格式化无符号十六进制数</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\ts = 'this is a %x'%123</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token list punctuation\">6.</span> 格式化定点数</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\ts = 'this is a %f'%123.0000004</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t四舍五入保留六位</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token list punctuation\">7.</span> 格式化科学计数法</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\ts = 'this is a %e'%123.0000004</pre></td></tr></table></figure><ul>\n<li>转义字符</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>作用：拥有特殊含义的字符</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> \\t:横向制表符</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> \\n:换行</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> \\v:纵向制表符</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">4.</span> \\r:老版windows的换行</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">5.</span> \\b:退格符</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">6.</span> \\f:换页符</pre></td></tr></table></figure>",
            "tags": [
                "语言",
                "Python",
                "Python"
            ]
        },
        {
            "id": "http://example.com/language/day3/",
            "url": "http://example.com/language/day3/",
            "title": "day3",
            "date_published": "2022-08-30T04:39:38.816Z",
            "content_html": "<h2 id=\"列表\"><a class=\"markdownIt-Anchor\" href=\"#列表\">#</a> 列表</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>列表：list   是一个类是一个对象</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 存储多个数据，有没有上限？理论上没有长度限制</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 存储多种数据</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> 是一个可迭代对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">4.</span> 列表是一个可变类型的数据</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>不可变类型</pre></td></tr></table></figure><h3 id=\"创建列表\"><a class=\"markdownIt-Anchor\" href=\"#创建列表\">#</a> 创建列表</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 直接创建</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tl = [元素1,元素2,...,元素n]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 普通列表：[1,2,3,4]整型列表，['a','b','c','d']字符串列表</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 混合列表：[1,2,'a','b',[1,2,3]]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> l = []:空列表</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 通过构造方法来创建</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> list():返回一个空的列表</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> list(iterable)：从可迭代对象中的元素，初始化一个列表</pre></td></tr></table></figure><h4 id=\"访问列表里面的元素\"><a class=\"markdownIt-Anchor\" href=\"#访问列表里面的元素\">#</a> 访问列表里面的元素</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>访问：读、改、删</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>读取元素：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 通过索引来获取元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t索引：下标</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t索引不是下标</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tpython中索引是从0开始技术</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t访问形式：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t变量[下标]---访问一个元素</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 读取所有的元素</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t遍历：所有的元素不重复、不遗漏的访问一遍</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t通过for来进行遍历</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 如果下标超出了范围则会报错</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t列表的长度：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t列表的下标范围：</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t0<span class=\"token strike\"><span class=\"token punctuation\">~</span><span class=\"token content\">len(l)-1</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t列表的索引支持负数</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t负号：代表的是方向（反向）</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t-1</span><span class=\"token punctuation\">~</span></span>-len(l)</pre></td></tr></table></figure><h4 id=\"螺旋填数\"><a class=\"markdownIt-Anchor\" href=\"#螺旋填数\">#</a> 螺旋填数</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>螺旋填数：读入两个整数m,n，输出一个m行n列的矩阵，这个矩阵是1~m * n这些自然数按照右、下、左、上螺旋填入的结果。</pre></td></tr></table></figure><h4 id=\"向列表中添加元素\"><a class=\"markdownIt-Anchor\" href=\"#向列表中添加元素\">#</a> 向列表中添加元素</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> append(obj):</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t向列表的末尾添加一个obj</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tobject：对象，在python可以是任何数据</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t用于添加一个数据</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> extend(iterable):</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t通过可迭代对象的元素，来扩展当前的列表</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\titerable：可迭代对象</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t用于向列表中添加多个数据</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token list punctuation\">3.</span> insert(index,object)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t在index之前插入object</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tindex：索引值(下标)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tobject：任何对象</pre></td></tr></table></figure><h4 id=\"修改列表中的元素\"><a class=\"markdownIt-Anchor\" href=\"#修改列表中的元素\">#</a> 修改列表中的元素</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>直接赋值修改</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t变量[下标] = 新值</pre></td></tr></table></figure><h4 id=\"删除列表中的元素\"><a class=\"markdownIt-Anchor\" href=\"#删除列表中的元素\">#</a> 删除列表中的元素</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> clear():</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t清空列表中的所有元素</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> pop([index])：弹栈</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t删除并且返回下标为index的元素(index默认为最后一个)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t如果为空列表则会抛出IndexError</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t栈：是一种数据结构，FILO：First In Last Out</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">3.</span> remove(value):</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t删除第一个出现的value元素（下标最小）</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t如果value不存在会报ValueError</pre></td></tr></table></figure><h4 id=\"切片\"><a class=\"markdownIt-Anchor\" href=\"#切片\">#</a> 切片</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>slice：切片</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>列表通过索引可以获取一个元素,索引处可以接收更多的参数。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>l=[1,2,3,4,5]</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>l[2:4]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>作用：通过起始下标和结束下标获取一段元素(多个元素)，该数据是拷贝出来的数据，原数据不变</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>语法：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t变量[start:end]</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tstart：起始下标</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tend：结束下标</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t取值：[start:stop)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token list punctuation\">1.</span> 如果start为0那么可以不写</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tlist[:3]</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token list punctuation\">2.</span> 如果要直接获取到最后一个元素</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tlist[2:]</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token list punctuation\">3.</span> 如果要全取：</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tlist[:]</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>切片操作往往用于数据的拷贝</pre></td></tr></table></figure><ul>\n<li>切片的高级应用</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>切片还支持第三个参数，表示步长</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>变量[start:end:step]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>start:起始下标</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>end:结束下标</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>step:步长</pre></td></tr></table></figure><h4 id=\"列表的常用运算符\"><a class=\"markdownIt-Anchor\" href=\"#列表的常用运算符\">#</a> 列表的常用运算符</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 加法运算</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tlist1+list2----列表的拼接</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 比较运算(布尔运算)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t>,>=,&lt;,&lt;=,==,!=</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t比较原则：对应下标的元素，按照下标从小到大逐个比较，只要比较出大小则停止比较</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t需要注意类型的兼容性</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">3.</span> 重复运算</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t乘法</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t本质：是多个加法运算</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">4.</span> 成员关系运算:in/not in </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t判断列表中是否有某个成员</pre></td></tr></table></figure><ul>\n<li>列表中的其他方法</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> copy()</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t浅拷贝</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> count(value)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t返回value值在列表中出现的次数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> index(value[,start[,stop]])</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t返回value在列表中从start到stop的范围内的第一次出现的索引</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tvalue：要查询的值</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">4.</span> reverse()</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t原地翻转</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t和大小无关，不排序</pre></td></tr></table></figure><ul>\n<li>补充</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 列表中的所有元素，本质上都不是数据本身，而是数据的首地址</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 列表作为可变类型的数据</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t可变：当列表中的内容发生改变的时候，列表本身的地址不发生改变，但是列表中的元素发生改变。</pre></td></tr></table></figure>",
            "tags": [
                "语言",
                "Python",
                "Python"
            ]
        },
        {
            "id": "http://example.com/language/day2/",
            "url": "http://example.com/language/day2/",
            "title": "day2",
            "date_published": "2022-08-30T04:39:38.814Z",
            "content_html": "<h1 id=\"流程控制\"><a class=\"markdownIt-Anchor\" href=\"#流程控制\">#</a> 流程控制</h1>\n<h2 id=\"条件分支\"><a class=\"markdownIt-Anchor\" href=\"#条件分支\">#</a> 条件分支</h2>\n<ul>\n<li>if-else 结构</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>语法：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> if 布尔表达式:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\t\t代码</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> if 布尔表达式:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t\t代码</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\telse:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t\t代码</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> if 布尔表达式:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t\t代码</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\telif 布尔表达式:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t\t代码</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t...</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t...</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\telse:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\t代码</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>注意：</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> if语句不会影响和自己平级的其他结构</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> if和else中的代码不可能同时发生</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>输入一个人的分数：90分以上优秀，80-90良好，70-80普通，60-70及格，0-60不及格</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>代码块：</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t书写代码的块级结构</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tpython中用冒号和缩进来表示代码块</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t其他语言中：&#123;&#125;来表示代码块</pre></td></tr></table></figure><ul>\n<li>嵌套使用</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>if-elif-else结构中中，可以在任意一个代码块中嵌套if结构(三种中任意一种都可以)</pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>score <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入你的分数：'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> score <span class=\"token operator\">>=</span><span class=\"token number\">0</span> <span class=\"token keyword\">and</span> score <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> score <span class=\"token operator\">&lt;</span> <span class=\"token number\">60</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不及格'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">elif</span> score <span class=\"token operator\">&lt;</span> <span class=\"token number\">70</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'及格'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">elif</span> score <span class=\"token operator\">&lt;</span> <span class=\"token number\">80</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'普通'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">elif</span> score <span class=\"token operator\">&lt;</span> <span class=\"token number\">90</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'良好'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'优秀'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'你有病'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>else 悬挂问题</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tips:if或者else里面定义的内容，会泄露到上一级结构中</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> python可以很好地规避else悬挂问题</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t依靠严格的缩进</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">2.</span> C语言中if语句会和最近的else组成一个整体</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t有可能当前结构并不属于该if结构---称之为else悬挂问题</pre></td></tr></table></figure><ul>\n<li>断言</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>assert：是一个关键字</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>含义：判断assert之后的布尔表达式是否为真，如果为真则正常执行程序，如果为假，立刻终止程序并且抛出异常(AssertionError)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>语法：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tassert 布尔表达式:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>主动报错</pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">assert</span> a <span class=\"token operator\">></span> b</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hahaha'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>晨讲</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>每天早上8：30-9:20晨讲</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>每组出一个人，不可重复</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>每天三组：一个人15分钟</pre></td></tr></table></figure><h2 id=\"循环流程\"><a class=\"markdownIt-Anchor\" href=\"#循环流程\">#</a> 循环流程</h2>\n<ul>\n<li>while 循环</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>循环：重复执行代码</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 语法：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\twhile 布尔表达式:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t代码(循环体)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> 注意：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t控制while后面的布尔表达式，可能会出现死循环，也可能出现正常终止</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t死循环：无限循环</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 服务器</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 硬件</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t合理的控制循环条件</pre></td></tr></table></figure><figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>while True</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>while 1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>python2：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> True是一个保留字，可以被修改</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 每次执行while True的时候会对True的值进行校验</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> while 1的执行效率更高</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>python3：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> True是一个关键字，是不可变的</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 执行while True的时候不需要进行校验</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> while True while 1的效率是一致的</pre></td></tr></table></figure><ul>\n<li>for 循环</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>也称为计数循环</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>可迭代对象：是指拥有迭代器的对象</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>迭代器：是一个特殊的可迭代对象</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>可迭代对象：str、list、tuple 类似于这样的数据，我们称为可迭代对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">1.</span> 语法：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tfor 变量 in 可迭代对象:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t代码(循环体)</pre></td></tr></table></figure><ul>\n<li>range</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对象</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>range的参数必须是整型</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">1.</span> range(stop)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t返回一个range对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tstart：默认为0</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> range(start, stop[, step])</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t返回一个range对象</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tstart：开始的值</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tstop：结束的值（不包括）</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tstep：步长（可以是正数也可以是负数）</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token list punctuation\">3.</span> range对象是一个可迭代对象</pre></td></tr></table></figure><ul>\n<li>补充</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>知道循环次数：for循环</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>不知道循环次数但是知道循环条件：while循环</pre></td></tr></table></figure><ul>\n<li>break</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>跳出本层循环，之后的循环不再执行</pre></td></tr></table></figure><ul>\n<li>continue</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>跳出本次循环，之后的循环不影响</pre></td></tr></table></figure><ul>\n<li>循环嵌套</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>多个循环之间，可以任意嵌套使用</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> while里面套while</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> while里面套for</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> for里面套while</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">4.</span> for里面套for</pre></td></tr></table></figure><ul>\n<li>九九乘法表</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># i = 2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># range(1,3)=[1,2]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">'*'</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">'='</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>end<span class=\"token operator\">=</span><span class=\"token string\">'\\t'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"列表\"><a class=\"markdownIt-Anchor\" href=\"#列表\">#</a> 列表</h1>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>列表：list   是一个类是一个对象</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 存储多个数据，有没有上限？理论上没有长度限制</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 存储多种数据</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> 是一个可迭代对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">4.</span> 列表是一个可变类型的数据</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>不可变类型</pre></td></tr></table></figure><ul>\n<li>创建列表</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 直接创建</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tl = [元素1,元素2,...,元素n]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 普通列表：[1,2,3,4]整型列表，['a','b','c','d']字符串列表</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 混合列表：[1,2,'a','b',[1,2,3]]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> l = []:空列表</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 通过构造方法来创建</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> list():返回一个空的列表</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> list(iterable)：从可迭代对象中的元素，初始化一个列表</pre></td></tr></table></figure><ul>\n<li>访问列表里面的元素</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>访问：读、改、删</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>读取元素：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 通过索引来获取元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t索引：下标</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t索引不是下标</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tpython中索引是从0开始技术</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t访问形式：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t变量[下标]---访问一个元素</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 读取所有的元素</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t遍历：所有的元素不重复、不遗漏的访问一遍</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t通过for来进行遍历</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 如果下标超出了范围则会报错</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t列表的长度：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t列表的下标范围：</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t0<span class=\"token strike\"><span class=\"token punctuation\">~</span><span class=\"token content\">len(l)-1</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t列表的索引支持负数</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t负号：代表的是方向（反向）</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t-1</span><span class=\"token punctuation\">~</span></span>-len(l)</pre></td></tr></table></figure><ul>\n<li>螺旋填数</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>螺旋填数：读入两个整数m,n，输出一个m行n列的矩阵，这个矩阵是1~m * n这些自然数按照右、下、左、上螺旋填入的结果。</pre></td></tr></table></figure><ul>\n<li>向列表中添加元素</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> append()</pre></td></tr></table></figure>",
            "tags": [
                "语言",
                "Python",
                "Python"
            ]
        },
        {
            "id": "http://example.com/language/day1/",
            "url": "http://example.com/language/day1/",
            "title": "day1",
            "date_published": "2022-08-30T04:39:38.810Z",
            "content_html": "<h3 id=\"什么是python\"><a class=\"markdownIt-Anchor\" href=\"#什么是python\">#</a> 什么是 Python？</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python：巨蟒</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>python是一门程序设计语言</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>语言：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 自然语言：肢体语言、汉语、英语、法语......</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 机器语言：001101010101二进制（微码编程）</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 程序设计语言：C、C艹、C艹艹、Java、python、PHP、GO</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>语言的高级型：越接近自然语言的编程语言就越高级，越高级的编程语言效率越低。汇编语言相对来说开发难度高，但是效率相对高，语言相对低级。</pre></td></tr></table></figure><ul>\n<li>python</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python:1989年，圣诞节，Guido Van Rossum</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Guido，退出了python的决策层。回归。</pre></td></tr></table></figure><ul>\n<li>python 的特点</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 语法简洁而清晰</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 强大的类库（17W)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 胶水语言</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">4.</span> 纯面向对象的语言</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>其他特点：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 跨平台：win、linux、mac.....</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 运行机制：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 直接解释执行</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 先编译，后解释/执行</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 代码量较少</pre></td></tr></table></figure><ul>\n<li>python 的应用场景</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>领域：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 航空航天 图像识别</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 3D动画</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> WEB应用</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">4.</span> 云计算</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">5.</span> 企业应用</pre></td></tr></table></figure><ul>\n<li>python 解释器的实现</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> Cpython：原生的解释器（官方）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t用C语言实现的解释器</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> Jython：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t用Java实现的解释器</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> IronPython：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t用.NET实现的解释器</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">4.</span> pypy：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t用python实现的解释器</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>效率最高的是：pypy</pre></td></tr></table></figure><ul>\n<li>python 的安装</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 版本必须是3.8or3.9</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 安装，选择路径，强烈建议装在C盘并且路径中不要有中文，路径一定要牢记</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 勾选add ???? to path</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">4.</span> 下一步</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">5.</span> 打开cmd窗口，输入python，查看版本是否正确</pre></td></tr></table></figure><h1 id=\"流程控制\"><a class=\"markdownIt-Anchor\" href=\"#流程控制\">#</a> 流程控制</h1>\n<h2 id=\"条件分支\"><a class=\"markdownIt-Anchor\" href=\"#条件分支\">#</a> 条件分支</h2>\n<ul>\n<li>if-else 结构</li>\n</ul>\n<pre><code class=\"language-markdown\"></code></pre>\n<h2 id=\"循环流程\"><a class=\"markdownIt-Anchor\" href=\"#循环流程\">#</a> 循环流程</h2>\n",
            "tags": [
                "语言",
                "Python",
                "Python"
            ]
        },
        {
            "id": "http://example.com/computer-science/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",
            "url": "http://example.com/computer-science/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",
            "title": "数据结构",
            "date_published": "2022-08-28T15:13:37.424Z",
            "content_html": "<h2 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\">#</a> 数组</h2>\n<h3 id=\"稀疏矩阵\"><a class=\"markdownIt-Anchor\" href=\"#稀疏矩阵\">#</a> 稀疏矩阵</h3>\n<p><em>当一个二维矩阵中大多数为 0，或同一个数字时采用稀疏矩阵</em></p>\n<span id=\"more\"></span>\n<p>eg: 五子棋</p>\n<ul>\n<li>\n<p>三元组</p>\n<ul>\n<li>\n<p>将二维数组转为稀疏数组</p>\n<ul>\n<li>遍历原始二维数组，得到有效个数 sum</li>\n<li>创建稀疏数组 spare int [sum+1] [3]</li>\n<li>将二维数组的有效值存入稀疏数组</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getSparse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 生成二维数组</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chess <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    chess<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    chess<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 得到有效数值的个数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> row <span class=\"token operator\">:</span> chess<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data <span class=\"token operator\">:</span> row<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                sum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 创建稀疏数组</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> sparse <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>sum <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    sparse<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> chess<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    sparse<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> chess<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    sparse<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> chess<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> chess<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>chess<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                sparse<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                sparse<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                sparse<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> chess<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> sparse<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>将稀疏数组存盘，转换为二维数组</p>\n<ul>\n<li>读取稀疏数组的第一行，创建原始二维数组</li>\n<li>读取后几行数据写入原始数组</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>将稀疏数组恢复为二维数组</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getChess</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> sparse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chess <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>sparse<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>sparse<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> sparse<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        chess<span class=\"token punctuation\">[</span>sparse<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>sparse<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>sparse<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> chess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>十字链表</p>\n</li>\n</ul>\n<h2 id=\"队列\"><a class=\"markdownIt-Anchor\" href=\"#队列\">#</a> 队列</h2>\n<p><em>为了防止假溢出或者假满的问题，一般将顺序队列转换为循环队列</em></p>\n<p><img data-src=\"/images/image/DataStructure/queue-01.png\" alt=\"queue-01\"></p>\n<p>当前元素：（rear-front+MAXSIZE）% MAXSIZE</p>\n<h3 id=\"数组模拟队列\"><a class=\"markdownIt-Anchor\" href=\"#数组模拟队列\">#</a> 数组模拟队列</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Queue</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">MAXSIZE</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 表示数组的最大容量</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> front<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> rear<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">;</span><span class=\"token comment\">// 该数据用于存放数据，模拟队列</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token constant\">MAXSIZE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAXSIZE</span> <span class=\"token operator\">=</span> <span class=\"token constant\">MAXSIZE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token constant\">MAXSIZE</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 判断队列是否满</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>rear <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token constant\">MAXSIZE</span> <span class=\"token operator\">==</span> front<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 判断队列是否为空</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> rear <span class=\"token operator\">==</span> front<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 添加数据到队列</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addQueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 判断队列是否满</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"队列满，不能加入数据~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 直接将数据加入</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        arr<span class=\"token punctuation\">[</span>rear<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 将 rear 后移，这里必须考虑取模</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        rear <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>rear <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token constant\">MAXSIZE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 获取队列的数据，出队列</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没有数据,队列空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">int</span> e<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>front<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        front <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>front <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token constant\">MAXSIZE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">// 显示队列的所有数据</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// 遍历</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"队列空的，没有数据~~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\">// 思路：从 front 开始遍历，遍历多少个元素 // 动脑筋</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> front<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> front <span class=\"token operator\">+</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arr[%d]=%d\\n\"</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">%</span> <span class=\"token constant\">MAXSIZE</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i <span class=\"token operator\">%</span> <span class=\"token constant\">MAXSIZE</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">// 求出当前队列有效数据的个数</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// rear = 2 // front = 1 // maxSize = 3</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>rear <span class=\"token operator\">+</span> <span class=\"token constant\">MAXSIZE</span> <span class=\"token operator\">-</span> front<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token constant\">MAXSIZE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">// 显示队列的头数据， 注意不是取出数据</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">headQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 判断</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"队列空的，没有数据~~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">[</span>front<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"单链表\"><a class=\"markdownIt-Anchor\" href=\"#单链表\">#</a> 单链表</h2>\n<h3 id=\"创建单链表\"><a class=\"markdownIt-Anchor\" href=\"#创建单链表\">#</a> 创建单链表</h3>\n<ul>\n<li>定义每个结点</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 单个节点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">HeroNode</span> next<span class=\"token punctuation\">;</span><span class=\"token comment\">// 指向下一个结点</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>no <span class=\"token operator\">=</span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"HeroNode&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token string\">\"no=\"</span> <span class=\"token operator\">+</span> no <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token string\">\", name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token string\">\", next=\"</span> <span class=\"token operator\">+</span> next <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>定义单链表</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 单链表</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SingleLink</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 定义头节点</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">HeroNode</span> head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"增删改\"><a class=\"markdownIt-Anchor\" href=\"#增删改\">#</a> 增删改</h3>\n<ul>\n<li>添加节点，往末尾追加</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加结点，不考虑编号</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode</span> heroNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 辅助结点，帮助遍历</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">HeroNode</span> temp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 遍历链表，找到最后</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 找到链表的最后</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 如果没有找到最后，将将 temp 后移</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        temp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 当退出 while 循环时，temp 就指向了链表的最后</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 将最后这个节点的 next 指向 新的节点</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    temp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> heroNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>增加节点，往指定位置</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加节点，考虑编号</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//(如果有这个排名，则添加失败，并给出提示)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addByOreder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode</span> heroNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 因为头节点不能动，因此我们仍然通过一个辅助指针 (变量) 来帮助找到添加的位置</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 因为单链表，因为我们找的 temp 是位于 添加位置的前一个节点，否则插入不了</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">HeroNode</span> temp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 默认添加的元素不存在</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>no <span class=\"token operator\">></span> heroNode<span class=\"token punctuation\">.</span>no<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>no <span class=\"token operator\">==</span> heroNode<span class=\"token punctuation\">.</span>no<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            flag<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 后移，遍历当前链表</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        temp<span class=\"token operator\">=</span>temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"改编号元素已存在\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        heroNode<span class=\"token punctuation\">.</span>next<span class=\"token operator\">=</span>temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        temp<span class=\"token punctuation\">.</span>next<span class=\"token operator\">=</span>heroNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>修改</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 修改节点的信息，根据 no 编号来修改，即 no 编号不能改</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode</span> heroNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>next<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"链表为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 找到修改节点，根据 no 编号</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 定义辅助变量</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">HeroNode</span> temp<span class=\"token operator\">=</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">boolean</span> flag<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>no<span class=\"token operator\">==</span>heroNode<span class=\"token punctuation\">.</span>no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 找到</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            flag<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        temp<span class=\"token operator\">=</span>temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        temp<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>heroNode<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没有找到该节点\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>修改</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 删除结点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">HeroNode</span> temp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>no <span class=\"token operator\">==</span> no<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">// 找到的待删除节点的前一个节点</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        temp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        temp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"要删除的 %d 节点不存在\\n\"</span><span class=\"token punctuation\">,</span> no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"求单链表有效长度的个数\"><a class=\"markdownIt-Anchor\" href=\"#求单链表有效长度的个数\">#</a> 求单链表有效长度的个数</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 求单链表的有效节点的个数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">HeroNode</span> cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"查找单链表中的倒数第k个结点\"><a class=\"markdownIt-Anchor\" href=\"#查找单链表中的倒数第k个结点\">#</a> 查找单链表中的倒数第 k 个结点</h3>\n<ul>\n<li>编写一个方法接收节点，index</li>\n<li>先将链表从头到尾遍历，得到总长度</li>\n<li>得到后从头开始遍历，若存在则取出</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 查找单链表中的倒数第 k 个结点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token function\">findLastIndex</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 第二次遍历 size-index 位置，就是我们倒数的第 K 个节点 </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 先做一个 index 的校验 </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> index <span class=\"token operator\">></span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 定义给辅助变量， for 循环定位到倒数的 </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">HeroNode</span> cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size <span class=\"token operator\">-</span> index<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"单链表的反转\"><a class=\"markdownIt-Anchor\" href=\"#单链表的反转\">#</a> 单链表的反转</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 单链表的反转</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 如果当前链表为空，或者只有一个节点，无需反转，直接返回</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 定义一个辅助的指针 (变量)，帮助我们遍历原来的链表</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">HeroNode</span> cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">HeroNode</span> next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 指向当前节点 [cur] 的下一个节点</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">HeroNode</span> reverseHead <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 遍历原来的链表，每遍历一个节点，就将其取出，并放在新的链表 reverseHead 的最前端</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        next <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span><span class=\"token comment\">// 先暂时保存当前节点的下一个节点，因为后面需要使用</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> reverseHead<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span><span class=\"token comment\">// 将 cur 的下一个节点指向新的链表的最前端</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        reverseHead<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 cur 连接到新的链表上</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        cur <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span><span class=\"token comment\">// 让 cur 后移</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"从尾到头打印单链表\"><a class=\"markdownIt-Anchor\" href=\"#从尾到头打印单链表\">#</a> 从尾到头打印单链表</h3>\n<p><em>反向遍历，用 stack 实现</em></p>\n<ul>\n<li>\n<p>方式一：先将单链表进行翻转操作，然后遍历，<em>破坏了原有链表的结构，不建议</em></p>\n</li>\n<li>\n<p>方式二：利用栈数据结构，将各个节点压入栈</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 从尾到头打印单链表</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">reversePrint</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 空链表，不能打印</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">></span></span> stack<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">HeroNode</span> cur<span class=\"token operator\">=</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cur<span class=\"token operator\">=</span>cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"合并两个有序的单链表合并之后的链表依然有序\"><a class=\"markdownIt-Anchor\" href=\"#合并两个有序的单链表合并之后的链表依然有序\">#</a> 合并两个有序的单链表，合并之后的链表依然有序</h3>\n<pre><code class=\"language-java\"></code></pre>\n<h2 id=\"双向链表\"><a class=\"markdownIt-Anchor\" href=\"#双向链表\">#</a> 双向链表</h2>\n<h2 id=\"环形链表\"><a class=\"markdownIt-Anchor\" href=\"#环形链表\">#</a> 环形链表</h2>\n<h3 id=\"约瑟夫环问题\"><a class=\"markdownIt-Anchor\" href=\"#约瑟夫环问题\">#</a> 约瑟夫环问题</h3>\n<h2 id=\"栈\"><a class=\"markdownIt-Anchor\" href=\"#栈\">#</a> 栈</h2>\n<h2 id=\"排序\"><a class=\"markdownIt-Anchor\" href=\"#排序\">#</a> 排序</h2>\n",
            "tags": [
                "计算机科学",
                "理论",
                "数据结构"
            ]
        },
        {
            "id": "http://example.com/%E5%9F%BA%E4%BA%8EMybatis%E7%9A%84log4j%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/",
            "url": "http://example.com/%E5%9F%BA%E4%BA%8EMybatis%E7%9A%84log4j%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/",
            "title": "基于Mybatis的log4j配置文件",
            "date_published": "2022-08-28T15:13:37.421Z",
            "content_html": "<h2 id=\"使用说明\"><a class=\"markdownIt-Anchor\" href=\"#使用说明\">#</a> 使用说明</h2>\n<blockquote>\n<ol>\n<li>导入 log4 的 jar 包</li>\n</ol>\n</blockquote>\n<span id=\"more\"></span>\n<pre><code class=\"language-pom\">&lt;dependency&gt;\n\t&lt;groupId&gt;log4j&lt;/groupId&gt;\n\t&lt;artifactId&gt;log4j&lt;/artifactId&gt;\n\t&lt;version&gt;1.2.17&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<blockquote>\n<ol start=\"2\">\n<li>mybatis 中设置 setting</li>\n</ol>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>settings</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> \t<span class=\"token comment\">&lt;!-- 指定 MyBatis 所用日志的具体实现，未指定时将自动查找。--></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>logImpl<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>LOG4J<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> \t<span class=\"token comment\">&lt;!-- 标准日志工厂实现 --></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> \t<span class=\"token comment\">&lt;!--&lt;setting name=\"logImpl\" value=\"STDOUT_LOGGING\"/>--></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>settings</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<ol start=\"3\">\n<li>配置 log4j 配置文件</li>\n</ol>\n</blockquote>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#将等级为 DEBUG 的日志信息输出到 console 和 file 这两个目的地，console 和 file 的定义在下 面的代码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key attr-name\">log4j.rootLogger</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">DEBUG,console,file</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#控制台输出的相关设置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key attr-name\">log4j.appender.console</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">org.apache.log4j.ConsoleAppender</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key attr-name\">log4j.appender.console.Target</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">System.out log4j.appender.console.Threshold=DEBUG</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key attr-name\">log4j.appender.console.layout</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">org.apache.log4j.PatternLayout</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key attr-name\">log4j.appender.console.layout.ConversionPattern</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">[%c]-%m%n</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#文件输出的相关设置</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token key attr-name\">log4j.appender.file</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">org.apache.log4j.RollingFileAppender</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token key attr-name\">log4j.appender.file.File</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">./log/zhao.log log4j.appender.file.MaxFileSize=10mb</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token key attr-name\">log4j.appender.file.Threshold</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">DEBUG</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token key attr-name\">log4j.appender.file.layout</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">org.apache.log4j.PatternLayout</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token key attr-name\">log4j.appender.file.layout.ConversionPattern</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#日志输出级别</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token key attr-name\">log4j.logger.org.mybatis</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">DEBUG</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token key attr-name\">log4j.logger.java.sql</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">DEBUG</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token key attr-name\">log4j.logger.java.sql.Statement</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">DEBUG</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token key attr-name\">log4j.logger.java.sql.ResultSet</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">DEBUG</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token key attr-name\">log4j.logger.java.sql.PreparedStatement</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">DEBUG</span></pre></td></tr></table></figure><blockquote>\n<ol start=\"4\">\n<li>要在使用的类中 导入包，参数设置为当前类</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserDaoTest</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<ol start=\"5\">\n<li>使用 log4j 查看输出</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"info\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"debug\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "Mybatis"
            ]
        },
        {
            "id": "http://example.com/%E5%9F%BA%E4%BA%8EJavaWeb%E7%9A%84%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/",
            "url": "http://example.com/%E5%9F%BA%E4%BA%8EJavaWeb%E7%9A%84%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/",
            "title": "基于JavaWeb的邮件发送",
            "date_published": "2022-08-28T15:13:37.415Z",
            "content_html": "<h2 id=\"前提\"><a class=\"markdownIt-Anchor\" href=\"#前提\">#</a> 前提</h2>\n<blockquote>\n<p>邮箱实现了 SMTP，POP 等服务，并且得到了有关的授权码</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"概述\"><a class=\"markdownIt-Anchor\" href=\"#概述\">#</a> 概述</h2>\n<blockquote>\n<p>使用<strong> Java</strong> 发送<strong> Email</strong> 需要 JavaMail 和 Java Activation Framework</p>\n</blockquote>\n<p>得到两个 jar 包：</p>\n<ul>\n<li>mail.jar</li>\n<li>activation.jar</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 相关 maven--></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>javax.activation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>activation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.1.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>javax.mail<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mail<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.4.7<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"使用示例\"><a class=\"markdownIt-Anchor\" href=\"#使用示例\">#</a> 使用示例</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> resp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">String</span> email <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">// 用户注册后给其发送邮件，使用线程来发送，防止出现耗时，和网站注册人数过多</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">Sendmail</span> send <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sendmail</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            send<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 注册用户</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            req<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"注册成功，发送了一封邮件给你\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            req<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestDispatcher</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"info.jsp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            req<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"注册失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            req<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestDispatcher</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index.jsp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"工具类\"><a class=\"markdownIt-Anchor\" href=\"#工具类\">#</a> 工具类</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zhao<span class=\"token punctuation\">.</span>pojo<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>mail<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>mail<span class=\"token punctuation\">.</span>internet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InternetAddress</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>mail<span class=\"token punctuation\">.</span>internet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MimeMessage</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Properties</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 网站三秒原则</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Sendmail</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  \t<span class=\"token comment\">// 设置发送邮件人的信息，以及授权码</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> from <span class=\"token operator\">=</span><span class=\"token string\">\"*****@qq.com\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span><span class=\"token string\">\"*****@qq.com\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span><span class=\"token string\">\"*****\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> host <span class=\"token operator\">=</span><span class=\"token string\">\"smtp.qq.com\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Sendmail</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>user<span class=\"token operator\">=</span>user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  \t<span class=\"token comment\">//c 重写 thread 的 run 方法</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">// 复杂文件，包含图片</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">Properties</span> prop <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            prop<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mail.host\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"smtp.qq.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 设置 qq 邮件服务器</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            prop<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mail.transport.protocol\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"smtp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 邮件发送协议</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            prop<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mail.smtp.auth\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 验证用户名密码</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">//===============qq 还得设置 ssl 加密</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token class-name\">MailSSLSocketFactory</span> sf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MailSSLSocketFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            sf<span class=\"token punctuation\">.</span><span class=\"token function\">setTrustAllHosts</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            prop<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mail.smtp.ssl.enable\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            prop<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mail.smtp.ssl.socketFactory\"</span><span class=\"token punctuation\">,</span>sf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">// 使用 JavaMail 发送邮件五步骤</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token comment\">//1. 创建定义整个应用程序所欲要的换陷阱信息 session,=============qq 才有</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token class-name\">Session</span> session <span class=\"token operator\">=</span> <span class=\"token class-name\">Session</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDefaultInstance</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Authenticator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token keyword\">protected</span> <span class=\"token class-name\">PasswordAuthentication</span> <span class=\"token function\">getPasswordAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    <span class=\"token comment\">// 发件人邮件用户名，授权码</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PasswordAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"******@qq.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"授权码\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token comment\">//2. 开启 session 的 debug 模式，查看邮件发送状态</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            session<span class=\"token punctuation\">.</span><span class=\"token function\">setDebug</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token comment\">// 通过 session 得到 transport 对象</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token class-name\">Transport</span> ts <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">getTransport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token comment\">//3. 使用用户的用户名，授权码链接</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            ts<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>username<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token comment\">//4. 创建文件</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token comment\">// 创建邮件对象</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token class-name\">MimeMessage</span> message <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MimeMessage</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token comment\">// 指名邮件的发件人</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            message<span class=\"token punctuation\">.</span><span class=\"token function\">setFrom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InternetAddress</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token comment\">// 指名邮件的收件人</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            message<span class=\"token punctuation\">.</span><span class=\"token function\">setRecipient</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Message<span class=\"token punctuation\">.</span>RecipientType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TO</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InternetAddress</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token comment\">// 邮件的标题</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            message<span class=\"token punctuation\">.</span><span class=\"token function\">setSubject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户注册邮件\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token comment\">//// 准备图片</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token comment\">//MimeBodyPart image = new MimeBodyPart();</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token comment\">//DataHandler dh = new DataHandler (new FileDataSource (\"F:\\\\IDEA\\\\workspace\\\\ 邮件发送 \\\\target\\\\classes\\\\1.png\"));</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token comment\">//image.setDataHandler(dh);</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token comment\">//image.setContentID(\"1.png\");</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token comment\">//// 准备附件</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token comment\">//MimeBodyPart bodyPart = new MimeBodyPart();</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token comment\">//bodyPart.setDataHandler (new DataHandler (new FileDataSource (\"F:\\\\IDEA\\\\workspace\\\\ 邮件发送 \\\\target\\\\classes\\\\db.properties\")));</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token comment\">//bodyPart.setFileName(\"db.properties\");</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token comment\">//// 邮件的内容</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token comment\">//MimeBodyPart text = new MimeBodyPart();</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token comment\">//text.setContent (\"这不只是一封邮件带图片 & lt;img src='cid:1.png'> 邮件\",\"text/html;charset=utf-8\");</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token comment\">//// 描述数据关系</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token comment\">//MimeMultipart mm = new MimeMultipart();</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token comment\">//mm.addBodyPart(text);</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token comment\">//mm.addBodyPart(image);</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token comment\">//mm.setSubType(\"related\");</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token comment\">//// 将这两个拼接的设置为主体</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token comment\">//MimeBodyPart contentText = new MimeBodyPart();</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token comment\">//contentText.setContent(mm);</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token comment\">//// 拼接附件</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            <span class=\"token comment\">//MimeMultipart allFile = new MimeMultipart();</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token comment\">//allFile.addBodyPart(bodyPart);</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            <span class=\"token comment\">//allFile.addBodyPart(contentText);</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token comment\">//mm.setSubType(\"mixed\");</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token class-name\">String</span> info<span class=\"token operator\">=</span><span class=\"token string\">\"恭喜您注册成功，您的用户名：\"</span><span class=\"token operator\">+</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\",您的密码：\"</span><span class=\"token operator\">+</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\",请妥善保管\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            message<span class=\"token punctuation\">.</span><span class=\"token function\">setContent</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">,</span><span class=\"token string\">\"text/html;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            message<span class=\"token punctuation\">.</span><span class=\"token function\">saveChanges</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>            <span class=\"token comment\">//5. 发送邮件</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>            ts<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">getAllRecipients</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token comment\">//6. 关闭连接</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            ts<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "邮件发送",
                "JavaWeb",
                "Email"
            ]
        },
        {
            "id": "http://example.com/%E5%9F%BA%E4%BA%8EJavaWeb%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/",
            "url": "http://example.com/%E5%9F%BA%E4%BA%8EJavaWeb%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/",
            "title": "基于JavaWeb的文件上传",
            "date_published": "2022-08-28T15:13:37.412Z",
            "content_html": "<h2 id=\"工具类\"><a class=\"markdownIt-Anchor\" href=\"#工具类\">#</a> 工具类</h2>\n<p><em>使用时 input 的 type 要设置为 file 类型</em></p>\n<blockquote>\n<ol>\n<li>创建 DiskFileItemFactory 对象，处理文件上传路径或者大小限制</li>\n</ol>\n</blockquote>\n<span id=\"more\"></span>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">DiskFileItemFactory</span> <span class=\"token function\">getDiskFileItemFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> tmpFile<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">DiskFileItemFactory</span> factory<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DiskFileItemFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 设置缓存区为 1m</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tfactory<span class=\"token punctuation\">.</span><span class=\"token function\">setSizeThreshold</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tfactory<span class=\"token punctuation\">.</span><span class=\"token function\">setRepository</span><span class=\"token punctuation\">(</span>tmpFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> factory<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<ol start=\"2\">\n<li>获取 ServletFileUpload</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">ServletFileUpload</span> <span class=\"token function\">getServletFileUpload</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DiskFileItemFactory</span> factory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">ServletFileUpload</span> upload<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ServletFileUpload</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 监听文件上传速度</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tupload<span class=\"token punctuation\">.</span><span class=\"token function\">setProgressListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ProgressListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> pBytesRead<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> pContentLength<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pItems<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"总大小：\"</span><span class=\"token operator\">+</span>pContentLength<span class=\"token operator\">+</span><span class=\"token string\">\"已上传：\"</span><span class=\"token operator\">+</span>pBytesRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 处理乱码问题</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tupload<span class=\"token punctuation\">.</span><span class=\"token function\">setHeaderEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 设置单个文件最大值</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tupload<span class=\"token punctuation\">.</span><span class=\"token function\">setFileSizeMax</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 设置总大小</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tupload<span class=\"token punctuation\">.</span><span class=\"token function\">setSizeMax</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">return</span>  upload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<ol start=\"3\">\n<li>处理上传的文件</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">uploadParseRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletFileUpload</span> upload<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> uploadPath<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">FileUploadException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">String</span> msg <span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 把前端请求解析</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FileItem</span><span class=\"token punctuation\">></span></span> fileItems <span class=\"token operator\">=</span> upload<span class=\"token punctuation\">.</span><span class=\"token function\">parseRequest</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileItem</span> fileItem <span class=\"token operator\">:</span> fileItems<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token comment\">// 判断上传的文件是普通文件还是带文件的</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fileItem<span class=\"token punctuation\">.</span><span class=\"token function\">isFormField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token class-name\">String</span> fieldName <span class=\"token operator\">=</span> fileItem<span class=\"token punctuation\">.</span><span class=\"token function\">getFieldName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> fileItem<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>fieldName<span class=\"token operator\">+</span><span class=\"token string\">\":\"</span><span class=\"token operator\">+</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token comment\">// 处理文件 ===================</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token comment\">// 拿到文件名字</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token class-name\">String</span> uploadFileName <span class=\"token operator\">=</span> fileItem<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"上传的文件名：\"</span> <span class=\"token operator\">+</span>uploadFileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>uploadFileName<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span>uploadFileName<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token comment\">// 获得上传的文件名</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token class-name\">String</span> fileName <span class=\"token operator\">=</span>uploadFileName<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>uploadFileName<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token comment\">// 获取后缀</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token class-name\">String</span> fileExtName<span class=\"token operator\">=</span>uploadFileName<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>uploadFileName<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件信息【件名：\"</span><span class=\"token operator\">+</span>fileName<span class=\"token operator\">+</span><span class=\"token string\">\"------文件类型\"</span><span class=\"token operator\">+</span>fileExtName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token comment\">// 如果后缀名不是想要的</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token comment\">// 使用 UUID 随机生成，网络传输都需要序列化</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token class-name\">String</span> uuidPath <span class=\"token operator\">=</span> <span class=\"token constant\">UUID</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token comment\">// 存放地址 =====================</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token class-name\">String</span> realPath<span class=\"token operator\">=</span>uploadPath<span class=\"token operator\">+</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">+</span>uuidPath<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token class-name\">File</span> realPathFile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>realPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>realPathFile<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    realPathFile<span class=\"token punctuation\">.</span><span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token comment\">//io 输入输出 ====================</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token class-name\">InputStream</span> inputStream <span class=\"token operator\">=</span> fileItem<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token class-name\">FileOutputStream</span> fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>realPath <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">=</span>inputStream<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    fos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                fos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                inputStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                msg<span class=\"token operator\">=</span><span class=\"token string\">\"文件上传成功\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                fileItem<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">return</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"合并\"><a class=\"markdownIt-Anchor\" href=\"#合并\">#</a> 合并</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> resp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token comment\">// 判断上传文件是普通表单还是文件类型</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">ServletFileUpload</span><span class=\"token punctuation\">.</span><span class=\"token function\">isMultipartContent</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token comment\">// 创建文件上传的真实路径，建议建在 web-inf 下，用户无法直接访问</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">String</span> uploadPath <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRealPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/WEB-INF/upload\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">File</span> uploadFile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>uploadPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>uploadFile<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                uploadFile<span class=\"token punctuation\">.</span><span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// 缓存，临时文件，假如文件超过了预期大小，把它放在一个临时文件中，过几天自动删除，或提醒用户转存</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">String</span> tmpPath <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRealPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/WEB-INF/tmp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token class-name\">File</span> tmpFile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>tmpPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>tmpFile<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                tmpFile<span class=\"token punctuation\">.</span><span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">//1. 创建 DiskFileItemFactory 对象，处理文件上传路径或者大小限制</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token class-name\">DiskFileItemFactory</span> factory<span class=\"token operator\">=</span><span class=\"token function\">getDiskFileItemFactory</span><span class=\"token punctuation\">(</span>tmpFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">//2. 获取 ServletFileUpload</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">ServletFileUpload</span> upload<span class=\"token operator\">=</span><span class=\"token function\">getServletFileUpload</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">//3. 处理上传的文件</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token class-name\">String</span> msg<span class=\"token operator\">=</span><span class=\"token function\">uploadParseRequest</span><span class=\"token punctuation\">(</span>upload<span class=\"token punctuation\">,</span>req<span class=\"token punctuation\">,</span>uploadPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">//servlet 请求转发</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            req<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">,</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            req<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestDispatcher</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"info.jsp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">IOException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">FileUploadException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Java"
            ]
        },
        {
            "id": "http://example.com/%E5%9F%BA%E4%BA%8EJavaWeb%E7%9A%84%E5%88%86%E9%A1%B5/",
            "url": "http://example.com/%E5%9F%BA%E4%BA%8EJavaWeb%E7%9A%84%E5%88%86%E9%A1%B5/",
            "title": "基于JavaWeb的分页",
            "date_published": "2022-08-28T15:13:37.408Z",
            "content_html": "<h2 id=\"limit实现分页\"><a class=\"markdownIt-Anchor\" href=\"#limit实现分页\">#</a> limit 实现分页</h2>\n<blockquote>\n<p>使用方式</p>\n</blockquote>\n<span id=\"more\"></span>\n<pre><code class=\"language-mysql\">#语法 \nSELECT * FROM table LIMIT stratIndex，pageSize \n\nSELECT * FROM table LIMIT 5,10; // 检索记录行 6-15 \n\n#为了检索从某一个偏移量到记录集的结束所有的记录行，可以指定第二个参数为 -1： \nSELECT * FROM table LIMIT 95,-1; // 检索记录行 96-last. \n\n#如果只给定一个参数，它表示返回最大的记录行数目： \nSELECT * FROM table LIMIT 5; //检索前 5 个记录行 \n\n#换句话说，LIMIT n 等价于 LIMIT 0,n。\n</code></pre>\n<blockquote>\n<ol>\n<li>修改 Mapper 文件</li>\n</ol>\n</blockquote>\n<pre><code class=\"language-xml-dtd\">&lt;select id=&quot;selectUser&quot; parameterType=&quot;map&quot; resultType=&quot;user&quot;&gt;\n\tselect * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125; \n&lt;/select&gt;\n</code></pre>\n<blockquote>\n<ol start=\"2\">\n<li>Mapper 接口，参数为 map</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 选择全部用户实现分页 List&lt;User> </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">selectUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<ol start=\"3\">\n<li>起始位置 = （当前页面 - 1 ） * 页面大小</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 分页查询，两个参数 startIndex , pageSize </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSelectUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">SqlSession</span> session <span class=\"token operator\">=</span> <span class=\"token class-name\">MybatisUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token class-name\">UserMapper</span> mapper <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> currentPage <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第几页 </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">int</span> pageSize <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 每页显示几个 Map</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"startIndex\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>currentPage<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>pageSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pageSize\"</span><span class=\"token punctuation\">,</span>pageSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectUser</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token operator\">:</span> users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"rowbounds分页\"><a class=\"markdownIt-Anchor\" href=\"#rowbounds分页\">#</a> RowBounds 分页</h2>\n<p>使用 RowBounds 在 Java 代码层面实现分页，当然此种方式作为了解即可</p>\n<blockquote>\n<ol>\n<li>修改 Mapper 文件</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 选择全部用户 RowBounds 实现分页 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getUserByRowBounds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<ol start=\"2\">\n<li>mapper 文件</li>\n</ol>\n</blockquote>\n<pre><code class=\"language-xml-dtd\">&lt;select id=&quot;getUserByRowBounds&quot; resultType=&quot;user&quot;&gt; \n\tselect * from user \n&lt;/select&gt;\n</code></pre>\n<blockquote>\n<ol start=\"3\">\n<li>需要使用 RowBounds 类</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testUserByRowBounds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">SqlSession</span> session <span class=\"token operator\">=</span> <span class=\"token class-name\">MybatisUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> currentPage <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第几页 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> pageSize <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 每页显示几个 </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token class-name\">RowBounds</span> rowBounds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RowBounds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>currentPage<span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>pageSize<span class=\"token punctuation\">,</span>pageSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 通过 session.** 方法进行传递 rowBounds，[此种方式现在已经不推荐使用了] </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.kuang.mapper.UserMapper.getUserByRowBounds\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> rowBounds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token operator\">:</span> users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tsession<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"pagehelper插件\"><a class=\"markdownIt-Anchor\" href=\"#pagehelper插件\">#</a> PageHelper 插件</h2>\n<p>官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYWdlaGVscGVyLmdpdGh1Yi5pby8=\">https://pagehelper.github.io/</span></p>\n",
            "tags": [
                "Java",
                "JavaWeb"
            ]
        },
        {
            "id": "http://example.com/VS-Code%E5%AE%89%E8%A3%85C++%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/",
            "url": "http://example.com/VS-Code%E5%AE%89%E8%A3%85C++%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/",
            "title": "VS-Code安装C++安装教程",
            "date_published": "2022-08-28T15:13:37.405Z",
            "content_html": "<h2 id=\"1下载安装vscode\"><a class=\"markdownIt-Anchor\" href=\"#1下载安装vscode\">#</a> 1. 下载安装 vscode</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20v\">https://code.visualstudio.com/</span></p>\n<span id=\"more\"></span>\n<h2 id=\"2安装编译调试环境\"><a class=\"markdownIt-Anchor\" href=\"#2安装编译调试环境\">#</a> 2. 安装编译，调试环境</h2>\n<ul>\n<li>使用 mingGW</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL21pbmd3Lm9yZy8=\">http://mingw.org/</span></li>\n<li>安装后配置环境变量，方便直接使用 gcc/g++ 等命令</li>\n</ul>\n<h2 id=\"3打开vscode\"><a class=\"markdownIt-Anchor\" href=\"#3打开vscode\">#</a> 3. 打开 VScode</h2>\n<ol>\n<li>\n<p>安装 c++ 插件</p>\n</li>\n<li>\n<p>创建工作环境文件夹</p>\n<ul>\n<li>创建.vscode 文件夹</li>\n<li>编写<strong> c_cpp_properties.json</strong>   <strong>launch.json</strong>   <strong>tasks.json</strong></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"4编辑c_cpp_properties\"><a class=\"markdownIt-Anchor\" href=\"#4编辑c_cpp_properties\">#</a> 4. 编辑 c_cpp_properties</h2>\n<p>将 &quot;includePath&quot; 与 &quot;path&quot; 替换为相对应的 mingw64 的路径</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">\"configurations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Win32\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token property\">\"includePath\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token string\">\"$&#123;workspaceRoot&#125;\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token string\">\"F:/MingGW/mingw64/include/**\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token string\">\"F:/MingGW/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     <span class=\"token string\">\"F:/MingGW/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/x86_64-w64-mingw32\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token string\">\"F:/MingGW/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/backward\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     <span class=\"token string\">\"F:/MingGW/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     <span class=\"token string\">\"F:/MingGW/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include-fixed\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     <span class=\"token string\">\"F:/MingGW/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/../../../../x86_64-w64-mingw32/include\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token property\">\"defines\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     <span class=\"token string\">\"_DEBUG\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     <span class=\"token string\">\"UNICODE\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     <span class=\"token string\">\"__GNUC__=6\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     <span class=\"token string\">\"__cdecl=__attribute__((__cdecl__))\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token property\">\"intelliSenseMode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"msvc-x64\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token property\">\"browse\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     <span class=\"token property\">\"limitSymbolsToIncludedHeaders\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     <span class=\"token property\">\"databaseFilename\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>       <span class=\"token string\">\"$&#123;workspaceRoot&#125;\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>       <span class=\"token string\">\"F:/MingGW/mingw64/include/**\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>       <span class=\"token string\">\"F:/MingGW/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>       <span class=\"token string\">\"F:/MingGW/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/x86_64-w64-mingw32\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>       <span class=\"token string\">\"F:/MingGW/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/backward\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>       <span class=\"token string\">\"F:/MingGW/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>       <span class=\"token string\">\"F:/MingGW/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/include-fixed\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>       <span class=\"token string\">\"F:/MingGW/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/../../../../x86_64-w64-mingw32/include\"</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   <span class=\"token property\">\"compilerPath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"5编辑launchjson\"><a class=\"markdownIt-Anchor\" href=\"#5编辑launchjson\">#</a> 5. 编辑 launch.json</h2>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.2.0\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">\"configurations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"(gdb) Launch\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 配置名称，将会在启动配置的下拉菜单中显示  </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cppdbg\"</span><span class=\"token punctuation\">,</span>       <span class=\"token comment\">// 配置类型，这里只能为 cppdbg  </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token property\">\"request\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"launch\"</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 请求配置类型，可以为 launch（启动）或 attach（附加）  </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token property\">\"program\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"$&#123;workspaceFolder&#125;/exe/$&#123;fileBasenameNoExtension&#125;.exe\"</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 将要进行调试的程序的路径  </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token property\">\"args\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>             <span class=\"token comment\">// 程序调试时传递给程序的命令行参数，一般设为空即可  </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token property\">\"stopAtEntry\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 设为 true 时程序将暂停在程序入口处，一般设置为 false  </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token property\">\"cwd\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"$&#123;workspaceFolder&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 调试程序时的工作目录，一般为 $&#123;workspaceFolder&#125; 即代码所在目录  </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token property\">\"environment\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token property\">\"externalConsole\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 调试时是否显示控制台窗口，一般设置为 true 显示控制台  </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token property\">\"MIMode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gdb\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token property\">\"miDebuggerPath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"F:\\\\MingGW\\\\mingw64\\\\bin\\\\gdb.exe\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//miDebugger 的路径，注意这里要与 MinGw 的路径对应  </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token property\">\"preLaunchTask\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gcc\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 调试会话开始前执行的任务，一般为编译程序，c++ 为 g++, c 为 gcc  </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token property\">\"setupCommands\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>       <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Enable pretty-printing for gdb\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>       <span class=\"token property\">\"text\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"-enable-pretty-printing\"</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>       <span class=\"token property\">\"ignoreFailures\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token punctuation\">]</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre> <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">]</span>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"6编辑tasksjson\"><a class=\"markdownIt-Anchor\" href=\"#6编辑tasksjson\">#</a> 6. 编辑 tasks.json</h2>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2.0.0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">\"tasks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"shell\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gcc\"</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 修改此项</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token comment\">//\"command\": \"F:\\\\MingGW\\\\mingw64\\\\bin\\\\gcc.exe\",</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token property\">\"command\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gcc\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token property\">\"args\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token string\">\"-g\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     <span class=\"token string\">\"$&#123;file&#125;\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     <span class=\"token string\">\"-o\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     <span class=\"token string\">\"$&#123;workspaceFolder&#125;/exe/$&#123;fileBasenameNoExtension&#125;.exe\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token property\">\"options\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     <span class=\"token property\">\"cwd\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"F:\\\\MingGW\\\\mingw64\\\\bin\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token property\">\"problemMatcher\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     <span class=\"token string\">\"$gcc\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token property\">\"group\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"build\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>tasks 中的 label 与 launch.json 中的 preLaunchTask 相对应</strong></p>\n<h2 id=\"7运行第一个cc程序\"><a class=\"markdownIt-Anchor\" href=\"#7运行第一个cc程序\">#</a> 7. 运行第一个 c++/c 程序</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 防止 VScode 代码运行成功后自动关闭</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Vs-code",
                "C++"
            ]
        },
        {
            "id": "http://example.com/Spring%E4%BA%8B%E5%8A%A1%E5%B1%9E%E6%80%A7/",
            "url": "http://example.com/Spring%E4%BA%8B%E5%8A%A1%E5%B1%9E%E6%80%A7/",
            "title": "Spring中事务属性",
            "date_published": "2022-08-28T15:13:37.401Z",
            "content_html": "<h2 id=\"事务属性\"><a class=\"markdownIt-Anchor\" href=\"#事务属性\">#</a> 事务属性</h2>\n<blockquote>\n<p>种类：传播行为，隔离级别，只读，事务超时</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"传播行为\"><a class=\"markdownIt-Anchor\" href=\"#传播行为\">#</a> 传播行为</h2>\n<blockquote>\n<p><em>定义了被调用方法的事务边界</em></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>传播行为</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>PROPAGATION_MANDATORY</td>\n<td>一定要有事务，没有事务就抛出异常</td>\n</tr>\n<tr>\n<td>PROPAGATION_NESTED</td>\n<td>表示如果当前事务存在，则方法应该运行在一个嵌套事务中。</td>\n</tr>\n<tr>\n<td>PROPAGATION_NEVER</td>\n<td>表示方法不能运行在一个事务中，否则抛出异常</td>\n</tr>\n<tr>\n<td>PROPAGATION_NOT_SUPPORTED</td>\n<td>不支持事物，如果存在事物就挂起</td>\n</tr>\n<tr>\n<td>PROPAGATION_REQUIRED</td>\n<td>表示当前方法必须运行在一个事务中，如果当前存在一个事务，那么该方法运行在这个事务中，否则，将创建一个新的事务</td>\n</tr>\n<tr>\n<td>PROPAGATION_REQUIRES_NEW</td>\n<td>表示当前方法必须运行在自己的事务中，如果当前存在一个事务，那么这个事务将在该方法运行期间被挂起</td>\n</tr>\n<tr>\n<td>PROPAGATION_SUPPORTS</td>\n<td>表示当前方法不需要运行在一个是事务中，但如果有一个事务已经存在，该方法也可以运行在这个事务中</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"隔离级别\"><a class=\"markdownIt-Anchor\" href=\"#隔离级别\">#</a> 隔离级别</h2>\n<blockquote>\n<p>在操作数据时可能带来 3 个副作用：分别是脏读、不可重复读、幻读。</p>\n<p>SQL 语句中定义了 4 种隔离级别，分别是未提交读、已提交读、可重复读、可序列化。</p>\n<p>而在 spring 事务中提供了 5 种隔离级别来对应在 SQL 中定义的 4 种隔离级别，</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ISOLATION_DEFAULT</td>\n<td>使用后端数据库默认的隔离级别</td>\n</tr>\n<tr>\n<td>ISOLATION_READ_UNCOMMITTED</td>\n<td>允许读取未提交的数据（对应未提交读），可能导致脏读、不可重复读、幻读</td>\n</tr>\n<tr>\n<td>ISOLATION_READ_COMMITTED</td>\n<td>允许在一个事务中读取另一个已经提交的事务中的数据（对应已提交读）。可以避免脏读，但是无法避免不可重复读和幻读</td>\n</tr>\n<tr>\n<td>ISOLATION_REPEATABLE_READ</td>\n<td>一个事务不可能更新由另一个事务修改但尚未提交（回滚）的数据（对应可重复读）。可以避免脏读和不可重复读，但无法避免幻读</td>\n</tr>\n<tr>\n<td>ISOLATION_SERIALIZABLE</td>\n<td>这种隔离级别是所有的事务都在一个执行队列中，依次顺序执行，而不是并行（对应可序列化）。可以避免脏读、不可重复读、幻读。但是这种隔离级别效率很低，因此，除非必须，否则不建议使用。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"只读\"><a class=\"markdownIt-Anchor\" href=\"#只读\">#</a> 只读</h2>\n<p>如果在一个事务中所有关于数据库的操作都是只读的，也就是说，这些操作只读取数据库中的数据，而并不更新数据，那么应将事务设为只读模式（ READ_ONLY_MARKER ） , 这样更有利于数据库进行优化 。</p>\n<p>因为只读的优化措施是事务启动后由数据库实施的，因此，只有将那些具有可能启动新事务的传播行为 (PROPAGATION_NESTED 、 PROPAGATION_REQUIRED 、 PROPAGATION_REQUIRED_NEW) 的方法的事务标记成只读才有意义。</p>\n<p>如果使用 Hibernate 作为持久化机制，那么将事务标记为只读后，会将 Hibernate 的 flush 模式设置为 FULSH_NEVER, 以告诉 Hibernate 避免和数据库之间进行不必要的同步，并将所有更新延迟到事务结束。</p>\n<h2 id=\"事务延时\"><a class=\"markdownIt-Anchor\" href=\"#事务延时\">#</a> 事务延时</h2>\n<p>如果一个事务长时间运行，这时为了尽量避免浪费系统资源，应为这个事务设置一个有效时间，使其等待数秒后自动回滚。与设置 “只读” 属性一样，事务有效属性也需要给那些具有可能启动新事物的传播行为的方法的事务标记成只读才有意义。</p>\n",
            "tags": [
                "Spring"
            ]
        },
        {
            "id": "http://example.com/Resource%E8%B5%84%E6%BA%90%E6%89%BE%E4%B8%8D%E5%88%B0%E9%97%AE%E9%A2%98/",
            "url": "http://example.com/Resource%E8%B5%84%E6%BA%90%E6%89%BE%E4%B8%8D%E5%88%B0%E9%97%AE%E9%A2%98/",
            "title": "Resource资源找不到问题",
            "date_published": "2022-08-28T15:13:37.396Z",
            "content_html": "<blockquote>\n<p>在 maven 的 pom 中进行配置</p>\n</blockquote>\n<span id=\"more\"></span>\n<pre><code>&lt;build&gt;\n        &lt;resources&gt;\n            &lt;!--解决资源导出失败的问题--&gt;\n            &lt;resource&gt;\n                &lt;directory&gt;src/main/resources&lt;/directory&gt;\n                &lt;includes&gt;\n                    &lt;include&gt;**/*.properties&lt;/include&gt;\n                    &lt;include&gt;**/*.xml&lt;/include&gt;\n                &lt;/includes&gt;\n                &lt;filtering&gt;true&lt;/filtering&gt;\n            &lt;/resource&gt;\n            &lt;resource&gt;\n                &lt;directory&gt;src/main/java&lt;/directory&gt;\n                &lt;includes&gt;\n                    &lt;include&gt;**/*.properties&lt;/include&gt;\n                    &lt;include&gt;**/*.xml&lt;/include&gt;\n                &lt;/includes&gt;\n                &lt;filtering&gt;true&lt;/filtering&gt;\n            &lt;/resource&gt;\n        &lt;/resources&gt;\n    &lt;/build&gt;\n</code></pre>\n",
            "tags": [
                "Java",
                "JavaWeb",
                "Maven"
            ]
        },
        {
            "id": "http://example.com/MySQL%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE%EF%BC%88%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%89%88%E6%9C%AC%EF%BC%89/",
            "url": "http://example.com/MySQL%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE%EF%BC%88%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%89%88%E6%9C%AC%EF%BC%89/",
            "title": "MySQL的安装与配置（命令行版本）",
            "date_published": "2022-08-28T15:13:37.393Z",
            "content_html": "<h2 id=\"1官网下载\"><a class=\"markdownIt-Anchor\" href=\"#1官网下载\">#</a> 1. 官网下载</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2Rvd25sb2Fkcy9teXNxbC8=\">https://dev.mysql.com/downloads/mysql/</span></p>\n<span id=\"more\"></span>\n<p><img data-src=\"https://img-blog.csdnimg.cn/0040afa5479a4654ad27a4bb691422c3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXFfNDU4ODA2NDg=,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"请添加图片描述\"></p>\n<h2 id=\"2解压\"><a class=\"markdownIt-Anchor\" href=\"#2解压\">#</a> 2. 解压</h2>\n<h2 id=\"3配置环境变量\"><a class=\"markdownIt-Anchor\" href=\"#3配置环境变量\">#</a> 3. 配置环境变量</h2>\n<p><img data-src=\"https://img-blog.csdnimg.cn/433c77fb17bd4e14b2ec6f098f02b09e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAemhk4oCm4oCm,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\" alt=\"在这里插入图片描述\"><br>\n<img data-src=\"https://img-blog.csdnimg.cn/5a8ce787428a4430b7e01bf96a98fbc7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAemhk4oCm4oCm,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\" alt=\"在这里插入图片描述\"><br>\n在 path 下添加 mysql 路径：<br>\nF:\\mysql-8.0.27-winx64\\bin</p>\n<h2 id=\"4编写myini\"><a class=\"markdownIt-Anchor\" href=\"#4编写myini\">#</a> 4. 编写 my.ini</h2>\n<pre><code>[mysqld]\n#设置3306端口\nport=3306\n#设置mysql的安装目录\nbasedir=F:\\mysql-8.0.27-winx64\n#设置mysql数据库的数据的存放目录\ndatadir=F:\\mysql-8.0.27-winx64\\Data\n#允许最大连接数\nmax_connections=200\n#允许连接失败的次数。\nmax_connect_errors=10\n#服务端使用的字符集默认为utf8mb4\ncharacter-set-server=utf8mb4\n#创建新表时将使用的默认存储引擎\ndefault-storage-engine=INNODB\n#默认使用“mysql_native_password”插件认证\n#mysql_native_password\ndefault_authentication_plugin=mysql_native_password\n[mysql]\n#设置mysql客户端默认字符集\ndefault-character-set=utf8mb4\n[client]\n#设置mysql客户端连接服务端时默认使用的端口\nport=3306\ndefault-character-set=utf8mb4\n\n</code></pre>\n<h2 id=\"5生成data文件\"><a class=\"markdownIt-Anchor\" href=\"#5生成data文件\">#</a> 5. 生成 data 文件</h2>\n<p>在安装的 MySQL 的 bin 下 管理员方式运行命令提示符</p>\n<pre><code>mysqld --initialize --console\n</code></pre>\n<p>执行过后找到 A temporary password is generated for root@localhost: 这句，localhost 后面就是自己的初始化密码</p>\n<h2 id=\"6安装mysql服务\"><a class=\"markdownIt-Anchor\" href=\"#6安装mysql服务\">#</a> 6. 安装 MySQL 服务</h2>\n<pre><code>mysqld -install\n</code></pre>\n<h2 id=\"7启动服务\"><a class=\"markdownIt-Anchor\" href=\"#7启动服务\">#</a> 7. 启动服务</h2>\n<pre><code>net start mysql\n</code></pre>\n<h2 id=\"8登录\"><a class=\"markdownIt-Anchor\" href=\"#8登录\">#</a> 8. 登录</h2>\n<pre><code>mysql -u root -p\n</code></pre>\n<p>提示需要密码，使用初始化密码</p>\n<h2 id=\"9修改密码\"><a class=\"markdownIt-Anchor\" href=\"#9修改密码\">#</a> 9. 修改密码</h2>\n<pre><code>ALTER USER 'username'@'localhost' identified with mysql_native_password by '123456';\n</code></pre>\n",
            "tags": [
                "Mysql"
            ]
        },
        {
            "id": "http://example.com/arithmetic/LeetCode-169%E5%A4%9A%E6%95%B0%E4%B9%8B%E5%92%8C/",
            "url": "http://example.com/arithmetic/LeetCode-169%E5%A4%9A%E6%95%B0%E4%B9%8B%E5%92%8C/",
            "title": "LeetCode-169多数之和",
            "date_published": "2022-08-28T15:13:37.390Z",
            "content_html": "<blockquote>\n<p>给定一个大小为  <code>n</code>  的数组  <code>nums</code>  ，返回其中的多数元素。多数元素是指在数组中出现次数 <strong>大于</strong>  <code>⌊ n/2 ⌋</code>  的元素。</p>\n</blockquote>\n<span id=\"more\"></span>",
            "tags": [
                "算法",
                "LeetCode",
                "LeetCode"
            ]
        },
        {
            "id": "http://example.com/arithmetic/LeetCode-136%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/",
            "url": "http://example.com/arithmetic/LeetCode-136%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/",
            "title": "LeetCode-136只出现一次的数字",
            "date_published": "2022-08-28T15:13:37.387Z",
            "content_html": "<blockquote>\n<p>给定一个<strong>非空</strong>整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>\n</blockquote>\n<p><em>不使用额外空间</em></p>\n<span id=\"more\"></span>\n<ul>\n<li>\n<p>若不考虑时间，空间复杂度</p>\n<ul>\n<li>使用集合存储数字，遍历数组中的每个元素，若没有则加入，若存在，则从集合中删除</li>\n<li>使用哈希表存储每个数字和该数字出现的次数，遍历哈希表，得到只出现一次的数字</li>\n<li>使用集合存储数组中出现的数字，并计算数组的元素之和，集合中保证保证元素无重复，集合的元素之和 * 2 - 数组元素之和即为单个不重复元素</li>\n</ul>\n</li>\n<li>\n<p>方法二：采用异或的方式</p>\n<ul>\n<li>任何数和 0 异或运算，结果仍然是它本身</li>\n<li>任何数与自身做异或运算，结果仍然是零</li>\n<li>异或运算满足结合律交换律</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> single<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        single<span class=\"token operator\">^=</span>num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> single<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n",
            "tags": [
                "算法",
                "LeetCode",
                "LeetCode"
            ]
        },
        {
            "id": "http://example.com/arithmetic/LeetCode-121%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/",
            "url": "http://example.com/arithmetic/LeetCode-121%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/",
            "title": "LeetCode-121买卖股票的最佳时机",
            "date_published": "2022-08-28T15:13:37.381Z",
            "content_html": "<blockquote>\n<p>给定一个数组  <code>prices</code>  ，它的第  <code>i</code>  个元素  <code>prices[i]</code>  表示一支给定股票第  <code>i</code>  天的价格。</p>\n</blockquote>\n<p><em>只能选择 <strong>某一天</strong> 买入这只股票，并选择在 <strong>未来的某一个不同的日子</strong> 卖出</em></p>\n<span id=\"more\"></span>\n<ul>\n<li>\n<p>方法一：暴力破解，会超时</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxProfit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> prices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> maxprofit <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> prices<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> prices<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> \t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">int</span> profit <span class=\"token operator\">=</span> prices<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>profit <span class=\"token operator\">></span> maxprofit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                maxprofit <span class=\"token operator\">=</span> profit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> maxprofit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>方法二：</p>\n<ul>\n<li>记录【今天之前买入的最小值】</li>\n<li>计算【今天之前最小值买入，今天卖出的获利】，也即【今天卖出的最大获利】</li>\n<li>比较【每天的最大获利】，取最大值即可</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxProfit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> prices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>prices<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> min <span class=\"token operator\">=</span> prices<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> prices<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        max <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span> prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        min <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">,</span> prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n",
            "tags": [
                "算法",
                "LeetCode",
                "LeetCode"
            ]
        },
        {
            "id": "http://example.com/arithmetic/LeetCode-119%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92II/",
            "url": "http://example.com/arithmetic/LeetCode-119%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92II/",
            "title": "LeetCode-119杨辉三角II",
            "date_published": "2022-08-28T15:13:37.378Z",
            "content_html": "<blockquote>\n<p>给定一个非负索引  <code>rowIndex</code> ，返回「杨辉三角」的第  <code>rowIndex</code>  行。</p>\n</blockquote>\n<p><em>在「杨辉三角」中，每个数是它左上方和右上方的数的和</em></p>\n<span id=\"more\"></span>\n<ul>\n<li>\n<p>方法一：暴力破解，求出前 n 行的杨辉三角存入二维列表，后直接取值</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getRow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rowIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> lists <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayLi</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> rowIndex<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span>i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>j<span class=\"token operator\">==</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">else</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>lists<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>g</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        lists<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> lists<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>rowIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>优化：对第  <code>i+1</code>  行的计算仅用到了第  <code>i</code>  行的数据，因此可以使用<strong>滚动数组</strong>的思想优化空间复杂度</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getRow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rowIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> pre <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> rowIndex<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> cur <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> i<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> j <span class=\"token operator\">==</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                cur<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                cur<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pre<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        pre <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>优化：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getRow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rowIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> row <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    row<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> rowIndex<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        row<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            row<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> row<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> row<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>方法二：线性递推</p>\n<p><img data-src=\"/images/image/LeetCode/119.png\" alt=\"119\"></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getRow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rowIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> row <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    row<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> rowIndex<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        row<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> row<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>rowIndex <span class=\"token operator\">-</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> row<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n",
            "tags": [
                "算法",
                "LeetCode",
                "LeetCode"
            ]
        },
        {
            "id": "http://example.com/arithmetic/LeetCode-118%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/",
            "url": "http://example.com/arithmetic/LeetCode-118%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/",
            "title": "LeetCode-118杨辉三角",
            "date_published": "2022-08-28T15:13:37.376Z",
            "content_html": "<blockquote>\n<p>给定一个非负整数 * <code>numRows</code> ，* 生成「杨辉三角」的前 <em> <code>numRows</code> </em> 行</p>\n</blockquote>\n<span id=\"more\"></span>\n<ul>\n<li>\n<p>方法一：从第三层开始，每层除去第一个与最后一个元素剩下的值根据上层对应下表来计算</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> numRows<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> lists <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> numRows<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span>i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>j<span class=\"token operator\">==</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>             list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">else</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>lists<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> lists<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        lists<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> lists<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>方法二：</p>\n</li>\n</ul>\n",
            "tags": [
                "算法",
                "LeetCode",
                "LeetCode"
            ]
        }
    ]
}