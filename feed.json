{
    "version": "https://jsonfeed.org/version/1",
    "title": "melt",
    "subtitle": "",
    "icon": "http://example.com/images/favicon.ico",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/language/Vue/",
            "url": "http://example.com/language/Vue/",
            "title": "",
            "date_published": "2022-09-25T07:03:29.472Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "http://example.com/language/JavaScript/",
            "url": "http://example.com/language/JavaScript/",
            "title": "JavaScript语法基础",
            "date_published": "2022-09-25T07:03:16.883Z",
            "content_html": "<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h2>\n<p><em>脚本语言，逐行读取代码，编写的位置不同，加载顺序不同</em></p>\n<ul>\n<li>\n<p>轻量级的编程语言</p>\n</li>\n<li>\n<p>可插入 HTML 实现</p>\n</li>\n<li>\n<p>直接写入 HTML 输出流</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;h1>这是一个JavaScript&lt;/h1>\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 如果在文档加载后使用这个方法，会覆盖掉整个方法</span></pre></td></tr></table></figure><ul>\n<li>对事件的反应</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>在HTML中使用</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>欢迎<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    点我</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li>改变 HTML 的内容</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>x<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementBtId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 查找元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>x<span class=\"token punctuation\">.</span>innerHTML<span class=\"token operator\">=</span><span class=\"token string\">\"Hello JavaScript\"</span> <span class=\"token comment\">// 改变内容</span></pre></td></tr></table></figure><ul>\n<li>改变 HTML 图像</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//点亮灯泡</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">changeImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    element<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myimage'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bulbon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\telement<span class=\"token punctuation\">.</span>src<span class=\"token operator\">=</span><span class=\"token string\">\"/images/pic_bulboff.gif\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        element<span class=\"token punctuation\">.</span>src<span class=\"token operator\">=</span><span class=\"token string\">\"/images/pic_bulbon.gif\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">loading</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lazy<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myimage<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">changeImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/images/pic_bulboff.gif<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>180<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">&lt;!-- src 属性的值有没有包含 bulbon 这个字符串，如果存在字符串 bulbon，图片 src 更新为 bulboff.gif，若匹配不到 bulbon 字符串，src 则更新为 bulbon.gif</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>--></span></pre></td></tr></table></figure><ul>\n<li>改变 HTML 样式</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>x<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 找到元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>x<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color<span class=\"token operator\">=</span><span class=\"token string\">\"#ff0000\"</span> <span class=\"token comment\">// 改变样式</span></pre></td></tr></table></figure><ul>\n<li>验证用户的输入</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNan</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">||</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(^\\s*)|(\\s*$)</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不是数字哦\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"注意事项\"><a class=\"markdownIt-Anchor\" href=\"#注意事项\">#</a> 注意事项</h2>\n<p><strong>添加位置</strong>：</p>\n<ul>\n<li><code>body</code>  中的 <code>script</code></li>\n<li><code>head</code>  中的 <code>script</code></li>\n<li>引入外部的 <code>js</code></li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myScript.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><em>Chrome 的 F12 控制台可以运行 JS，或者 <code>Sources</code>  下面的 <code>Snippet</code>  新建 JS 文件</em></p>\n<h2 id=\"输出\"><a class=\"markdownIt-Anchor\" href=\"#输出\">#</a> 输出</h2>\n<ul>\n<li>使用 <code>windows.alert()</code>  弹出警告框</li>\n<li>使用 <code>document.write()</code>  将内容写道 HTML 文档中</li>\n<li>使用 <code>innerHTML</code>  写入到 HTML 元素</li>\n<li>使用 <code>console.log()</code>  写入到浏览器的控制台</li>\n</ul>\n<h2 id=\"数据类型\"><a class=\"markdownIt-Anchor\" href=\"#数据类型\">#</a> 数据类型</h2>\n<ul>\n<li>值传递（基本类型）：字符串 <code>String</code> ，数字 <code>Number</code> ，布尔 <code>Boolean</code> ，空 <code>Null</code> ，未定义 <code>Undefined</code> ， <code>symbol</code></li>\n<li>引用传递：对象 <code>Object</code> ，数组 <code>Array</code> ，函数 <code>Function</code> ，正则 <code>RegExp</code> ，日期 <code>Date</code></li>\n</ul>\n<p><strong>Symbol 是 ES6 引入了一种新的原始数据类型，表示独一无二的值。</strong></p>\n<blockquote>\n<p>可以使用  <code>typeof</code>  查看数据类型</p>\n</blockquote>\n<p>声明新变量时，可以使用关键词 “new” 来声明其类型：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> carname<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> x<span class=\"token operator\">=</span>      <span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> y<span class=\"token operator\">=</span>      <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> cars<span class=\"token operator\">=</span>   <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> person<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"语法\"><a class=\"markdownIt-Anchor\" href=\"#语法\">#</a> 语法</h2>\n<h3 id=\"常用字面量\"><a class=\"markdownIt-Anchor\" href=\"#常用字面量\">#</a> 常用字面量</h3>\n<ul>\n<li>数字字面量，包含科学计数法，小数</li>\n<li>字符串字面量</li>\n<li>表达式字面量</li>\n<li>数组字面量</li>\n<li>对象字面量（相当于字典）</li>\n<li>函数字面量</li>\n</ul>\n<h3 id=\"常用语法\"><a class=\"markdownIt-Anchor\" href=\"#常用语法\">#</a> 常用语法</h3>\n<ol>\n<li>使用关键字 <code>var</code>  来存储变量</li>\n<li>语句是分号隔开</li>\n<li>单行注释使用 ----&gt;  <code>//</code></li>\n<li>多行注释 —&gt;  <code>/*...*/</code></li>\n<li><em>数字加字符串会返回字符串</em></li>\n<li>使用 Unicode 字符集</li>\n<li>使用反斜杠对文本字符进行拆行 —&gt;   <code>\\</code></li>\n</ol>\n<h3 id=\"变量\"><a class=\"markdownIt-Anchor\" href=\"#变量\">#</a> 变量</h3>\n<blockquote>\n<p>命名规范</p>\n</blockquote>\n<ul>\n<li>变量必须以字母开头</li>\n<li>变量也能以 $ 和_符号开头（不推荐）</li>\n<li>大小写敏感</li>\n</ul>\n<blockquote>\n<p>使用技巧</p>\n</blockquote>\n<ul>\n<li><code>const</code>  表示常量关键字，初始化后值不可再修改</li>\n<li>可以一条语句多个变量， <code>var</code>  开头，逗号分离变量</li>\n</ul>\n<blockquote>\n<p>ES6</p>\n</blockquote>\n<ul>\n<li>2015 以前，使用 <code>var</code>  关键字，只有<strong>全局变量</strong>和<strong>局部变量</strong></li>\n<li>2015 年以后，允许使用 <code>const</code>  定义常量，使用 <code>let</code>  作为块级作用域，只能在 {} 中访问</li>\n</ul>\n<blockquote>\n<p>HTML 使用全局变量</p>\n</blockquote>\n<ul>\n<li>在 JavaScript 中，全局作用域是针对 JavaScript 环境</li>\n<li>在 HTML 中，全局作用域是针对 window 对象</li>\n<li>使用 <strong>var</strong> 关键字声明的全局作用域变量属于 window 对象</li>\n<li>使用 <strong>let</strong> 关键字声明的全局作用域变量不属于 window 对象</li>\n<li>在相同的作用域或块级作用域中，不能使用 <strong>let</strong> 关键字来重置 <strong>var</strong> 关键字声明的变量</li>\n<li>在相同的作用域或块级作用域中，不能使用 <strong>let</strong> 关键字来重置 <strong>let</strong> 关键字声明的变量</li>\n<li>在相同的作用域或块级作用域中，不能使用 <strong>var</strong> 关键字来重置 <strong>let</strong> 关键字声明的变量</li>\n<li><strong>let</strong> 关键字在不同作用域，或不同块级作用域中是可以重新声明赋值的</li>\n<li>** <code>var</code> ** 变量可以在使用后声明</li>\n<li>只有<strong>声明的变量会提升</strong>，<strong>初始化的不会</strong></li>\n</ul>\n<blockquote>\n<p>并非真正的常量</p>\n</blockquote>\n<ul>\n<li>const 的本质：定义了一个常量引用一个值</li>\n<li>const 定义的<strong>对象</strong>或<strong>数组</strong>，是<strong>可变的</strong>，可修改，但不能重新赋值</li>\n</ul>\n<blockquote>\n<p>变量的生存期</p>\n</blockquote>\n<p>从它们被声明的时间开始，全局变量会在页面关闭后删除</p>\n<p><strong>如果变量在函数内没有声明（没有使用 var 关键字），该变量为全局变量</strong></p>\n<h2 id=\"undefined和null的区别\"><a class=\"markdownIt-Anchor\" href=\"#undefined和null的区别\">#</a> undefined 和 null 的区别</h2>\n<ol>\n<li>定义：\n<ol>\n<li>undefined：是所有没有赋值变量的默认值，自动赋值。</li>\n<li>null：主动释放一个变量引用的对象，表示一个变量不再指向任何对象地址。</li>\n</ol>\n</li>\n<li>何时使用 null\n<ol>\n<li>当使用完一个比较大的对象时，需要对其进行释放内存时，设置为 null</li>\n</ol>\n</li>\n<li>异同点\n<ol>\n<li><strong>共同点</strong>：都是原始类型，保存在栈中变量本地</li>\n<li><strong>不同点</strong>：undefined—— 表示变量声明过但并未赋过值</li>\n<li>null—— 表示一个变量将来可能指向一个对象</li>\n</ol>\n</li>\n<li>延伸 —— 垃圾回收站</li>\n</ol>\n<h2 id=\"类型转换\"><a class=\"markdownIt-Anchor\" href=\"#类型转换\">#</a> 类型转换</h2>\n<h3 id=\"constructor属性\"><a class=\"markdownIt-Anchor\" href=\"#constructor属性\">#</a> constructor 属性</h3>\n<p><em>返回所有变量的构造函数</em></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">.</span>constructor                 <span class=\"token comment\">// 返回函数 String ()  &#123; [native code] &#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor                 <span class=\"token comment\">// 返回函数 Number ()  &#123; [native code] &#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token boolean\">false</span><span class=\"token punctuation\">.</span>constructor                  <span class=\"token comment\">// 返回函数 Boolean () &#123; [native code] &#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>constructor              <span class=\"token comment\">// 返回函数 Array ()   &#123; [native code] &#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">34</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span>constructor  <span class=\"token comment\">// 返回函数 Object ()  &#123; [native code] &#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor             <span class=\"token comment\">// 返回函数 Date ()    &#123; [native code] &#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span>constructor         <span class=\"token comment\">// 返回函数 Function ()&#123; [native code] &#125;</span></pre></td></tr></table></figure><h2 id=\"正则表达式\"><a class=\"markdownIt-Anchor\" href=\"#正则表达式\">#</a> 正则表达式</h2>\n<h3 id=\"使用test\"><a class=\"markdownIt-Anchor\" href=\"#使用test\">#</a> 使用 test ()</h3>\n<p>用于检测一个字符串是否匹配某个模式，如果字符串中含有匹配的文本，则返回 true，否则返回 false。</p>\n<h3 id=\"使用-exec\"><a class=\"markdownIt-Anchor\" href=\"#使用-exec\">#</a> 使用 exec ()</h3>\n<p>用于检索字符串中的正则表达式的匹配。</p>\n<p>该函数返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。</p>\n<h2 id=\"调试\"><a class=\"markdownIt-Anchor\" href=\"#调试\">#</a> 调试</h2>\n<ul>\n<li>console.log()</li>\n<li>dubugger 关键字</li>\n</ul>\n<h2 id=\"严格模式\"><a class=\"markdownIt-Anchor\" href=\"#严格模式\">#</a> 严格模式</h2>\n<p><em>表示严格模式下不能使用未声明的变量</em></p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>严格模式通过在脚本或函数的头部添加 use strict; 表达式来声明</pre></td></tr></table></figure><h2 id=\"验证api\"><a class=\"markdownIt-Anchor\" href=\"#验证api\">#</a> 验证 API</h2>\n<h3 id=\"约束验证dom方法\"><a class=\"markdownIt-Anchor\" href=\"#约束验证dom方法\">#</a> 约束验证 DOM 方法</h3>\n<ul>\n<li><code>checkValidity()</code> ：会检查元素是否有任何输入约束条件，并且检查值是否符合约束条件。 如果值是不符合约束条件的，浏览器就会在该元素上触发一个可以撤销的 invalid 事件</li>\n<li><code>setCustomValidity()</code> ：设置 input 元素的  <code>validationMessage</code>  属性，用于自定义错误提示信息的方法。</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>input id=\"id1\" type=\"number\" min=\"100\" max=\"300\" required></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>验证<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>demo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">var</span> inpObj <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inpObj<span class=\"token punctuation\">.</span><span class=\"token function\">checkValidity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> inpObj<span class=\"token punctuation\">.</span>validationMessage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"约束验证dom属性\"><a class=\"markdownIt-Anchor\" href=\"#约束验证dom属性\">#</a> 约束验证 DOM 属性</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">validity</td>\n<td style=\"text-align:left\">布尔属性值，返回 input 输入值是否合法</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">validationMessage</td>\n<td style=\"text-align:left\">浏览器错误提示信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">willValidate</td>\n<td style=\"text-align:left\">指定 input 是否需要验证</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>Validity 属性</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>customError</td>\n<td>设置为 true, 如果设置了自定义的 validity 信息。</td>\n</tr>\n<tr>\n<td>patternMismatch</td>\n<td>设置为 true, 如果元素的值不匹配它的模式属性。</td>\n</tr>\n<tr>\n<td>rangeOverflow</td>\n<td>设置为 true, 如果元素的值大于设置的最大值。</td>\n</tr>\n<tr>\n<td>rangeUnderflow</td>\n<td>设置为 true, 如果元素的值小于它的最小值。</td>\n</tr>\n<tr>\n<td>stepMismatch</td>\n<td>设置为 true, 如果元素的值不是按照规定的 step 属性设置。</td>\n</tr>\n<tr>\n<td>tooLong</td>\n<td>设置为 true, 如果元素的值超过了 maxLength 属性设置的长度。</td>\n</tr>\n<tr>\n<td>typeMismatch</td>\n<td>设置为 true, 如果元素的值不是预期相匹配的类型。</td>\n</tr>\n<tr>\n<td>valueMissing</td>\n<td>设置为 true，如果元素 (required 属性) 没有值。</td>\n</tr>\n<tr>\n<td>valid</td>\n<td>设置为 true，如果元素的值是合法的。</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  x<span class=\"token punctuation\">.</span><span class=\"token function\">setCustomValidity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 使用前先取消自定义，否则下次点击 checkValidity 总返 false</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">checkValidity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    x<span class=\"token punctuation\">.</span><span class=\"token function\">setCustomValidity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"错误\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>validationMessage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    x<span class=\"token punctuation\">.</span><span class=\"token function\">setCustomValidity</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"正确\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>validationMessage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"保留关键字\"><a class=\"markdownIt-Anchor\" href=\"#保留关键字\">#</a> 保留关键字</h2>\n<p><em> <code>Javascript</code>  的保留关键字不可以用作变量、标签或者函数名。有些保留关键字是作为  <code>Javascript </code> 以后扩展使用</em></p>\n<table>\n<thead>\n<tr>\n<th>abstract</th>\n<th>arguments</th>\n<th>boolean</th>\n<th>break</th>\n<th>byte</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>case</td>\n<td>catch</td>\n<td>char</td>\n<td>class*</td>\n<td>const</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>debugger</td>\n<td>default</td>\n<td>delete</td>\n<td>do</td>\n</tr>\n<tr>\n<td>double</td>\n<td>else</td>\n<td>enum*</td>\n<td>eval</td>\n<td>export*</td>\n</tr>\n<tr>\n<td>extends*</td>\n<td>false</td>\n<td>final</td>\n<td>finally</td>\n<td>float</td>\n</tr>\n<tr>\n<td>for</td>\n<td>function</td>\n<td>goto</td>\n<td>if</td>\n<td>implements</td>\n</tr>\n<tr>\n<td>import*</td>\n<td>in</td>\n<td>instanceof</td>\n<td>int</td>\n<td>interface</td>\n</tr>\n<tr>\n<td>let</td>\n<td>long</td>\n<td>native</td>\n<td>new</td>\n<td>null</td>\n</tr>\n<tr>\n<td>package</td>\n<td>private</td>\n<td>protected</td>\n<td>public</td>\n<td>return</td>\n</tr>\n<tr>\n<td>short</td>\n<td>static</td>\n<td>super*</td>\n<td>switch</td>\n<td>synchronized</td>\n</tr>\n<tr>\n<td>this</td>\n<td>throw</td>\n<td>throws</td>\n<td>transient</td>\n<td>true</td>\n</tr>\n<tr>\n<td>try</td>\n<td>typeof</td>\n<td>var</td>\n<td>void</td>\n<td>volatile</td>\n</tr>\n<tr>\n<td>while</td>\n<td>with</td>\n<td>yield</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"javascript-对象-属性和方法\"><a class=\"markdownIt-Anchor\" href=\"#javascript-对象-属性和方法\">#</a> JavaScript 对象、属性和方法</h3>\n<table>\n<thead>\n<tr>\n<th>Array</th>\n<th>Date</th>\n<th>eval</th>\n<th>function</th>\n<th>hasOwnProperty</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Infinity</td>\n<td>isFinite</td>\n<td>isNaN</td>\n<td>isPrototypeOf</td>\n<td>length</td>\n</tr>\n<tr>\n<td>Math</td>\n<td>NaN</td>\n<td>name</td>\n<td>Number</td>\n<td>Object</td>\n</tr>\n<tr>\n<td>prototype</td>\n<td>String</td>\n<td>toString</td>\n<td>undefined</td>\n<td>valueOf</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"windows-保留关键字\"><a class=\"markdownIt-Anchor\" href=\"#windows-保留关键字\">#</a> Windows 保留关键字</h3>\n<table>\n<thead>\n<tr>\n<th>alert</th>\n<th>all</th>\n<th>anchor</th>\n<th>anchors</th>\n<th>area</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>assign</td>\n<td>blur</td>\n<td>button</td>\n<td>checkbox</td>\n<td>clearInterval</td>\n</tr>\n<tr>\n<td>clearTimeout</td>\n<td>clientInformation</td>\n<td>close</td>\n<td>closed</td>\n<td>confirm</td>\n</tr>\n<tr>\n<td>constructor</td>\n<td>crypto</td>\n<td>decodeURI</td>\n<td>decodeURIComponent</td>\n<td>defaultStatus</td>\n</tr>\n<tr>\n<td>document</td>\n<td>element</td>\n<td>elements</td>\n<td>embed</td>\n<td>embeds</td>\n</tr>\n<tr>\n<td>encodeURI</td>\n<td>encodeURIComponent</td>\n<td>escape</td>\n<td>event</td>\n<td>fileUpload</td>\n</tr>\n<tr>\n<td>focus</td>\n<td>form</td>\n<td>forms</td>\n<td>frame</td>\n<td>innerHeight</td>\n</tr>\n<tr>\n<td>innerWidth</td>\n<td>layer</td>\n<td>layers</td>\n<td>link</td>\n<td>location</td>\n</tr>\n<tr>\n<td>mimeTypes</td>\n<td>navigate</td>\n<td>navigator</td>\n<td>frames</td>\n<td>frameRate</td>\n</tr>\n<tr>\n<td>hidden</td>\n<td>history</td>\n<td>image</td>\n<td>images</td>\n<td>offscreenBuffering</td>\n</tr>\n<tr>\n<td>open</td>\n<td>opener</td>\n<td>option</td>\n<td>outerHeight</td>\n<td>outerWidth</td>\n</tr>\n<tr>\n<td>packages</td>\n<td>pageXOffset</td>\n<td>pageYOffset</td>\n<td>parent</td>\n<td>parseFloat</td>\n</tr>\n<tr>\n<td>parseInt</td>\n<td>password</td>\n<td>pkcs11</td>\n<td>plugin</td>\n<td>prompt</td>\n</tr>\n<tr>\n<td>propertyIsEnum</td>\n<td>radio</td>\n<td>reset</td>\n<td>screenX</td>\n<td>screenY</td>\n</tr>\n<tr>\n<td>scroll</td>\n<td>secure</td>\n<td>select</td>\n<td>self</td>\n<td>setInterval</td>\n</tr>\n<tr>\n<td>setTimeout</td>\n<td>status</td>\n<td>submit</td>\n<td>taint</td>\n<td>text</td>\n</tr>\n<tr>\n<td>textarea</td>\n<td>top</td>\n<td>unescape</td>\n<td>untaint</td>\n<td>window</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"json\"><a class=\"markdownIt-Anchor\" href=\"#json\">#</a> JSON</h2>\n<blockquote>\n<p>JSON 字符串替换为 JavaScript 对象</p>\n</blockquote>\n<ul>\n<li>创建 JavaScript 字符串，字符串为 JSON 格式的数据</li>\n<li>JavaScript 内置函数 <code> JSON.parse()</code>  将字符串转换为 JavaScript 对象</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">函数</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcy9qYXZhc2NyaXB0LWpzb24tcGFyc2UuaHRtbA==\">JSON.parse()</span></td>\n<td style=\"text-align:left\">用于将一个 JSON 字符串转换为 JavaScript 对象。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcy9qYXZhc2NyaXB0LWpzb24tc3RyaW5naWZ5Lmh0bWw=\">JSON.stringify()</span></td>\n<td style=\"text-align:left\">用于将 JavaScript 值转换为 JSON 字符串。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"javascriptvoid0-含义\"><a class=\"markdownIt-Anchor\" href=\"#javascriptvoid0-含义\">#</a> javascript:void (0) 含义</h2>\n<p><strong>void 是 JavaScript 中非常重要的关键字，该操作符指定要计算一个表达式但是不返回值</strong></p>\n<blockquote>\n<p>href=&quot;#&quot; 与 href=&quot;javascript:void (0)&quot; 的区别</p>\n</blockquote>\n<p><strong>#</strong> 包含了一个位置信息，默认的锚是 **#top** 也就是网页的上端。</p>\n<p>而 javascript:void (0), 仅仅表示一个死链接。</p>\n<p>在页面很长的时候会使用 <strong>#</strong> 来定位页面的具体位置，格式为：<strong># + id</strong>。</p>\n<p>如果你要定义一个死链接请使用 javascript:void (0)</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// 阻止链接跳转，URL不会有任何变化</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javascript:void(0)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nofollow ugc<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>点击此处<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>// 虽然阻止了链接跳转，但URL尾部会多个#，改变了当前URL。（# 主要用于配合 location.hash）</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nofollow ugc<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>点击此处<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>// 同理，# 可以的话，? 也能达到阻止页面跳转的效果，但也相同的改变了URL。（? 主要用于配合 location.search）</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>?<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nofollow ugc<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>点击此处<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>// Chrome 中即使 javascript:0; 也没变化，firefox中会变成一个字符串0</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javascript:0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nofollow ugc<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>点击此处<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"异步编程\"><a class=\"markdownIt-Anchor\" href=\"#异步编程\">#</a> 异步编程</h2>\n<h3 id=\"什么时候用异步编程\"><a class=\"markdownIt-Anchor\" href=\"#什么时候用异步编程\">#</a> 什么时候用异步编程</h3>\n<p>有一个按钮，如果我们设置它的 onclick 事件为一个死循环，那么当这个按钮按下，整个网页将失去响应。</p>\n<p>为了避免这种情况的发生，我们常常用子线程来完成一些可能消耗时间足够长以至于被用户察觉的事情，比如读取一个大文件或者发出一个网络请求。</p>\n<p>因为子线程独立于主线程，所以即使出现阻塞也不会影响主线程的运行。</p>\n<p>但是子线程有一个局限：一旦发射了以后就会与主线程失去同步，我们无法确定它的结束，如果结束之后需要处理一些事情，比如处理来自服务器的信息，我们是无法将它合并到主线程中去的。</p>\n<p>为了解决这个问题，JavaScript 中的异步操作函数往往通过回调函数来实现异步任务的结果处理。</p>\n<h3 id=\"回调函数\"><a class=\"markdownIt-Anchor\" href=\"#回调函数\">#</a> 回调函数</h3>\n<p>回调函数就是一个函数，它是在我们启动一个异步任务的时候就告诉它：等你完成了这个任务之后要干什么。这样一来主线程几乎不用关心异步任务的状态了，他自己会善始善终。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token operator\">=</span><span class=\"token string\">\"RUNOOB-1!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token operator\">=</span><span class=\"token string\">\"RUNOOB-2!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"ajax\"><a class=\"markdownIt-Anchor\" href=\"#ajax\">#</a> AJAX</h3>\n<p><em> <code>XMLHttpRequest</code>  常常用于请求来自远程服务器上的 XML 或 JSON 数据</em></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 输出接收到的文字数据</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token operator\">=</span>xhr<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token operator\">=</span><span class=\"token string\">\"请求出错\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 发送异步 GET 请求</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://www.runoob.com/try/ajax/ajax_info.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>$<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.runoob.com/try/ajax/demo_test.php\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span>status</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数据: \"</span> <span class=\"token operator\">+</span> data <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n状态: \"</span> <span class=\"token operator\">+</span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>XMLHttpRequest</code>  的  <code>onload</code>  和  <code>onerror </code> 属性都是函数，分别在它请求成功和请求失败时被调用。如果你使用完整的 jQuery 库，也可以更加优雅的使用异步  <code>AJAX</code></p>\n<h3 id=\"promise\"><a class=\"markdownIt-Anchor\" href=\"#promise\">#</a> Promise</h3>\n<p><em>可以将嵌套的代码转变为顺序格式的代码</em></p>\n<p>Promise 构造函数只有一个参数，是一个函数，这个函数在构造之后会直接被异步运行，所以我们称之为起始函数。起始函数包含两个参数 resolve 和 reject</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Divide zero\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a / b = \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"End\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 调用 resolve 代表一切正常，reject 是出现异常时所调用的</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Promise 类有 .then () .catch () 和 .finally () 三个方法，这三个方法的参数都是一个函数，.then () 可以将参数中的函数添加到当前 Promise 的正常执行序列，.catch () 则是设定 Promise 的异常处理序列，.finally () 是在 Promise 执行的最后一定会执行的序列。 .then () 传入的函数会按顺序依次执行，有任何异常都会直接跳到 catch 序列</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>*/</span></pre></td></tr></table></figure><ul>\n<li>resolve 和 reject 的作用域只有起始函数，不包括 then 以及其他序列；</li>\n<li>resolve 和 reject 并不能够使起始函数停止运行，别忘了 return。</li>\n</ul>\n",
            "tags": [
                "语言",
                "JavaScript",
                "JavaScript"
            ]
        },
        {
            "id": "http://example.com/language/Python%E8%87%AA%E5%8A%A8%E5%8C%96/",
            "url": "http://example.com/language/Python%E8%87%AA%E5%8A%A8%E5%8C%96/",
            "title": "",
            "date_published": "2022-09-22T00:44:59.790Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "http://example.com/language/Python-Turtle%E7%BB%98%E5%9B%BE/",
            "url": "http://example.com/language/Python-Turtle%E7%BB%98%E5%9B%BE/",
            "title": "Turtle绘图",
            "date_published": "2022-09-22T00:44:33.366Z",
            "content_html": "",
            "tags": [
                "语言",
                "Python",
                "Python"
            ]
        },
        {
            "id": "http://example.com/language/Python-Django%E6%A1%86%E6%9E%B6/",
            "url": "http://example.com/language/Python-Django%E6%A1%86%E6%9E%B6/",
            "title": "Django框架",
            "date_published": "2022-09-22T00:44:05.707Z",
            "content_html": "",
            "tags": [
                "语言",
                "Python",
                "Python"
            ]
        },
        {
            "id": "http://example.com/language/Python-Scrapy%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/",
            "url": "http://example.com/language/Python-Scrapy%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/",
            "title": "Scrapy网络爬虫",
            "date_published": "2022-09-22T00:43:09.546Z",
            "content_html": "",
            "tags": [
                "语言",
                "Python",
                "Python"
            ]
        },
        {
            "id": "http://example.com/language/Python-Flask%E5%BB%BA%E7%AB%99%E6%A1%86%E6%9E%B6/",
            "url": "http://example.com/language/Python-Flask%E5%BB%BA%E7%AB%99%E6%A1%86%E6%9E%B6/",
            "title": "Flask框架",
            "date_published": "2022-09-22T00:42:03.953Z",
            "content_html": "",
            "tags": [
                "语言",
                "Python",
                "Python"
            ]
        },
        {
            "id": "http://example.com/language/Python%E9%9D%99%E6%80%81%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/",
            "url": "http://example.com/language/Python%E9%9D%99%E6%80%81%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/",
            "title": "网络爬虫",
            "date_published": "2022-09-19T01:47:25.379Z",
            "content_html": "<h2 id=\"问题\"><a class=\"markdownIt-Anchor\" href=\"#问题\">#</a> 问题</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 5个网站，3个从业方向（python、java、Go），每个方向需要看100份招聘信息</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>希望写一个程序，可以帮助人类浏览网页并且从网页中抽取所需要的数据</pre></td></tr></table></figure><h2 id=\"爬虫是什么\"><a class=\"markdownIt-Anchor\" href=\"#爬虫是什么\">#</a> 爬虫是什么？</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>爬虫就是一段可以自动化的从互联网上获取大量数据的一段程序</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>自动化：自己运行</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>互联网：云</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>大量数据：千万级以上的数据才能称为大量</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>爬虫：网络蜘蛛、spider、网络机器人</pre></td></tr></table></figure><h2 id=\"为什么需要爬虫\"><a class=\"markdownIt-Anchor\" href=\"#为什么需要爬虫\">#</a> 为什么需要爬虫</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 为了自动化的获取数据：减少人力</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 解决大数据的数据源的问题</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 数据分析与数据挖掘的数据源</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">4.</span> 搜索引擎：百度、谷歌、搜狗、搜狐、360、bing、火狐</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t谷歌、bing、百度</pre></td></tr></table></figure><h2 id=\"爬虫的类型\"><a class=\"markdownIt-Anchor\" href=\"#爬虫的类型\">#</a> 爬虫的类型</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 通用爬虫</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t搜索引擎</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t尽可能多的在互联网上爬取高质量网页</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t优点：数据量大并且全</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t缺点：硬件成本高(大公司才有能力做)，有价值的数据较少。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 聚焦爬虫</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t也称之为主题爬虫（最常用的爬虫）</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t要按照预先设定好的主题，有选择性的进行网页爬取（只针对其中某几个有用的信息进行数据获取）</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t主要用于对特定信息的获取</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t优点：数据价值相对较高，节省资源</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t缺点：限制性较大，通用性较差</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token list punctuation\">3.</span> 增量式爬虫</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t是一种特殊的聚焦爬虫，只不过只采集更新后的数据</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t只捕捉更新后的页面（定时、定量）</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token list punctuation\">4.</span> 深层网络爬虫</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t抓取互联网中更深层的页面</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t可能会隐藏在表单之下，不能通过静态链接直接获取。</pre></td></tr></table></figure><h2 id=\"君子协议\"><a class=\"markdownIt-Anchor\" href=\"#君子协议\">#</a> 君子协议</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 在网站的根目录下，放置一个robots.txt文件，在文件中，规定了爬虫可以采集哪些数据，不能采集那些数据</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t注意：君子协议，从技术上不做限制，如果不遵守君子协议，采集的数据如果用于商用，并且是竞品，做好被告的准备。如果没有君子协议，默认可以全部采集，尽量不要用于商用。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> sitemap网站地图</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t为了让搜索引擎可以更快的更优先的收录自己的网站</pre></td></tr></table></figure><h2 id=\"爬虫的原理\"><a class=\"markdownIt-Anchor\" href=\"#爬虫的原理\">#</a> 爬虫的原理</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>请求与响应</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>一切以数据为导向</pre></td></tr></table></figure><h2 id=\"http请求\"><a class=\"markdownIt-Anchor\" href=\"#http请求\">#</a> HTTP 请求</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> HTTP协议(HyperText Transfer Protocal)超文本传输协议</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 是用于WWW服务器传输文本到本地浏览器的一个传输协议（只有拥有该协议才允许网络传输）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 可以让传输更加高效，还让浏览器更加高效</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> 爬虫主要就是和HTTP打交道</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> HTTPS协议：超文本传输加密协议</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tSSL证书</pre></td></tr></table></figure><ul>\n<li>HTTP 主要的请求方式</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> GET请求：向服务器请求资源</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> get请求可以携带数据区（有长度限制）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 明文请求</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> 不安全</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token list punctuation\">4.</span> 效率相对较高</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token list punctuation\">5.</span> 不携带数据或者携带的数据不敏感的情况下使用get</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">2.</span> POST请求：向服务器请求资源</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 可以携带数据区(没有限制)</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 密文的请求（加密）</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> 安全</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token list punctuation\">4.</span> 效率低</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token list punctuation\">5.</span> 携带敏感数据的时候一般用post</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>权限不开放：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token list punctuation\">3.</span> PUT请求：请求服务器来存储一个资源，通常要指定存储的位置</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token list punctuation\">4.</span> DELETE请求：请求服务器来删除一个资源</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token list punctuation\">5.</span> HEAD请求：请求获取HTTP请求头信息</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token list punctuation\">6.</span> OPTIONS请求：获得当前的URL所支持的请求类型</pre></td></tr></table></figure><h2 id=\"请求头\"><a class=\"markdownIt-Anchor\" href=\"#请求头\">#</a> 请求头</h2>\n<h3 id=\"user-agent\"><a class=\"markdownIt-Anchor\" href=\"#user-agent\">#</a> User-Agent</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>浏览器信息（操作系统信息，浏览器型号，版本号）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>相当于自报家门</pre></td></tr></table></figure><h3 id=\"headers\"><a class=\"markdownIt-Anchor\" href=\"#headers\">#</a> Headers</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>构建一个Request对象，将headers以字典的方式传入</pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token string\">'User-Agent'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>request <span class=\"token operator\">=</span> Request<span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span><span class=\"token string\">'http://httpbin.org/headers'</span><span class=\"token punctuation\">,</span>headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"cookies\"><a class=\"markdownIt-Anchor\" href=\"#cookies\">#</a> Cookies</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token string\">'User-Agent'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>req <span class=\"token operator\">=</span> Request<span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span><span class=\"token string\">'http://httpbin.org/headers'</span><span class=\"token punctuation\">,</span>headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>res <span class=\"token operator\">=</span> urlopen<span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>timeout 设置和异常处理</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 访问一个网站的时候，可能会长时间不响应</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 链接失效</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 服务器问题</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> 链接是错误链接</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token list punctuation\">4.</span> 网不好</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 以上所有情况，该链接均属于无效链接</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 占用访问资源的时间过长</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 爬虫爬取的数据量：10W~10亿</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> 策略：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t\t设置超时的时间</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token list punctuation\">3.</span> timeout需要搭配try语句使用</pre></td></tr></table></figure><h2 id=\"xpath\"><a class=\"markdownIt-Anchor\" href=\"#xpath\">#</a> xpath</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>隶属于一个第三方库</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pip install lxml</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//:选择当前目录下所有的标签</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>/：选择当前对象下的一层的标签</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>@属性名字：获取属性值</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>[]：筛选元素</pre></td></tr></table></figure><h2 id=\"ip代理池\"><a class=\"markdownIt-Anchor\" href=\"#ip代理池\">#</a> IP 代理池</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>属性</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tIP数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tIP容器</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t阈值</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>方法</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 爬取IP</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 检测IP数量</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t更新IP数</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 检测IP可用</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token list punctuation\">4.</span> 删除IP</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token list punctuation\">5.</span> 添加IP</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token list punctuation\">6.</span> 取用IP</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t按顺序每次取不同的IP</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tyield</pre></td></tr></table></figure><h2 id=\"requests高级请求库\"><a class=\"markdownIt-Anchor\" href=\"#requests高级请求库\">#</a> requests 高级请求库</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 基于urllib编写的HTTP请求库</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\tRequests的底层用urllib实现的</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 更加具有python的风格，操作更加的人性化</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> 爬虫的最常用的方式</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">4.</span> urllib的效率比requests更高</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">5.</span> requests是一个第三方模块</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tpip install requests</pre></td></tr></table></figure>",
            "tags": [
                "语言",
                "Python",
                "Python"
            ]
        },
        {
            "id": "http://example.com/language/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/",
            "url": "http://example.com/language/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/",
            "title": "图书管理系统",
            "date_published": "2022-09-18T06:41:42.080Z",
            "content_html": "<h2 id=\"图书管理系统\"><a class=\"markdownIt-Anchor\" href=\"#图书管理系统\">#</a> 图书管理系统</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 首页：登录注册，用户输入1则登录，输入2则注册</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 登录：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 用户登录</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 提示用户输入用户名</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token list punctuation\">2.</span> 提示用户输入密码</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token list punctuation\">3.</span> 判断用户输入的用户名和密码是否正确</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token list punctuation\">4.</span> 如果输入正确，则成功登录</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token list punctuation\">5.</span> 如果输入不正确，则重新登录</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 管理员登录</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">3.</span> 注册：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 提示用户输入用户名</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 不允许出现特殊字符</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 大于等于四个字儿</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 提示用户输入密码</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 用户密码需要分为高级、中级、低级</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t除了下面三种情况，剩下的情况全都不合规</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t高级：用户密码是大于14位，且由数字、字符、字母构成</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t中级：用户密码是大于8位小于14位，且由数字、字符、字母中的任意两个组合构成</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t低级：用户密码大于6位，小于8位</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 提示用户再次输入密码</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token list punctuation\">4.</span> 如果全部合规，则注册成功</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token list punctuation\">5.</span> 如果不合规，则重新输入</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token list punctuation\">4.</span> 进入图书管理系统：</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 查看所有图书--->用户、管理员</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 根据书名查找图书--->用户、管理员</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 根据作者查找图书--->用户、管理员</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token list punctuation\">4.</span> 修改图书名称 --->管理员</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token list punctuation\">5.</span> 修改图书价格--->管理员</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token list punctuation\">6.</span> 删除图书--->管理员</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token list punctuation\">7.</span> 增加新书--->管理员</pre></td></tr></table></figure>",
            "tags": [
                "语言",
                "Python",
                "Python"
            ]
        },
        {
            "id": "http://example.com/language/python%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/",
            "url": "http://example.com/language/python%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/",
            "title": "python高级教程",
            "date_published": "2022-09-18T05:49:01.883Z",
            "content_html": "<h2 id=\"面向对象进阶\"><a class=\"markdownIt-Anchor\" href=\"#面向对象进阶\">#</a> 面向对象进阶</h2>\n<h3 id=\"property装饰器\"><a class=\"markdownIt-Anchor\" href=\"#property装饰器\">#</a> @property 装饰器</h3>\n<p>将属性命名以单下划线开头，通过这种方式来暗示属性是受保护的，不建议外界直接访问，那么如果想访问属性可以通过属性的 getter（访问器）和 setter（修改器）方法进行对应的操作。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_age <span class=\"token operator\">=</span> age</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\"># 访问器 - getter 方法</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@property</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">age</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_age</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\"># 修改器 - setter 方法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@age<span class=\"token punctuation\">.</span>setter</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">age</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr></table></figure><h3 id=\"__slots__魔法\"><a class=\"markdownIt-Anchor\" href=\"#__slots__魔法\">#</a> __slots__魔法</h3>\n<p>限定自定义类型的对象只能绑定某些属性，可以通过在类中定义__slots__变量来进行限定</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># 限定 Person 对象只能绑定_name, _age 和_gender 属性</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    __slots__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'_name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_gender'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"静态方法和类方法\"><a class=\"markdownIt-Anchor\" href=\"#静态方法和类方法\">#</a> 静态方法和类方法</h3>\n<p>写在类中的方法并不需要都是对象方法</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Triangle</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\"># 静态方法</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token decorator annotation punctuation\">@staticmethod</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">is_valid</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b <span class=\"token operator\">></span> c <span class=\"token keyword\">and</span> b <span class=\"token operator\">+</span> c <span class=\"token operator\">></span> a <span class=\"token keyword\">and</span> a <span class=\"token operator\">+</span> c <span class=\"token operator\">></span> b</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\"># 类方法。第一个参数约定名为 cls，它代表的是当前类相关的信息的对象（类本身也是一个对象，有的地方也称之为类的元数据对象）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@classmethod</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        ctime <span class=\"token operator\">=</span> localtime<span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> cls<span class=\"token punctuation\">(</span>ctime<span class=\"token punctuation\">.</span>tm_hour<span class=\"token punctuation\">,</span> ctime<span class=\"token punctuation\">.</span>tm_min<span class=\"token punctuation\">,</span> ctime<span class=\"token punctuation\">.</span>tm_sec<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"类之间的关系\"><a class=\"markdownIt-Anchor\" href=\"#类之间的关系\">#</a> 类之间的关系</h3>\n<p>类和类之间的关系有三种：is-a、has-a 和 use-a 关系。</p>\n<ul>\n<li>is-a 关系也叫继承或泛化，比如学生和人的关系、手机和电子产品的关系都属于继承关系。</li>\n<li>has-a 关系通常称之为关联，比如部门和员工的关系，汽车和引擎的关系都属于关联关系；关联关系如果是整体和部分的关联，那么我们称之为聚合关系；如果整体进一步负责了部分的生命周期（整体和部分是不可分割的，同时同在也同时消亡），那么这种就是最强的关联关系，我们称之为合成关系。</li>\n<li>use-a 关系通常称之为依赖，比如司机有一个驾驶的行为（方法），其中（的参数）使用到了汽车，那么司机和汽车的关系就是依赖关系。</li>\n</ul>\n<h2 id=\"高级函数\"><a class=\"markdownIt-Anchor\" href=\"#高级函数\">#</a> 高级函数</h2>\n<ul>\n<li>函数式编程</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 也称之为泛函编程，是一种编程范式：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t可以将一个函数对象作为参数传递给另一个函数，被传入的函数对象的执行过程，在调用的函数中执行</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 函数式编程的重要基础是lambda表达式</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tlambda表达式可以返回一个函数对象</pre></td></tr></table></figure><ul>\n<li>filter()</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python2：函数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>python3：类</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>filter:过滤器</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>filter(function or None,iterable)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>function：一个函数,不需要加函数的括号</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>iterable：可迭代对象</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">1.</span> 如果function给出，将可迭代对象中的每一个元素，都挨个传递给function作为参数，筛选出return为True值</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">2.</span> 如果function没有给出，一定要填None，则直接返回iterable中的为True的值</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>真值：任何非零的值</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>假值：任何零、None、空</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>[],(),&#123;&#125;,'',0,False,0.0,0.,.0</pre></td></tr></table></figure><ul>\n<li>map()</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python2：函数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>python3：类</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>map：映射</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tmap(func, *iterables)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tfunc:函数</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\titerables：可迭代对象</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t运算iterables多个可迭代对象，将多个可迭代对象的对应的相同下标的元素，作为参数传递给func，返回一个map对象，map中每个元素为：相同下标根据func运算后的结果。当最短的可迭代对象执行完毕，则停止运算。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token code keyword\">\t\tfunc中的形参的个数，必须匹配可迭代对象的个数</span></pre></td></tr></table></figure><ul>\n<li>reduce()</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python2：内置函数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>python3：函数，functools之下</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>reduce：折叠</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> reduce(function, sequence, initial=_initial_missing)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 将序列中的前两个元素传入给function作为参数</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> function将计算出的结果和序列中的下一个元素，作为新的两个参数，重新传递给function，以此类推</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> 最终得到一个结果（最终的数值）</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token list punctuation\">4.</span> 如果设置了initial，则先传入initial和序列的第一个元素，给function</pre></td></tr></table></figure><h2 id=\"迭代器和生成器\"><a class=\"markdownIt-Anchor\" href=\"#迭代器和生成器\">#</a> 迭代器和生成器</h2>\n<ul>\n<li>迭代器</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>iterator</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>迭代器是一种特殊的可迭代对象</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">1.</span> iter():返回一个对象的迭代器</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tobj.<span class=\"token bold\"><span class=\"token punctuation\">__</span><span class=\"token content\">iter</span><span class=\"token punctuation\">__</span></span>()</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> next()：将迭代器中的游标向后挪一个单位，并且将划过的元素进行返回,迭代器是自己的迭代器</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tobj.<span class=\"token bold\"><span class=\"token punctuation\">__</span><span class=\"token content\">next</span><span class=\"token punctuation\">__</span></span>()</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token code keyword\">\t迭代器中的游标只能够向后移动</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">3.</span> 只要是实现了<span class=\"token bold\"><span class=\"token punctuation\">__</span><span class=\"token content\">iter</span><span class=\"token punctuation\">__</span></span>()和<span class=\"token bold\"><span class=\"token punctuation\">__</span><span class=\"token content\">next</span><span class=\"token punctuation\">__</span></span>()的对象都是迭代器对象</pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Fib</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"迭代器\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        self<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> num</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        self<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        self<span class=\"token punctuation\">.</span>idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__iter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> self</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__next__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>idx <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            self<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>b</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            self<span class=\"token punctuation\">.</span>idx <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>a</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">raise</span> StopIteration<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>生成器\n<ul>\n<li>生成器对象可以使用 <code>send()</code>  方法发送数据，发送的数据会成为生成器函数中通过 <code>yield</code>  表达式获得的值</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>generator</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>生成器也是一种特殊的迭代器</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">1.</span> 利用生成式创建生成器</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tl = (i for i in range(10))</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> 通过yield来创建生成器</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tl = ['胡承龙','许晋铭','段朝','孙林娜','王剑']</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token code keyword\">        def a():</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            for i in l:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                yield i</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token list punctuation\">3.</span> 支持遍历</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token list punctuation\">4.</span> 生成器的迭代器是他自己</pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"生成器\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">yield</span> a</pre></td></tr></table></figure><h2 id=\"进程和线程与协程\"><a class=\"markdownIt-Anchor\" href=\"#进程和线程与协程\">#</a> 进程和线程与协程</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>和并发有关：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t企业级项目：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 安全问题</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 并发问题</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\ta. 并发</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\tb. 高并发---2000</pre></td></tr></table></figure><ul>\n<li>任务调度</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 绝大多数的操作系统，都是采用时间片轮转的抢占式调度方式</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t时间片：由操作系统分配出来的一小段的执行时间</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t轮转：轮转的给出时间片，陆续的给出时间片</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t抢占式：多个任务之间抢占时间片，抢到时间片的任务可以短暂执行，没抢到时间片的任务，则等待下一次的争抢(等待的过程中，该任务不执行)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> 任务执行了一段时间以后，强制的暂停去执行下一个任务</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t当时间片使用完毕，则任务暂停</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">3.</span> CPU的计算速度越快，OS分配时间片的频率就越高，分配的时间片的长度就更小，人的感官上为同时执行</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>宏观多个任务同时执行，微观多个任务的快速切换</pre></td></tr></table></figure><ul>\n<li>协程</li>\n</ul>\n<pre><code>微线程\n是一种轻量级的用户态的线程\n\n是python中一个标新立异的独特的概念\n\n1. 是非抢占式的多任务产生的子程序的计算机程序组件，协程允许不同的入口点在不同的位置暂停或者开始。\n</code></pre>\n<ul>\n<li>进程</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 进程一个具有一定的独立功能的程序</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 进程是在一个数据集合上的一次动态的执行过程</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 是操作系统进行资源分配的独立单位</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>进程：是一个抽象的概念，没有统一标准去定义进程，结构：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 程序：用于描述进程要完成的功能，是空进程执行的一个指令集</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 数据集合：是程序在执行时需要工作区</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 程序控制块：包含进程的描述信息和控制信息，是进程存在的唯一标志</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>进程的特点：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 动态性</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 并发性</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 独立性</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token list punctuation\">4.</span> 结构性</pre></td></tr></table></figure><ul>\n<li>线程</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>早期没有线程的概念，只有进程，进程不满足一个程序中多种业务的并行，出现了线程。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 是一个轻量级的进程</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t轻：携带的资源，消耗的资源较少</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t重：携带的资源，消耗的资源较大</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> 线程是程序执行的最小单位，是资源分配的最小单位</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">3.</span> 一个进程由多个线程组成，线程是一个程序中不同的执行路线（不同的业务功能）</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">4.</span> 进程之间相互独立，资源不共享。线程之间资源共享，共享的是进程的资源。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">5.</span> 线程的调度要比进程快得多</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t线程更轻：资源消耗较小</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>单线程：</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t一个进程中只有一个线程，所有资源都供给该线程</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>多线程：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t一个进程中同时拥有多个线程，多个线程并发执行，多个线程之间争抢进程的资源</pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 单线程</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">movie</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'看电影:%s'</span> <span class=\"token operator\">%</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">music</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'听音乐:%s'</span> <span class=\"token operator\">%</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    movie<span class=\"token punctuation\">(</span><span class=\"token string\">'战狼2'</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    music<span class=\"token punctuation\">(</span><span class=\"token string\">'菊花台'</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"threading模块\"><a class=\"markdownIt-Anchor\" href=\"#threading模块\">#</a> Threading 模块</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> Threading模块用于创建线程</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 创建线程</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 继承Thread类并且覆盖run方法</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 直接使用Thread类的构造方法</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">3.</span> Thread()</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        def <span class=\"token bold\"><span class=\"token punctuation\">__</span><span class=\"token content\">init</span><span class=\"token punctuation\">__</span></span>(self, group=None, target=None, name=None,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                     args=(), kwargs=None, *, daemon=None):</pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 单线程</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Movie</span><span class=\"token punctuation\">(</span>threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        self<span class=\"token punctuation\">.</span>n <span class=\"token operator\">=</span> n</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'看电影:%s'</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Music</span><span class=\"token punctuation\">(</span>threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        self<span class=\"token punctuation\">.</span>n <span class=\"token operator\">=</span> n</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'听音乐:%s'</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    movie <span class=\"token operator\">=</span> Movie<span class=\"token punctuation\">(</span><span class=\"token string\">'战狼2'</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    music <span class=\"token operator\">=</span> Music<span class=\"token punctuation\">(</span><span class=\"token string\">'菊花台'</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    movie<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    music<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\"># -----------------------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">movie</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'看电影:%s'</span> <span class=\"token operator\">%</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">music</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'听音乐:%s'</span> <span class=\"token operator\">%</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    movie <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>movie<span class=\"token punctuation\">,</span>args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'战狼2'</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    music <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>music<span class=\"token punctuation\">,</span>args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'菊花台'</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    movie<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    music<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"gil全局解释锁\"><a class=\"markdownIt-Anchor\" href=\"#gil全局解释锁\">#</a> GIL 全局解释锁</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>GIL ： Global Iterpreter Lock</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>锁：提高数据安全性</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t保证每一个时间节点，只有一个线程可以访问某一个对象</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">1.</span> GIL：是Cpython的锁</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tCpython使用C语言实现，GIL锁本身就是C语言的内容，所以一并继承了过来</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">2.</span> GIL：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 保护了数据安全</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 一个进程同一时间只能有一个线程可以执行</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">3.</span> GIL锁锁的是线程，保证一个进程中同一时间只有一个线程可以执行</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token list punctuation\">4.</span> 如果要执行某个线程，需要首先抢到锁标记，但是锁标记的抛出到重新获取的时间间隔比较短，多核模式下，降低了其他核的使用率。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token list punctuation\">5.</span> GIL几乎将多核CPU限制成了单核CPU</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t对于单核CPU 没有影响</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t对于多核CPU影响巨大</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token list punctuation\">6.</span> 多线程并不是一无是处</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tCPU密集型---使用多线程</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tIO密集型使用多线程---读</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>numpy：打破了GIL锁</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>python的多线程：宏观并行，微观串行</pre></td></tr></table></figure><ul>\n<li>Queue：队列</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FIFO</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>先进先出</pre></td></tr></table></figure><ul>\n<li>管道</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pipe</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>底层由队列实现的，管道是一种通讯结构</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>yield</pre></td></tr></table></figure><ul>\n<li>生产者消费者模型</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 生产者：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t生产：生产数据</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t消费：拿取数据</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">2.</span> 关系：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t供过于求</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t供不应求</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t按需供求</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>3. </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t23种设计模式</pre></td></tr></table></figure><h3 id=\"创建多线程\"><a class=\"markdownIt-Anchor\" href=\"#创建多线程\">#</a> 创建多线程</h3>\n<p>现在推荐使用 threading 模块，该模块对多线程编程提供了更好的面向对象的封装</p>\n<ul>\n<li>直接使用 threading 模块的 <code>Thread</code>  类来创建线程</li>\n<li>通过继承 <code>Thread</code>  类的方式来创建自定义的线程类，然后再创建线程对象并启动线程，需要重写 run（）方法</li>\n</ul>\n<h3 id=\"实现线程之间的通信\"><a class=\"markdownIt-Anchor\" href=\"#实现线程之间的通信\">#</a> 实现线程之间的通信</h3>\n<ul>\n<li>\n<p>多个线程之间可以共享进程的内存空间，</p>\n</li>\n<li>\n<p>如果一个资源被多个线程竞争，即称为 “临界资源”，我们使用时需要进行保护，否则会处于混乱状态。</p>\n</li>\n<li>\n<p>为了解决这种情况可以加锁 lock，只有获得锁的线程可以使用，其余被阻塞</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> threading <span class=\"token keyword\">import</span> Thread<span class=\"token punctuation\">,</span> Lock</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_balance <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_lock <span class=\"token operator\">=</span> Lock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\"># 先获取锁才能执行后续的代码</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_lock<span class=\"token punctuation\">.</span>acquire<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            new_balance <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_balance <span class=\"token operator\">+</span> money</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.01</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            self<span class=\"token punctuation\">.</span>_balance <span class=\"token operator\">=</span> new_balance</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\"># 在 finally 中执行释放锁的操作保证正常异常锁都能释放</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            self<span class=\"token punctuation\">.</span>_lock<span class=\"token punctuation\">.</span>release<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token decorator annotation punctuation\">@property</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">balance</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_balance</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">AddMoneyThread</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> account<span class=\"token punctuation\">,</span> money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_account <span class=\"token operator\">=</span> account</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_money <span class=\"token operator\">=</span> money</pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        self<span class=\"token punctuation\">.</span>_account<span class=\"token punctuation\">.</span>deposit<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_money<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>account <span class=\"token operator\">=</span> Account<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>threads <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    t <span class=\"token operator\">=</span> AddMoneyThread<span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    threads<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    t<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">for</span> t <span class=\"token keyword\">in</span> threads<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    t<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'账户余额为: ￥%d元'</span> <span class=\"token operator\">%</span> account<span class=\"token punctuation\">.</span>balance<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"创建多进程\"><a class=\"markdownIt-Anchor\" href=\"#创建多进程\">#</a> 创建多进程</h3>\n<ul>\n<li>通过 <code>Process</code>  类创建了进程对象，</li>\n<li>通过 <code>target</code>  参数我们传入一个函数来表示进程启动后要执行的代码，</li>\n<li>后面的 <code>args</code>  是一个元组，它代表了传递给函数的参数</li>\n<li><code>Process</code>  对象的 <code>start</code>  方法用来启动进程，而 <code>join</code>  方法表示等待进程执行结束。</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Process</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> os <span class=\"token keyword\">import</span> getpid</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> random <span class=\"token keyword\">import</span> randint</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> time<span class=\"token punctuation\">,</span> sleep</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">download</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>filename<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">开始下载。。。端口号：</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    t <span class=\"token operator\">=</span> randint<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    sleep<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>filename<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">下载完成,耗时</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>t<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    p1 <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>download<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'111'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    p2 <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>download<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'222'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    p2<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    p2<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'共耗时</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>使用 subprocess 模块中的类和函数来创建和启动子进程，然后通过管道来和子进程通信</li>\n</ul>\n<h3 id=\"实现进程间的通信\"><a class=\"markdownIt-Anchor\" href=\"#实现进程间的通信\">#</a> 实现进程间的通信</h3>\n<p>使用 multiprocessing 模块中的 <code>Queue</code>  类，它是可以被多个进程共享的队列，底层是通过管道和<a href=\"\">信号量（semaphore）</a>机制来实现</p>\n<h3 id=\"多任务还是多线程\"><a class=\"markdownIt-Anchor\" href=\"#多任务还是多线程\">#</a> 多任务还是多线程</h3>\n<p>如果是计算密集型任务，多进程</p>\n<p>如果是 I/O 流，可以很好的适配多线程</p>\n<blockquote>\n<p><strong>重点</strong>：<strong>多线程和多进程的比较</strong>。</p>\n<p>以下情况需要使用多线程：</p>\n<ol>\n<li>程序需要维护许多共享的状态（尤其是可变状态），Python 中的列表、字典、集合都是线程安全的，所以使用线程而不是进程维护共享状态的代价相对较小。</li>\n<li>程序会花费大量时间在 I/O 操作上，没有太多并行计算的需求且不需占用太多的内存。</li>\n</ol>\n<p>以下情况需要使用多进程：</p>\n<ol>\n<li>程序执行计算密集型任务（如：字节码操作、数据处理、科学计算）。</li>\n<li>程序的输入可以并行的分成块，并且可以将运算结果合并。</li>\n<li>程序在内存使用方面没有任何限制且不强依赖于 I/O 操作（如：读写文件、套接字等）。</li>\n</ol>\n</blockquote>\n<h3 id=\"线程池\"><a class=\"markdownIt-Anchor\" href=\"#线程池\">#</a> 线程池</h3>\n<h3 id=\"单线程异步io协程\"><a class=\"markdownIt-Anchor\" href=\"#单线程异步io协程\">#</a> 单线程 + 异步 I/O (协程)</h3>\n<p><em>单线程 + 异步 I/O 的编程模型称为协程</em></p>\n<h2 id=\"并发编程\"><a class=\"markdownIt-Anchor\" href=\"#并发编程\">#</a> 并发编程</h2>\n",
            "tags": [
                "语言",
                "Python",
                "Python"
            ]
        },
        {
            "id": "http://example.com/computer-science/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/",
            "url": "http://example.com/computer-science/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/",
            "title": "计算机基础原理",
            "date_published": "2022-09-18T02:36:52.432Z",
            "content_html": "<ul>\n<li>\n<p>intel 中规定</p>\n<ul>\n<li>栈是从高地址向低地址生长的</li>\n<li>堆是由低地址向高地址增长的</li>\n</ul>\n</li>\n<li>\n<p>ARM 中规定</p>\n<ul>\n<li>可以选择栈是升序还是降序</li>\n</ul>\n</li>\n<li>\n<p>在 32 位的机器上</p>\n<ul>\n<li>整数的位数是 32 位，取值范围是 - 2<strong>31～2</strong>31-1, 即 - 2147483648～2147483647</li>\n</ul>\n</li>\n<li>\n<p>在 64 位系统上</p>\n<ul>\n<li>整数的位数为 64 位，取值范围为 - 2<strong>63～2</strong>63-1，即 - 9223372036854775808～9223372036854775807</li>\n</ul>\n</li>\n<li>\n<p>x64 下</p>\n<ul>\n<li>函数调用的<em>前 4 个参数</em>总是放在<em>寄存器</em>中传递，剩余的参数则压入<em>堆栈</em>中。</li>\n</ul>\n</li>\n<li>\n<p>x86 上</p>\n<ul>\n<li>则是全部压入堆栈中 (除了 fastcall 方式)。这 4 个用于存放参数的寄存器分别是：存放整数参数的 RCX，RDX，R8，R9；存放浮点数参数的 XMM0，XMM1，XMM2，XMM3。</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "理论",
                "计算机基础原理"
            ]
        },
        {
            "id": "http://example.com/arithmetic/LeetCode-400-499/",
            "url": "http://example.com/arithmetic/LeetCode-400-499/",
            "title": "LeetCode-400-499",
            "date_published": "2022-09-16T01:07:36.814Z",
            "content_html": "<h2 id=\"414第三大的数\"><a class=\"markdownIt-Anchor\" href=\"#414第三大的数\">#</a> 414. 第三大的数</h2>\n<blockquote>\n<p>给你一个非空数组，返回此数组中 <strong>第三大的数</strong> 。如果不存在，则返回数组中最大的数。</p>\n</blockquote>\n<ul>\n<li>\n<p>方法一：排序 + 双指针</p>\n<ul>\n<li>先对数组进行排序</li>\n<li>两个指针指向最后一个元素，一个用来扫描，一个用来判断</li>\n<li>循环判断时判断扫描的指针是否超出本身的长度，若超出，则返回数组中最后一个元素，即最大的那个</li>\n</ul>\n</li>\n<li>\n<p>方法二：有序集合</p>\n<ul>\n<li>建立一个有序集合，判断数组的值是否在有序集合中，若不在，则添加</li>\n<li>同时设定这个有序集合的长度，3，若超出 3，则弹出第一个值</li>\n<li>最后判断有序列表的长度，若不为 3 则返回有序列表的最后一个元素</li>\n</ul>\n</li>\n<li>\n<p>方法三：一次遍历</p>\n<ul>\n<li>用三个变量维护数组中的最大值，次大值，第三大值</li>\n<li>遍历数组</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"448找到所有数组中消失的数字\"><a class=\"markdownIt-Anchor\" href=\"#448找到所有数组中消失的数字\">#</a> 448. 找到所有数组中消失的数字</h2>\n<blockquote>\n<p>给你一个含 n 个整数的数组  <code>nums</code>  ，其中 <code> nums[i]</code>  在区间 [1, n] 内。请你找出所有在 <code> [1, n]</code>  范围内但没有出现在 <code> nums</code>  中的数字，并以数组的形式返回结果。</p>\n</blockquote>\n<ul>\n<li>\n<p>方法一：</p>\n<ul>\n<li>利用 set 去重，同时创建一个长度为 len 的列表，判断列表中的元素是否存在于 set 中若不存在，则添加到返回的集合中去</li>\n</ul>\n</li>\n<li>\n<p>方法二：原地修改，哈希</p>\n<ul>\n<li>遍历给定的数组，用每个数字求余数组的长度，得到该元素应该所处的位置，修改在该位置的值，加上数组的长度，最后判断，若数组的元素小于等于 8，则说明该原来的数组中没有该下标所在的元素</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"455分发饼干\"><a class=\"markdownIt-Anchor\" href=\"#455分发饼干\">#</a> 455. 分发饼干</h2>\n<blockquote>\n<p>对每个孩子 i，都有一个胃口值 g [i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s [j] 。如果 s [j] &gt;= g [i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值</p>\n</blockquote>\n",
            "tags": [
                "算法",
                "LeetCode",
                "LeetCode"
            ]
        },
        {
            "id": "http://example.com/arithmetic/LeetCode-300-399/",
            "url": "http://example.com/arithmetic/LeetCode-300-399/",
            "title": "LeetCode-300-399",
            "date_published": "2022-09-15T07:38:03.437Z",
            "content_html": "<h2 id=\"303区域和检索-数组不可变\"><a class=\"markdownIt-Anchor\" href=\"#303区域和检索-数组不可变\">#</a> 303. 区域和检索 - 数组不可变</h2>\n<blockquote>\n<p>给定一个整数数组 <code>nums</code> , 处理以下类型的多个查询</p>\n</blockquote>\n<ul>\n<li>方法一：切片\n<ul>\n<li>给定的两个下标在原数组中切片重新赋值给一个变量，利用 <code>sum()</code>  求出两个下表之间的元素之和</li>\n<li><em>注意：切片后一位取不到</em></li>\n</ul>\n</li>\n<li>方法二：\n<ul>\n<li>若给定的数组需要经常调用，查询，则在类初始化时，就创意一个新的数组，遍历求出到每一位元素前几位的和存储起来</li>\n<li>当给定求取下标时，直接从初始化定义的变量中取值</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"349两个数组的交集\"><a class=\"markdownIt-Anchor\" href=\"#349两个数组的交集\">#</a> 349. 两个数组的交集</h2>\n<blockquote>\n<p>给定两个数组  <code>nums1</code>  和  <code>nums2</code>  ，返回 <em>它们的交集</em> 。输出结果中的每个元素一定是 <strong>唯一</strong> 的。我们可以 <strong>不考虑输出结果的顺序</strong></p>\n</blockquote>\n<ul>\n<li>\n<p>方法一：</p>\n<ul>\n<li>利用集合（set）的交集方法</li>\n<li>返回一个集合 {}，将其中的值放入到列表中返回</li>\n</ul>\n</li>\n<li>\n<p>方法二：</p>\n<ul>\n<li>先对两个数组进行 set 去重</li>\n<li>选取长度较小的一个数组进行判断，如果该元素的值在另一个数组中，则将该值追加到要返回的列表中</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"350两个数组的交集-ii\"><a class=\"markdownIt-Anchor\" href=\"#350两个数组的交集-ii\">#</a> 350. 两个数组的交集 II</h2>\n<blockquote>\n<p>在 349 的基础之上，返回结果中每个元素出现的次数，应与元素在两个数组中都出现的次数一致</p>\n</blockquote>\n<ul>\n<li>方法一：\n<ul>\n<li>选取长度较小的一个数组进行判断，如果该元素的值在另一个数组中，则将该值追加到要返回的列表中，同时移除掉另一个元素中的数据</li>\n</ul>\n</li>\n<li>方法二：哈希映射\n<ul>\n<li>使用 collections.Counter ()</li>\n</ul>\n</li>\n<li>方法三：排序 + 双指针\n<ul>\n<li>先对两个数组进行排序，然后两个指针指向对应的第一个元素</li>\n<li>若指向的相等，则追加进集合，若不相等，则值较小的指针向后移动</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "算法",
                "LeetCode",
                "LeetCode"
            ]
        },
        {
            "id": "http://example.com/arithmetic/LeetCode-200-299/",
            "url": "http://example.com/arithmetic/LeetCode-200-299/",
            "title": "LeetCode-200-299",
            "date_published": "2022-09-06T01:17:01.230Z",
            "content_html": "<h2 id=\"217存在重复元素\"><a class=\"markdownIt-Anchor\" href=\"#217存在重复元素\">#</a> 217. 存在重复元素</h2>\n<blockquote>\n<p>给你一个整数数组  <code>nums</code>  。如果任一值在数组中出现 <strong>至少两次</strong> ，返回  <code>true</code>  ；如果数组中每个元素互不相同，返回  <code>false</code></p>\n</blockquote>\n<ul>\n<li>方法一：哈希表\n<ul>\n<li>将给定数组放入 set 中判断是否与原长度相同</li>\n</ul>\n</li>\n<li>方法二：排序\n<ul>\n<li>将数组排序，依次判断相邻两数是否相等</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"219存在重复元素ii\"><a class=\"markdownIt-Anchor\" href=\"#219存在重复元素ii\">#</a> 219. 存在重复元素 II</h2>\n<blockquote>\n<p>给你一个整数数组  <code>nums</code>  和一个整数  <code>k</code>  ，判断数组中是否存在两个 不同的索引 <code> i</code>  和 <code> j</code>  ，满足  <code>nums[i] == nums[j]</code>  且  <code>abs(i - j) &lt;= k</code>  。如果存在，返回  <code>true</code>  ；否则，返回  <code>false</code>  。</p>\n</blockquote>\n<h2 id=\"228汇总区间\"><a class=\"markdownIt-Anchor\" href=\"#228汇总区间\">#</a> 228. 汇总区间</h2>\n<blockquote>\n<p>给定一个  <strong>无重复元素</strong> 的 有序 整数数组  <code>nums </code> 。<br>\n返回 恰好覆盖数组中所有数字 的 最小有序 区间范围列表 。也就是说， <code>nums</code>  的每个元素都恰好被某个区间范围所覆盖，并且不存在属于某个范围但不属于 <code>nums</code>  的数字  <code>x</code>  。</p>\n</blockquote>\n<ul>\n<li>方法一：一次遍历\n<ul>\n<li>创建一个空列表</li>\n<li>将两个指针指向第一个元素 <code>left</code>  和 <code>right</code></li>\n<li>遍历，判断 <code>right+1==</code>  便利的数字</li>\n<li>若相等，则 <code>right</code>  向后移，反之，则追加到集合，并将 <code>left</code>  和 <code>right</code>  重新赋值为当前遍历的元素</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"268丢失的数字\"><a class=\"markdownIt-Anchor\" href=\"#268丢失的数字\">#</a> 268. 丢失的数字</h2>\n<blockquote>\n<p>给定一个包含  <code>[0, n]</code>  中  <code>n</code>  个数的数组  <code>nums</code>  ，找出  <code>[0, n]</code>  这个范围内没有出现在数组中的那个数。</p>\n</blockquote>\n<ul>\n<li>方法一：哈希集合\n<ul>\n<li>用 <code>range</code>  创建 [0,n]，遍历每一个数判断是否在给定的集合中</li>\n<li>若不在，则返回</li>\n</ul>\n</li>\n<li>方法二：排序\n<ul>\n<li>现将数组排序，根据下表和元素的值是否一致，可以使用枚举</li>\n</ul>\n</li>\n<li>方法三：位运算\n<ul>\n<li>使用异或的方式</li>\n</ul>\n</li>\n<li>方法四：数学\n<ul>\n<li>根据数学公式求出元素之和，0-n 的总和，两者之差即为值</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"283移动零\"><a class=\"markdownIt-Anchor\" href=\"#283移动零\">#</a> 283. 移动零</h2>\n<blockquote>\n<p>给定一个数组  <code>nums</code> ，编写一个函数将所有  <code>0</code>  移动到数组的末尾，同时保持非零元素的相对顺序。</p>\n</blockquote>\n<p><em>不复制数组的情况下原地对数组进行操作</em></p>\n<ul>\n<li>\n<p>方法一：一次遍历</p>\n<ul>\n<li>两个指针 <code>left</code> , <code>right</code>  下标给第一个第二个元素</li>\n<li>循环，当 <code>right</code>  小于等于最后一位时，终止循环</li>\n<li>判断 left 是不是为 0，判断 right 是不是 0，若 right 不是，则交换顺序</li>\n<li>若 right 是 0，则 right 向后移动，</li>\n<li>若 left 不是 0，则同时向后移动</li>\n</ul>\n</li>\n<li>\n<p>方法二：二次遍历</p>\n<ul>\n<li>两个指针，一个用来快速扫描，一个用来改变元素的值，指向第一个元素</li>\n<li>快速扫描判断是否值为 0，若不为 0，则将改变元素的值写入，然后两个指针同时后移；若为 0，则快速扫描的指针后移</li>\n<li>当扫描指针扫描到最后一个是，改变元素值的指针后的值全部用 0 填充</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "算法",
                "LeetCode",
                "LeetCode"
            ]
        },
        {
            "id": "http://example.com/language/python%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/",
            "url": "http://example.com/language/python%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/",
            "title": "python语法基础",
            "date_published": "2022-09-01T00:19:56.860Z",
            "content_html": "<h2 id=\"什么是python\"><a class=\"markdownIt-Anchor\" href=\"#什么是python\">#</a> 什么是 Python？</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python：巨蟒</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>python是一门程序设计语言</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>语言：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 自然语言：肢体语言、汉语、英语、法语......</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 机器语言：001101010101二进制（微码编程）</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 程序设计语言：C、C艹、C艹艹、Java、python、PHP、GO</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>语言的高级型：越接近自然语言的编程语言就越高级，越高级的编程语言效率越低。汇编语言相对来说开发难度高，但是效率相对高，语言相对低级。</pre></td></tr></table></figure><ul>\n<li>python</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python:1989年，圣诞节，Guido Van Rossum</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Guido，退出了python的决策层。回归。</pre></td></tr></table></figure><ul>\n<li>python 的特点</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 语法简洁而清晰</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 强大的类库（17W)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 胶水语言</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">4.</span> 纯面向对象的语言</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>其他特点：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 跨平台：win、linux、mac.....</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 运行机制：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 直接解释执行</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 先编译，后解释/执行</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 代码量较少</pre></td></tr></table></figure><ul>\n<li>python 的应用场景</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>领域：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 航空航天 图像识别</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 3D动画</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> WEB应用</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">4.</span> 云计算</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">5.</span> 企业应用</pre></td></tr></table></figure><ul>\n<li>python 解释器的实现</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> Cpython：原生的解释器（官方）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t用C语言实现的解释器</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> Jython：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t用Java实现的解释器</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> IronPython：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t用.NET实现的解释器</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">4.</span> pypy：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t用python实现的解释器</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>效率最高的是：pypy</pre></td></tr></table></figure><ul>\n<li>python 的安装</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 版本必须是3.8or3.9</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 安装，选择路径，强烈建议装在C盘并且路径中不要有中文，路径一定要牢记</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 勾选add ???? to path</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">4.</span> 下一步</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">5.</span> 打开cmd窗口，输入python，查看版本是否正确</pre></td></tr></table></figure><h2 id=\"标准数据类型\"><a class=\"markdownIt-Anchor\" href=\"#标准数据类型\">#</a> 标准数据类型</h2>\n<ul>\n<li>Numbers</li>\n<li>String</li>\n<li>List</li>\n<li>Tuple</li>\n<li>Set</li>\n<li>Dictionary</li>\n</ul>\n<p>可分类为可变与不可变：</p>\n<ul>\n<li>不可变：Number,String,Tuple,frozenset</li>\n<li>可变：List,Set,Dictionary</li>\n</ul>\n<blockquote>\n<p>可变与不可变是<em>相对引用地址</em>来说的，对于<em>不可变而言</em>，修改变量的值相当于新建了一个对象，而可变类型允许变量的值发生修改</p>\n</blockquote>\n<p><em>支持 int,float,bool,complex (复数)</em></p>\n<p><strong> <code>type</code>  与 <code>isinstance</code>  都可以判断所属类型</strong></p>\n<ul>\n<li>type (a)：不会认为子类是一种父类类型</li>\n<li>isinstance (a,int)：会认为子类是一种父类类型</li>\n</ul>\n<h2 id=\"注意\"><a class=\"markdownIt-Anchor\" href=\"#注意\">#</a> 注意</h2>\n<ul>\n<li>\n<p>变量查找顺序：</p>\n<ul>\n<li><strong>局部变量 &gt; 外部嵌套作用域 &gt; 全局作用域 &gt; 内置模块作用</strong></li>\n</ul>\n</li>\n<li>\n<p>小整池对象：[-5,257)</p>\n<ul>\n<li>这个范围内的整数，python 不会新建对象，会直接从池子中拿取</li>\n</ul>\n</li>\n<li>\n<p>关于 python 中的复数：</p>\n<ul>\n<li>表示复数的语法： <code>real + image j</code></li>\n<li>实部和虚部都是浮点数</li>\n<li>虚部的后缀可以是 <code>j</code>  或者 <code>J</code></li>\n<li>复数的 <code>conjugate</code>  方法可以返回该复数的共轭复数</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"标识符\"><a class=\"markdownIt-Anchor\" href=\"#标识符\">#</a> 标识符</h2>\n<ul>\n<li>第一个字符必须是字母表中的字母或者下划线_</li>\n<li>标识符的其他部分由字母，数字，下划线组成</li>\n<li>标识符对大小写敏感</li>\n<li>不可以时 python 中的关键字</li>\n<li><strong>self</strong> 不是 python 的关键字，类中参数<em> self</em> 可以用其他代替，但为了命名规范，推荐使用 self</li>\n</ul>\n<h2 id=\"运算符\"><a class=\"markdownIt-Anchor\" href=\"#运算符\">#</a> 运算符</h2>\n<ul>\n<li>\n<p>算术运算符</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">2</span><span class=\"token operator\">/</span><span class=\"token number\">7</span>\t\t<span class=\"token comment\">#除法，得到一个浮点数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span><span class=\"token operator\">//</span><span class=\"token number\">4</span>\t<span class=\"token comment\">#除法。得到一个整数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span><span class=\"token operator\">**</span><span class=\"token number\">5</span>\t<span class=\"token comment\">#乘方</span></pre></td></tr></table></figure></li>\n<li>\n<p>位运算符</p>\n<ul>\n<li><code>a&amp;b</code>  按位与运算</li>\n<li><code>a|b</code>  按位或运算</li>\n<li><code>a^b</code>  按位异或运算</li>\n<li><code>~a</code>  按位取反</li>\n<li><code>a&lt;&lt;2</code>  左移</li>\n<li><code>a&gt;&gt;2</code>  右移</li>\n</ul>\n</li>\n<li>\n<p>成员运算符</p>\n<ul>\n<li>in：判断是否在指定的序列中</li>\n<li>not in</li>\n</ul>\n</li>\n<li>\n<p>身份运算符</p>\n<ul>\n<li>is：判断两个标识符是不是引用一个对象</li>\n<li>is not</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"流程控制\"><a class=\"markdownIt-Anchor\" href=\"#流程控制\">#</a> 流程控制</h2>\n<h3 id=\"条件分支\"><a class=\"markdownIt-Anchor\" href=\"#条件分支\">#</a> 条件分支</h3>\n<ul>\n<li>if-else 结构</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>语法：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> if 布尔表达式:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\t\t代码</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> if 布尔表达式:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t\t代码</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\telse:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t\t代码</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> if 布尔表达式:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t\t代码</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\telif 布尔表达式:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t\t代码</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t...</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t...</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\telse:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\t代码</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>注意：</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> if语句不会影响和自己平级的其他结构</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> if和else中的代码不可能同时发生</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>输入一个人的分数：90分以上优秀，80-90良好，70-80普通，60-70及格，0-60不及格</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>代码块：</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t书写代码的块级结构</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tpython中用冒号和缩进来表示代码块</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t其他语言中：&#123;&#125;来表示代码块</pre></td></tr></table></figure><ul>\n<li>嵌套使用</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>if-elif-else结构中中，可以在任意一个代码块中嵌套if结构(三种中任意一种都可以)</pre></td></tr></table></figure><ul>\n<li>else 悬挂问题</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tips:if或者else里面定义的内容，会泄露到上一级结构中</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> python可以很好地规避else悬挂问题</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t依靠严格的缩进</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">2.</span> C语言中if语句会和最近的else组成一个整体</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t有可能当前结构并不属于该if结构---称之为else悬挂问题</pre></td></tr></table></figure><ul>\n<li>断言</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>assert：是一个关键字</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>含义：判断assert之后的布尔表达式是否为真，如果为真则正常执行程序，如果为假，立刻终止程序并且抛出异常(AssertionError)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>语法：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tassert 布尔表达式:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>主动报错</pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">assert</span> a <span class=\"token operator\">></span> b</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hahaha'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"循环流程\"><a class=\"markdownIt-Anchor\" href=\"#循环流程\">#</a> 循环流程</h3>\n<ul>\n<li>while 循环</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>循环：重复执行代码</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 语法：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\twhile 布尔表达式:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t代码(循环体)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> 注意：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t控制while后面的布尔表达式，可能会出现死循环，也可能出现正常终止</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t死循环：无限循环</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 服务器</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 硬件</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t合理的控制循环条件</pre></td></tr></table></figure><figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>while True</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>while 1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>python2：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> True是一个保留字，可以被修改</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 每次执行while True的时候会对True的值进行校验</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> while 1的执行效率更高</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>python3：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> True是一个关键字，是不可变的</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 执行while True的时候不需要进行校验</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> while True while 1的效率是一致的</pre></td></tr></table></figure><ul>\n<li>for 循环</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>也称为计数循环</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>可迭代对象：是指拥有迭代器的对象</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>迭代器：是一个特殊的可迭代对象</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>可迭代对象：str、list、tuple 类似于这样的数据，我们称为可迭代对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">1.</span> 语法：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tfor 变量 in 可迭代对象:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t代码(循环体)</pre></td></tr></table></figure><ul>\n<li>range</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对象</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>range的参数必须是整型</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">1.</span> range(stop)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t返回一个range对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tstart：默认为0</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> range(start, stop[, step])</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t返回一个range对象</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tstart：开始的值</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tstop：结束的值（不包括）</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tstep：步长（可以是正数也可以是负数）</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token list punctuation\">3.</span> range对象是一个可迭代对象</pre></td></tr></table></figure><ul>\n<li>补充</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>知道循环次数：for循环</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>不知道循环次数但是知道循环条件：while循环</pre></td></tr></table></figure><ul>\n<li>break</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>跳出本层循环，之后的循环不再执行</pre></td></tr></table></figure><ul>\n<li>continue</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>跳出本次循环，之后的循环不影响</pre></td></tr></table></figure><ul>\n<li>循环嵌套</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>多个循环之间，可以任意嵌套使用</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> while里面套while</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> while里面套for</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> for里面套while</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">4.</span> for里面套for</pre></td></tr></table></figure><ul>\n<li>九九乘法表</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># i = 2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># range(1,3)=[1,2]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">'*'</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">'='</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>end<span class=\"token operator\">=</span><span class=\"token string\">'\\t'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"序列\"><a class=\"markdownIt-Anchor\" href=\"#序列\">#</a> 序列</h2>\n<ul>\n<li>list</li>\n<li>tuple</li>\n<li>str</li>\n</ul>\n<blockquote>\n<p>特点</p>\n</blockquote>\n<ol>\n<li>可迭代对象</li>\n<li>支持索引操作</li>\n<li>切片操作</li>\n</ol>\n<ul>\n<li>序列</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Sequence:序列</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>支持索引操作</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>支持切片操作</pre></td></tr></table></figure><ul>\n<li>序列所支持的操作</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 构造方法</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tstr()</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tlist()</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\ttuple()</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\trange()</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> len()</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tlen(obj)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tobj:必须有长度的概念，不然会报错</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token list punctuation\">3.</span> max()</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t返回最大值</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tmax(iterable)：返回iterable中的最大值</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token list punctuation\">4.</span> min()</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t返回最小值</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tmin(iterable)：返回iterable中的最小值</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token list punctuation\">5.</span> sum(iterable)</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t求和</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> iterable里面的所有元素都必须是自然数</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 不能是字符串</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token list punctuation\">6.</span> sorted(iterable, /, * , key=None, reverse=False)</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t排序</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t给iterable排序，默认是升序，如果reverse为True，则为降序</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token list punctuation\">7.</span> enumerate()</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t枚举</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t返回一个对象，该对象是一个可迭代对象</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t返回序列的元素的索引及对应值</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token list punctuation\">8.</span> zip()</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t返回一个zip对象</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t每一个元素都是元组</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t当最短的可迭代对象压缩完毕，则结束压缩</pre></td></tr></table></figure><ul>\n<li>补充</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>善用help函数</pre></td></tr></table></figure><h2 id=\"列表\"><a class=\"markdownIt-Anchor\" href=\"#列表\">#</a> 列表</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>列表：list   是一个类是一个对象</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 存储多个数据，有没有上限？理论上没有长度限制</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 存储多种数据</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> 是一个可迭代对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">4.</span> 列表是一个可变类型的数据</pre></td></tr></table></figure><h3 id=\"创建列表\"><a class=\"markdownIt-Anchor\" href=\"#创建列表\">#</a> 创建列表</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 直接创建</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tl = [元素1,元素2,...,元素n]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 普通列表：[1,2,3,4]整型列表，['a','b','c','d']字符串列表</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 混合列表：[1,2,'a','b',[1,2,3]]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> l = []:空列表</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 通过构造方法来创建</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> list():返回一个空的列表</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> list(iterable)：从可迭代对象中的元素，初始化一个列表</pre></td></tr></table></figure><p><em>用一个列表成一个数字，会得到新的列表</em></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b<span class=\"token operator\">=</span>a<span class=\"token operator\">*</span><span class=\"token number\">2</span> <span class=\"token comment\"># [1,2,1,2]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 修改 b [0], 此时 b [2] 的值不会改变</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 当 a 为引用类型时注意</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>b<span class=\"token operator\">=</span>a<span class=\"token operator\">*</span><span class=\"token number\">2</span> <span class=\"token comment\"># [[1,2],[1,2]]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 如果修改 b [0][0], 则 b [1][0] 同样被修改</span></pre></td></tr></table></figure><h3 id=\"访问列表里面的元素\"><a class=\"markdownIt-Anchor\" href=\"#访问列表里面的元素\">#</a> 访问列表里面的元素</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>访问：读、改、删</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>读取元素：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 通过索引来获取元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t索引：下标</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t索引不是下标</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tpython中索引是从0开始技术</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t访问形式：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t变量[下标]---访问一个元素</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 读取所有的元素</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t遍历：所有的元素不重复、不遗漏的访问一遍</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t通过for来进行遍历</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 如果下标超出了范围则会报错</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t列表的长度：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t列表的下标范围：</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t0<span class=\"token strike\"><span class=\"token punctuation\">~</span><span class=\"token content\">len(l)-1</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t列表的索引支持负数</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t负号：代表的是方向（反向）</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t-1</span><span class=\"token punctuation\">~</span></span>-len(l)</pre></td></tr></table></figure><h3 id=\"向列表中添加元素\"><a class=\"markdownIt-Anchor\" href=\"#向列表中添加元素\">#</a> 向列表中添加元素</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> append(obj):</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t向列表的末尾添加一个obj</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tobject：对象，在python可以是任何数据</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t用于添加一个数据</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> extend(iterable):</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t通过可迭代对象的元素，来扩展当前的列表</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\titerable：可迭代对象</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t用于向列表中添加多个数据</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token list punctuation\">3.</span> insert(index,object)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t在index之前插入object</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tindex：索引值(下标)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tobject：任何对象</pre></td></tr></table></figure><h3 id=\"修改列表中的元素\"><a class=\"markdownIt-Anchor\" href=\"#修改列表中的元素\">#</a> 修改列表中的元素</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>直接赋值修改</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t变量[下标] = 新值</pre></td></tr></table></figure><h3 id=\"删除列表中的元素\"><a class=\"markdownIt-Anchor\" href=\"#删除列表中的元素\">#</a> 删除列表中的元素</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> clear():</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t清空列表中的所有元素</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> pop([index])：弹栈</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t删除并且返回下标为index的元素(index默认为最后一个)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t如果为空列表则会抛出IndexError</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t栈：是一种数据结构，FILO：First In Last Out</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">3.</span> remove(value):</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t删除第一个出现的value元素（下标最小）</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t如果value不存在会报ValueError</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">4.</span> del list[i]:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t删除某个元素</pre></td></tr></table></figure><h3 id=\"切片\"><a class=\"markdownIt-Anchor\" href=\"#切片\">#</a> 切片</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>slice：切片</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>列表通过索引可以获取一个元素,索引处可以接收更多的参数。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>l=[1,2,3,4,5]</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>l[2:4]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>作用：通过起始下标和结束下标获取一段元素(多个元素)，该数据是拷贝出来的数据，原数据不变</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>语法：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t变量[start:end]</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tstart：起始下标</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tend：结束下标</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t取值：[start:stop)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token list punctuation\">1.</span> 如果start为0那么可以不写</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tlist[:3]</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token list punctuation\">2.</span> 如果要直接获取到最后一个元素</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tlist[2:]</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token list punctuation\">3.</span> 如果要全取：</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tlist[:]</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token list punctuation\">4.</span>\t当切片的起始索引超出超出本身大小时，</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t不会报错，会返回一个空的列表</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>切片操作往往用于数据的拷贝</pre></td></tr></table></figure><ul>\n<li>切片的高级应用</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>切片还支持第三个参数，表示步长</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>变量[start:end:step]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>start:起始下标</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>end:结束下标</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>step:步长</pre></td></tr></table></figure><h3 id=\"列表的常用运算符\"><a class=\"markdownIt-Anchor\" href=\"#列表的常用运算符\">#</a> 列表的常用运算符</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 加法运算</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tlist1+list2----列表的拼接</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 比较运算(布尔运算)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t>,>=,&lt;,&lt;=,==,!=</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t比较原则：对应下标的元素，按照下标从小到大逐个比较，只要比较出大小则停止比较</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t需要注意类型的兼容性</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">3.</span> 重复运算</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t乘法</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t本质：是多个加法运算</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">4.</span> 成员关系运算:in/not in </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t判断列表中是否有某个成员</pre></td></tr></table></figure><ul>\n<li>列表中的其他方法</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> copy()</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t浅拷贝</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> count(value)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t返回value值在列表中出现的次数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> index(value[,start[,stop]])</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t返回value在列表中从start到stop的范围内的第一次出现的索引</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tvalue：要查询的值</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">4.</span> reverse()</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t原地翻转</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t和大小无关，不排序</pre></td></tr></table></figure><ul>\n<li>补充</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 列表中的所有元素，本质上都不是数据本身，而是数据的首地址</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 列表作为可变类型的数据</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t可变：当列表中的内容发生改变的时候，列表本身的地址不发生改变，但是列表中的元素发生改变。</pre></td></tr></table></figure><h3 id=\"二维列表\"><a class=\"markdownIt-Anchor\" href=\"#二维列表\">#</a> 二维列表</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>维度：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t[[1,2,3],[4,5,6],[4,5,6],[4,5,6],[4,5,6],[4,5,6],[4,5,6]]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>二维列表：一维列表下的一堆列表(一维列表)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>二维列表的访问：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 直接访问</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t访问一个元素可以通过下标进行访问</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tlist<span class=\"token url\">[<span class=\"token content\">行坐标</span>][<span class=\"token variable\">列坐标</span>]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 双重for循环</pre></td></tr></table></figure><ul>\n<li>二维列表的创建</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>l = [[1,2,3]]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>l = []</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>l.append([123])</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>[list()]</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>列表的推导式/生成式</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>l = [i for i in range(10)]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>print(l)</pre></td></tr></table></figure><h2 id=\"元组\"><a class=\"markdownIt-Anchor\" href=\"#元组\">#</a> 元组</h2>\n<h3 id=\"圆括号\"><a class=\"markdownIt-Anchor\" href=\"#圆括号\">#</a> 圆括号</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> ():可以修改运算的优先级</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 元组的组成部分</pre></td></tr></table></figure><h3 id=\"元组-2\"><a class=\"markdownIt-Anchor\" href=\"#元组-2\">#</a> 元组</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 可以存储多个数据</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 可以存储多种数据</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 是不可变类型</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">4.</span> 支持切片操作</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">5.</span> 可迭代对象</pre></td></tr></table></figure><h3 id=\"创建一个元组\"><a class=\"markdownIt-Anchor\" href=\"#创建一个元组\">#</a> 创建一个元组</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 直接创建</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tt = (1,2,3)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tt = (True,1,2,3)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tt = ()</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> 构造方法</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> tuple()---返回一个空元组</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> tuple(iterable)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t利用可迭代对象的元素，初始化一个新的元组</pre></td></tr></table></figure><h3 id=\"访问元组\"><a class=\"markdownIt-Anchor\" href=\"#访问元组\">#</a> 访问元组</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 访问一个元素</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t和列表一样</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 访问多个元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t和列表一样</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> 访问所有元素</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t和列表一样</pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>include <span class=\"token operator\">&lt;</span>stdio<span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">mian</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> d1<span class=\"token punctuation\">,</span>d2<span class=\"token punctuation\">,</span>d3<span class=\"token punctuation\">,</span>d4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    d1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>a<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">></span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d1=%d,a=%d,v=%d,c=%d\\n\"</span><span class=\"token punctuation\">,</span>d1<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    d2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">></span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>a<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">></span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d1=%d,a=%d,v=%d,c=%d\\n\"</span><span class=\"token punctuation\">,</span>d2<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    d3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>a<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">></span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d1=%d,a=%d,v=%d,c=%d\\n\"</span><span class=\"token punctuation\">,</span>d3<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    d4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">></span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>a<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">></span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d1=%d,a=%d,v=%d,c=%d\\n\"</span><span class=\"token punctuation\">,</span>d4<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"增加和修改以及删除元素\"><a class=\"markdownIt-Anchor\" href=\"#增加和修改以及删除元素\">#</a> 增加和修改以及删除元素</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">*</span> 元组是不可变类型，所以，本身不支持增删改操作</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">1.</span> 向元组中添加元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t利用切片然后元组拼接</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> 从元组中删除元素</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t利用切片删除元素</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">3.</span> 修改元组中的元素</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t先删除，后添加</pre></td></tr></table></figure><h3 id=\"元组的操作符\"><a class=\"markdownIt-Anchor\" href=\"#元组的操作符\">#</a> 元组的操作符</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 拼接操作</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t+</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 重复操作</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">*</span> ：本质是多个加法，返回一个新的元组</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> 布尔操作：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t>,&lt;,==,!==</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t比较方法和列表一样</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">4.</span> 成员关系运算</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tin/not in</pre></td></tr></table></figure><h2 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\">#</a> 字符串</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>最常用的数据类型，没有之一</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>str</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>特点：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 天生就具有跨平台性</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 是一个可迭代对象</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 支持索引操作</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token list punctuation\">4.</span> 支持切片操作</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token list punctuation\">5.</span> 是一个不可变类型</pre></td></tr></table></figure><ul>\n<li>字符串的类别</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 单引号字符串</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t其他语言：字符串必须使用双引号，单引号只能用于字符</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tpython：允许使用单引号来表达字符串</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t简单，可以和双引号进行嵌套</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> 双引号字符串</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t一般字符串</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">3.</span> 三引号字符串</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t多行字符串</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t单三引号、双三引号</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t一般用于文档注释，必须出现在代码块的第一行</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t也成为长字符串可以换行</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token list punctuation\">4.</span> 原始字符串</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t让所有的转义字符全部失效（只体现最原本的含义）</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\ts = r'Jerry\\tom'</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token list punctuation\">5.</span> 二进制字符串</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t不是字符串类型，是bytes类型</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tstr---bytes:encode()编码</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tbytes---str:decode()解码</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token list punctuation\">6.</span> unicode字符串</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t以unicode的方式来解析字符串</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tu'abc'</pre></td></tr></table></figure><ul>\n<li>创建字符串</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 直接创建：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\ts = 'abc'</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\ts = \"abc\"</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\ts = \"\"\"abc\"\"\"</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\ts = '''abc'''</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 构造方法</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tstr(obj)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tobject：可以接收任何参数</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tinput和print</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tconsole.log(\"\")</pre></td></tr></table></figure><ul>\n<li>访问字符串</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 访问一个</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t通过索引</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 访问多个</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t通过切片</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> 访问所有</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t遍历</pre></td></tr></table></figure><h3 id=\"常用的方法\"><a class=\"markdownIt-Anchor\" href=\"#常用的方法\">#</a> 常用的方法</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> capitalize()</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t首字母大写，其余字符小写</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> casefold()</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t字母全小写</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> center(字符长度,填充物)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tcenter(20, '-')</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">4.</span> count()</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tcount(sub[, start[, end]])</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t计算字符串中出现了多少sub元素</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t若没有找到，则返回0</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token list punctuation\">5.</span> encode()</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t编码</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t把字符串编成二进制的内容</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token list punctuation\">6.</span> endswith(suffix[, start[, end]])</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t是否以suffix结尾</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tendswith('系统',0,10)</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token list punctuation\">7.</span> find(sub[, start[, end]])</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t找到在start和end之间的第一个sub元素的下标，如果不存在，则返回-1</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token list punctuation\">8.</span> index(sub[, start[, end]])</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t如果sub在字符串中，则返回最小的下标</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t若匹配不到，则报错value Error</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token list punctuation\">9.</span> isalnum()</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t注：问一下</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t人类语言都为True，其他的为false</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token list punctuation\">10.</span> isalpha()</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t注：问一下</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t人类语言字母都为True，其他的为false</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token list punctuation\">11.</span> isdecimal()</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t十进制数字</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t判断字符中是否都是十进制阿拉伯数字</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token list punctuation\">12.</span> isdigit()</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t判断是否都是十进制数字</pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token list punctuation\">13.</span> islower()</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t判断当前字符串是否全都是小写</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token list punctuation\">14.</span> isnumeric()</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t判断当前字符是否是由数字(只包含中文和阿拉伯，不包含英文)构成的</pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token list punctuation\">15.</span> isspace()</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t判断是否全是空格</pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token list punctuation\">16.</span> isupper()</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t判断字符串是否全都是大写</pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token list punctuation\">17.</span> ljust(width[,fillchar])</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\ts.ljust(10,'-')</pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token list punctuation\">18.</span> rjust(width[,fillchar])</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\ts.rjust(10,'-')</pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token list punctuation\">19.</span> lstrip():</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t去掉字符串左侧的空格、回车、指标等空字符</pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token list punctuation\">20.</span> rstrip():</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t去掉字符串右侧的空格、回车、指标等空字符</pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token list punctuation\">21.</span> strip():</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t去掉字符串两侧的空格、回车、指标等空字符</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\tstrip('ab')</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t其中的'ab'表示的时一种集合，任意排列的元素都会执行</pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token list punctuation\">22.</span> replace(old,new):</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t替换</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t把字符串中的old替换成new</pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token list punctuation\">23.</span> startswith(prefix)</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t判断是否是以prefix开头的字符串</pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token list punctuation\">24.</span> upper()</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t将字符串转为大写</pre></td></tr></table></figure><ul>\n<li>格式化</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>format(<span class=\"token italic\"><span class=\"token punctuation\">*</span><span class=\"token content\">args, </span><span class=\"token punctuation\">*</span></span>*kwargs)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token italic\"><span class=\"token punctuation\">*</span><span class=\"token content\">args：可变长参数，把参数打包成元组来处理</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t</span><span class=\"token punctuation\">*</span></span>kwargs：关键字参数，把参数打包成字典来处理</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">1.</span> 源字符通过下标的方式进行填充获取</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tprint('&#123;0&#125;,haha,&#123;1&#125;'.format('a', 'b'))</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 源字符通过关键字的方式来获取数据</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tprint('&#123;name&#125;,haha'.format(name='乔鼎'))</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">3.</span> 花括号的转义</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t如果需要让大括号失去意义，只需要编成两个大括号即可</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">4.</span> f-string</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t3.6版本之后添加的</pre></td></tr></table></figure><ul>\n<li>格式化字符串</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>通过%的方式来匹配字符串和匹配对象之间的关系</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 格式化编码：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\ts = 'this is a %c'%97</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">2.</span> 格式化字符串:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\ts = 'this is a %s'%'abc'</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">3.</span> 格式化整数</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\ts = 'this is a %d'%123</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">4.</span> 格式化无符号八进制数</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\ts = 'this is a %o'%123</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">5.</span> 格式化无符号十六进制数</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\ts = 'this is a %x'%123</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token list punctuation\">6.</span> 格式化定点数</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\ts = 'this is a %f'%123.0000004</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t四舍五入保留六位</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token list punctuation\">7.</span> 格式化科学计数法</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\ts = 'this is a %e'%123.0000004</pre></td></tr></table></figure><ul>\n<li>转义字符</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>作用：拥有特殊含义的字符</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> \\t:横向制表符</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> \\n:换行</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> \\v:纵向制表符</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">4.</span> \\r:老版windows的换行</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">5.</span> \\b:退格符</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">6.</span> \\f:换页符</pre></td></tr></table></figure><h3 id=\"字符串编译与解码顺序\"><a class=\"markdownIt-Anchor\" href=\"#字符串编译与解码顺序\">#</a> 字符串编译与解码顺序</h3>\n<ul>\n<li>字符串编译的过程：\n<ul>\n<li>gbk–&gt;unicode–&gt;utf16–&gt;url 解码</li>\n</ul>\n</li>\n<li>字符串解码顺序：\n<ul>\n<li>url 解码–&gt;utf16–&gt;unicode–&gt;gbk</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数</h2>\n<h3 id=\"函数特点\"><a class=\"markdownIt-Anchor\" href=\"#函数特点\">#</a> 函数特点</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 避免代码冗余</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 提高代码的可维护性</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 提高代码的灵活性</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">4.</span> 提高代码的可重用性</pre></td></tr></table></figure><h3 id=\"函数的语法\"><a class=\"markdownIt-Anchor\" href=\"#函数的语法\">#</a> 函数的语法</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>函数使用的必要性</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 非结构化编程</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t逻辑掺杂在一起，混乱，逻辑不清晰</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">2.</span> 结构化编程</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t函数</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t将可重用的逻辑、或者拥有独立功能的逻辑封装在一起</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>定义：函数由一组代码构成，目的是为了完成一个特定的任务</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>语法：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>关键字：def：define：声明一个函数</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>函数的声明：</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>def 函数名(形式参数):</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t代码(函数体)</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>函数的调用：</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t函数名(实际参数)</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>函数在不调用的情况下，不会执行</pre></td></tr></table></figure><h3 id=\"函数的运行机制\"><a class=\"markdownIt-Anchor\" href=\"#函数的运行机制\">#</a> 函数的运行机制</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>流程：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 编译流程：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 通过编译器，识别def关键字，创建一个函数对象</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 创建函数体（不执行）</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 执行流程</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 执行 函数的调用</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 通过函数名调转到函数的定义处</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> 执行函数体</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token list punctuation\">4.</span> 执行函数体完毕，流程返回到函数调用处</pre></td></tr></table></figure><h3 id=\"函数的结构\"><a class=\"markdownIt-Anchor\" href=\"#函数的结构\">#</a> 函数的结构</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 函数的声明</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tdef</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t函数名</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t括号(形式参数)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> 函数体</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t内容，核心代码</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">3.</span> 函数的返回值</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\treturn</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t如果不写return，自动添加return None</pre></td></tr></table></figure><ul>\n<li>函数名的声明</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>小驼峰</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mainPage</pre></td></tr></table></figure><h3 id=\"函数的参数\"><a class=\"markdownIt-Anchor\" href=\"#函数的参数\">#</a> 函数的参数</h3>\n<ul>\n<li>函数的参数的分类</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 形式参数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t函数声明的时候，定义的参数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t简称：形参</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t英文：Parameter</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t相当于函数的局部变量</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 实际参数</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t函数调用的时候，传入的参数</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t简称：实参</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t英文：Argument</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t相当于给函数的局部变量赋值</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token list punctuation\">3.</span> 如果没有定义任何参数</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t称之为：无参</pre></td></tr></table></figure><ul>\n<li>位置参数</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>参数和位置有关</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 实参和形参的位置必须一一对应</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 位置参数的数量需要一一匹配</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> 位置参数，一旦设定了就必须传值</pre></td></tr></table></figure><ul>\n<li>关键字参数</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>定义了关键字的参数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 基于实参</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 不受位置的影响</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> 实参和形参必须一一对应</pre></td></tr></table></figure><ul>\n<li>默认参数</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>定义了默认值的参数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 基于形参</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 如果不传递实参则使用形参后面的默认值作为实参</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> 如果传递实参，则使用传递的参数值</pre></td></tr></table></figure><ul>\n<li>可变长参数</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>可以接收多个参数的形参</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 基于形参</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 分类：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token italic\"><span class=\"token punctuation\">*</span><span class=\"token content\">args</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t将接收到的多个参数打包成元组</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t只能通过位置来传参</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t</span><span class=\"token punctuation\">*</span></span>*kwargs</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t将接受到的多个参数打包成字典</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            只能够通过关键字来传值</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>相同类型的可变长参数，只能有一个</pre></td></tr></table></figure><ul>\n<li>混用情况</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 关键字参数和位置参数混用</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t关键字参数必须在位置参数之后</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t原因：参数出现等号的形式，之后的所有参数，都被视为等号形式传播</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">2.</span> 默认参数和位置参数混用</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t默认参数必须出现在位置参数之后</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t原因：参数出现等号的形式，之后的所有参数，都被视为等号形式传播</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">3.</span> 可变长参数和位置参数混用：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t语法上不会报错</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t如果可变长参数在位置参数之前，位置参数必须通过关键字参数进行传值</pre></td></tr></table></figure><ul>\n<li>递归</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>自己搞自己</pre></td></tr></table></figure><ul>\n<li>函数的文档注释</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 必须出现在函数体的第一行</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 习惯上使用三引号字符串作为文档注释</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t单三引号或者双三引号</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> 查看函数文档</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> help(函数名)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 调用函数对象的<span class=\"token bold\"><span class=\"token punctuation\">__</span><span class=\"token content\">doc</span><span class=\"token punctuation\">__</span></span>属性</pre></td></tr></table></figure><h3 id=\"函数的过程\"><a class=\"markdownIt-Anchor\" href=\"#函数的过程\">#</a> 函数的过程</h3>\n<ul>\n<li>函数的返回值</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>关键字：return</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 任何函数都必须有return（返回值）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 如果函数中不书写任何的return，自动添加一个return None</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> 如果函数中只写了return，之后没有携带任何值，自动添加一个None</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">4.</span> return的作用</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 返回流程（最核心的作用）</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 返回时顺带携带了一个值（函数一定会有一个返回值）</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">5.</span> return的值</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 任何对象都可以被return</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 返回值有且只能有一个</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> 如果要返回多个值，打包成一个容器(元组)进行返回</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token list punctuation\">4.</span> 可以返回一个函数的对象的调用</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t函数的返回值是被调用函数的返回值(间接获取返回值)</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token list punctuation\">5.</span> 返回一个函数对象</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\treturn 函数名</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token list punctuation\">6.</span> return 之后的代码，不执行</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t无论是本层或者是外层，均不执行</pre></td></tr></table></figure><ul>\n<li>函数变量的作用域</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>作用域：作用的范围</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 局部变量：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 定义在函数内部的变量</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 先定义后使用</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> 作用范围：从定义开始到包含他的代码块结束</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 全局变量：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 没有缩进的变量</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 先定义后使用</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> 作用范围：从定义开始到包含他的代码块结束</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">3.</span> 如果函数内部的变量和全局变量发生了冲突，在局部访问，访问的是局部的变量，在全局使用的是全局的变量---相互不干扰(修改局部变量，全局不受影响)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 如果发生了命名冲突，会在函数内部创建一个同名的局部变量</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 局部使用的时候，局部变量的变量名会遮盖全局变量的变量名</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> 全局使用时依然使用全局的变量</pre></td></tr></table></figure><ul>\n<li>global 关键字</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>声明全局变量</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>如果函数内部的变量的名称和全局的名称一样，使用global可以声明当前代码块使用的该变量为全局变量</pre></td></tr></table></figure><ul>\n<li>nonlocal</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nonlocal 只存在于python 3.x版本</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> nonlocal影响上一层的局部同名变量</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 如果上一层没有对应的局部变量，则报错：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tSyntaxError: no binding for nonlocal 'a' found</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> nonlocal 和global同时作用域同一个变量的时候，会报错</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tSyntaxError: name 'a' is nonlocal and global</pre></td></tr></table></figure><h3 id=\"内嵌函数和闭包\"><a class=\"markdownIt-Anchor\" href=\"#内嵌函数和闭包\">#</a> 内嵌函数和闭包</h3>\n<ul>\n<li>内嵌函数</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>形式上：一个函数里面又定义了一个函数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t外层的函数：外部函数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t内层的函数：内部函数</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">1.</span> 内嵌函数的作用范围：同局部变量</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t在作用域以外是不能被调用的</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t作用范围：从代码块开始到结束</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">2.</span> 内嵌函数不能执行类似于a+=1的操作</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t本质：等号右边先进行使用，然后左边再进行赋值</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t解决方案：nonlocal或者global</pre></td></tr></table></figure><ul>\n<li>闭包</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>全称：词法闭包 Lexical Closure</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>是一种编程范式：对代码进行提炼和概括，使得代码的重用性更高。</pre></td></tr></table></figure><figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>闭包的条件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 必须是一个内嵌函数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 外部函数必须返回的是内部函数的函数对象</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> 内部函数必须引用外部函数的局部变量</pre></td></tr></table></figure><ul>\n<li>闭包的作用</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 可以在声明较少的参数的情况下，传递更多的参数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 可以使用更多的内部函数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t间接使用：通过return 返回出内部函数的函数对象（尚未被调用），然后再使用</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> 多用于集群</pre></td></tr></table></figure><ul>\n<li>闭包的优势</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 避免使用全局变量</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t全局变量容易出现脏读问题（不安全）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 提供部分的数据隐藏</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 隐藏了参数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 隐藏了内部函数对象</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">3.</span> 可以更优雅的实现面向对象</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t返回了一个函数对象</pre></td></tr></table></figure><ul>\n<li>匿名函数</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>没有函数名的函数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 临时使用一次</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 函数只是用一次</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>可以避免命名冲突</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>关键字：lambda</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>语法：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tlambda 形参:返回值</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">1.</span> lambda 用于创建一个lambda函数对象</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token list punctuation\">2.</span> lambda书写的形式：lambda表达式</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token list punctuation\">3.</span> lambda表达式常常应用与泛函编程（编程范式）</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token list punctuation\">4.</span> lambda表达式是一种解析式</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t通过解析来创建函数对象</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t执行效率相对来说较高</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token list punctuation\">5.</span> lambda表达式的优先级最低</pre></td></tr></table></figure><ul>\n<li>lambda 表达式的作用</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 可以避免使用函数名，使用方便，代码更加简洁，优雅</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 代码相对简化，可以适当地提高代码的可读性</pre></td></tr></table></figure><h3 id=\"函数的嵌套调用和\"><a class=\"markdownIt-Anchor\" href=\"#函数的嵌套调用和\">#</a> 函数的嵌套调用和？？</h3>\n<ul>\n<li>函数的嵌套调用</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 一个函数里面调用另一个函数，函数的嵌套调用</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t两个函数之间有没有关系：没有必然的联系</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 分别属于两个不同的函数</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 内嵌函数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 自己调用自己</pre></td></tr></table></figure><ul>\n<li>使用函数的必要性</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 重复使用的代码，抽取出来，封装成函数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 拥有特殊功能的代码抽取出来，封装为函数，解耦合</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 简化开发流程</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>f(x) = 0</pre></td></tr></table></figure><p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>a</mi><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mi>b</mi><mi>x</mi><mo>+</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">f(x) = ax^2+bx+c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span></p>\n<ul>\n<li>函数的递归</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 函数的嵌套使用：一个函数调用量另一个函数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 函数的递归使用：一个函数调用自己</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">1.</span> 注意：避免无穷递归</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t解决方案：控制好递归的边界。通过return来终止流程。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 递归异常：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tRecursionError: maximum recursion depth exceeded while calling a Python object</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">3.</span> 报错的原因：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t执行原理：函数的无穷递归区别于死循环</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t循环：代码块级别---在同一个代码块中无限的执行，占用的空间永远是一个代码块的空间，只不过是重复执行罢了。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t递归：对象级别---对象的内存占用量是远大于一个代码块。每一次的递归都会创建一个新的对象，内存就会无限累加使用---无限递归会发生内存溢出。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t小结：循环消耗小，递归消耗较大</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t直接原因：超过了最大深度</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tpython为了保护系统的内存，设置了递归的层数，如果超过层数，则会报错。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token list punctuation\">4.</span> 递归的使用:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 将大问题分解为小问题，如果一个大问题的解决方案和一个小问题的解决方案一样，那么只需要解决小问题，大问题则迎刃而解。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 递归的效率很低，一般用于解决难题。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 尽量不要使用递归，能用递归解决的问题一定可以用循环解决。</pre></td></tr></table></figure><h2 id=\"字典\"><a class=\"markdownIt-Anchor\" href=\"#字典\">#</a> 字典</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>目录---字的位置（页数）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>映射</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>dict---唯一的映射类型</pre></td></tr></table></figure><ul>\n<li>字典的结构</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>键值对</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>键：值</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>key:value</pre></td></tr></table></figure><ul>\n<li>字典的特点</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 字典没有下标这个概念---字典是无序的</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 字典不支持索引操作，不支持切片操作</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 字典是一个可迭代对象</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">4.</span> 字典中的键不能重复</pre></td></tr></table></figure><ul>\n<li>字典的创建</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 直接创建</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t变量 = &#123;'胡承龙':'女','高凯':'女','闫伟':'女','许晋铭':'女'&#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t空字典：&#123;&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">2.</span> 利用构造方法</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> dict()</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t返回一个空字典</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> dict(mapping)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t利用字典创建字典</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tmapping：是一个映射类型</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> dict(iterable)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t利用可迭代对象创建字典</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t可迭代对象中的元素必须是拥有映射关系，必须是拥有两个元素的容器(二维)</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token list punctuation\">4.</span> dict(**kwargs)</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t利用可边长参数的特性创建字典</pre></td></tr></table></figure><ul>\n<li>访问字典</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 访问一个元素</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t可以通过键直接访问对应的值</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t变量名[键]</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t字典是没有下标的，没有索引的概念</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t如果访问了不存在键：KeyError</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 访问部分元素</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t不支持访问部分元素</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">3.</span> 访问所有元素</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t遍历</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tfor循环本身只能遍历出所有的键</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t*python中的字典，本质上只存键，字典中存储的键对应的有一个地址，而这个地址是值存储的位置</pre></td></tr></table></figure><ul>\n<li>修改字典中的键值对</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 直接修改</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t变量[键]=新值</pre></td></tr></table></figure><ul>\n<li>合并两个字典</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>name<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>age<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>name<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>添加键值对</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>直接添加</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t变量[新键]=值</pre></td></tr></table></figure><ul>\n<li>删除键值对</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>del语句</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tdel 变量名[键]</pre></td></tr></table></figure><ul>\n<li>字典中常用的方法</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> clear()</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t清空</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> copy()</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t浅拷贝</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> fromkeys(iterable,value)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t利用iterable中的元素作为键，value作为值，创建新的字典</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">4.</span> get(k[,d])</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tk:key键</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\td:提示信息/返回值</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t通过传入的k获得对应的值，如果k在字典中，则返回对应的value</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t如果k不在字典中，则返回d提示信息，如果没有填入d，则默认返回\t\tNone</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token list punctuation\">5.</span> items()</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t返回一个类集合对象，每一个元素都是表示映射关系的元组</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t通常用来访问字典的键值对</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token list punctuation\">6.</span> keys()</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t返回一个类集合对象，每一个元素都是字典的键</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token list punctuation\">7.</span> values()</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t返回一个类集合对象，每一个元素都是字典的值</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token list punctuation\">8.</span> pop(k[,d])</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t删除并且返回k对应的值</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t如果值不存在并且没有传入d会报错</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t如果传入d并且值不存在，则返回提示的d</pre></td></tr></table></figure><ul>\n<li>补充</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 字典的值：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t没有要求</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 字典的键</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 必须是可哈希的</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t不可变类型</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 元组作为不可变类型，可以作为字典的键</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t元组里面的所有元素必须是不可变类型</pre></td></tr></table></figure><h2 id=\"集合set\"><a class=\"markdownIt-Anchor\" href=\"#集合set\">#</a> 集合 (set)</h2>\n<ul>\n<li>集合的特点</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 集合是无序的</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 集合中的元素必须是可哈希的</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t字典中的键是由set实现的</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> 是一个可迭代对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">4.</span> 集合中的所有元素都是唯一的</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t不可重复</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">5.</span> 集合是可变类型</pre></td></tr></table></figure><ul>\n<li>集合的创建</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 直接创建</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t变量=&#123;元素1,元素2,......&#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\td=&#123;1,2,3&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t无法手动创建空集合</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> 构造方法</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tset()：空集合</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tset(iterable)：通过可迭代对象来创建集合</pre></td></tr></table></figure><ul>\n<li>集合的访问</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 访问一个元素</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t不能访问一个元素</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 访问多个元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t无法访问多个元素</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> 访问所有元素</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t遍历：将容器中的元素，不重复，不遗漏的访问一遍</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tfor循环</pre></td></tr></table></figure><ul>\n<li>集合的修改</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> update(set)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t通过一个集合，更新原有的集合</pre></td></tr></table></figure><ul>\n<li>集合的添加</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> add(value)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t向集合中添加一个元素</pre></td></tr></table></figure><ul>\n<li>集合的删除</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> remove(value)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t删除某个元素</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t如果不存在，则报keyerror</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">2.</span> pop()</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t删除并且返回一个元素</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t随机删除</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t如果为空则报错：KeyError</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">3.</span> discard()</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t删除某个元素</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t如果删除的元素不存在，不报错，并且什么都不做</pre></td></tr></table></figure><ul>\n<li>补充</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>去重</pre></td></tr></table></figure><ul>\n<li>交集、并集、补集</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>交集：intersection</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>差集：difference</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>并集：union</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>分离集：isdisjoint</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>对称差集：symmetric_difference</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>子集：issubset</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>父集：issuperset</pre></td></tr></table></figure><ul>\n<li>不可变集合</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>frozenset：不可变集合</pre></td></tr></table></figure><ul>\n<li>特点</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 是一个不可变类型</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 是一个可迭代对象</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 是无序的</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">4.</span> 没有下标的概念</pre></td></tr></table></figure><ul>\n<li>可迭代对象</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list/tuple/str/range/dict/set/frozenset</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>可变类型：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>list/dict/set</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>不可变类型：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>tuple/str/frozenset</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>iterable</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>拥有迭代器的对象称之为可迭代对象</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>常见的可迭代对象：</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tlist、tuple、dict、set、frozenset、str</pre></td></tr></table></figure><h2 id=\"推导式\"><a class=\"markdownIt-Anchor\" href=\"#推导式\">#</a> 推导式</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 列表推导式</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 字典推导式</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 集合推导式</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>推导式：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t也称之为解析式</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t利用逐步解析的方式，创建一个对象</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t是python独有的特性</pre></td></tr></table></figure><ul>\n<li>列表推导式</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>语法</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t变量=[元素 for i in 可迭代对象 if 布尔表达式]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t布尔判断：对数据进行筛选---可以省略</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tfor循环：给列表提供数据或者提供元素数量</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t元素：最终列表中的元素</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t固定的值</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t变量</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t表达式</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t函数对象</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t函数调用</pre></td></tr></table></figure><ul>\n<li>字典推导式</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>语法：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t变量=&#123;键:值 for i in 可迭代对象 if 布尔表达式&#125;</pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># d = &#123;' 许晋铭 ':i for i in range (10)&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># d = &#123;k:v for k,v in [[' 许晋铭 ',250],[' 欢欢 ',' 鸡 '],[' 辫儿 ','250']]&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>d1 <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span>许晋铭<span class=\"token operator\">=</span><span class=\"token number\">250</span><span class=\"token punctuation\">,</span>欢欢<span class=\"token operator\">=</span><span class=\"token number\">290</span><span class=\"token punctuation\">,</span>辫儿<span class=\"token operator\">=</span><span class=\"token number\">540</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>d2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>v<span class=\"token punctuation\">:</span>k <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> d1<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d2<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>集合推导式</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>语法：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t变量=&#123;值 for i in 可迭代对象 if 布尔表达式&#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t布尔运算：对数据进行筛选---可以省略</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tfor循环：给列表提供数据、提供元素的数量</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t元素：最终列表中的元素</pre></td></tr></table></figure><h2 id=\"面向对象\"><a class=\"markdownIt-Anchor\" href=\"#面向对象\">#</a> 面向对象</h2>\n<h3 id=\"类和对象\"><a class=\"markdownIt-Anchor\" href=\"#类和对象\">#</a> 类和对象</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>真·万物皆对象</pre></td></tr></table></figure><h3 id=\"面向对象的思想\"><a class=\"markdownIt-Anchor\" href=\"#面向对象的思想\">#</a> 面向对象的思想</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>OOP:面向对象的编程</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>利用对象的思想解决问题、</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>第一个面向对象的语言：small talk</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>C(纯面向过程)--->C++--->Java--->python(纯面向对象的语言)</pre></td></tr></table></figure><ul>\n<li>对象</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python:万物皆对象</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>现实世界中：一切客观存在的事物</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>面向对象编程的核心：模拟现实世界，从而解决现实世界的问题</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>打开洗衣机的盖子---把衣服扔进去---倒洗衣液---关洗衣机的盖子---打开开关---选择模式---选择水位---开始</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>拿出来衣服---取水---收集聚乙烯---造盆---皂角---砍树---造搓衣板---开搓..........</pre></td></tr></table></figure><ul>\n<li>现实世界中的对象</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 有什么？\t属性</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 能做什么？\t方法</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>对象=属性+方法</pre></td></tr></table></figure><ul>\n<li>属性</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 属性可以由小对象构成</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 相对抽象的事物也可以作为属性</pre></td></tr></table></figure><ul>\n<li>方法</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 对象和对象之间的相互调用</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 方法被别的对象调用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 调用别的对象的方法</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 自己调用自己的方法</pre></td></tr></table></figure><h3 id=\"如何建立面向对象的解题思路\"><a class=\"markdownIt-Anchor\" href=\"#如何建立面向对象的解题思路\">#</a> 如何建立面向对象的解题思路</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token title important\"><span class=\"token punctuation\">#</span> 现实世界</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>从天津---上海</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">1.</span> 面向过程的思路</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t将过程细化，细化到十分精细，任何情况都要考虑到位，所有方案都要手动设置</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t上飞机：安检---找座位---关手机---安全带---吃饭---厕所---</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t如果发生问题：降落伞、救生衣、直接跳、急救、生火、</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">2.</span> 面向对象：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t只考虑对象，其次再关注过程</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t飞机、高铁、汽车、UFO、走着、马、船、御剑、TP</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token code keyword\">\t1. 选取对象：飞机</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t2. 调用方法：上飞机、开飞机(收襟翼、收起落架、打开双发.....)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>注意：面向对象的思想，会让事情更加的简单(解题的思路简单了一些，代码其实并没有简化)</pre></td></tr></table></figure><ul>\n<li>解决客观问题</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 找到合适的对象</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 调用对象的方法</pre></td></tr></table></figure><h3 id=\"面向对象在计算机中的应用\"><a class=\"markdownIt-Anchor\" href=\"#面向对象在计算机中的应用\">#</a> 面向对象在计算机中的应用</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>核心：让计算机来模拟现实世界，从而来解决现实世界的问题</pre></td></tr></table></figure><figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>现实：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 沟通的需求</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 购物的需求</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 吃饭</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">4.</span> 娱乐</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">5.</span> Money</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>计算机：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> QQ、微信</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 淘宝、京东、并夕夕、苏宁、国美、唯品会、Snaker</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 美团、饿了么、百度外卖</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token list punctuation\">4.</span> LOL、It takes two、PUBG、APEX</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token list punctuation\">5.</span> 58同城、支付宝、BTC、NFT</pre></td></tr></table></figure><ul>\n<li>计算机中的对象</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>计算机的对象是在内存中的一块存储空间，属性和方法是在内存中数据</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>对象：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>现实：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t对象名字：小明\t对象年龄：18\t对象性别：男\t对象学历：初中辍学\t身体状况：健康\t对象身高：130\t体重：200g\t性格：胆小</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t国籍：中国\t感情经历：二婚带俩娃\t家庭状况：北京\t家庭成员：父母健在十个兄弟</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>python：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tname='小明'</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tage=18</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tgender='man'</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\teducation='drop junior school'</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\theath = 'heathy'</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\theight='130'</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tweight='200'</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tcharacter='The shy'</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>图书管理系统：</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t现实：</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t书架、书籍、座位、管理员、收银台、撤硕、VIP</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token code keyword\">\t计算机：</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t书架对象：</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t属性：书籍、分类....</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t方法：保存、删除</span></pre></td></tr></table></figure><ul>\n<li>小结</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>面向对象这种思想，为生活，编程提供了优质的解题思路。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t可以简化流程，让复杂的需求更加容易实现</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>面向对象的特点：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 各司其职</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 弱耦合性</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t强耦合：对象之间的关系紧密</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t弱耦合：对象之间的关系松散</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t面向对象的过程中，更希望代码偏向于弱耦合</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 可重用性：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t一处实现，处处使用</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t框架：SSM，Django，scrapy</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token list punctuation\">4.</span> 可扩展性：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t在原有的基础上增加额外的功能 诺基亚5800</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t手机：大哥大---BB机---小灵通---黑白手机---和弦彩铃手机---苹果3 2G---苹果4 3G---4G---5G</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t单摄，双摄，三摄，四摄，AI神经......</pre></td></tr></table></figure><h3 id=\"类\"><a class=\"markdownIt-Anchor\" href=\"#类\">#</a> 类</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 类是对象共性的抽象</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 是客观对象在人脑中的主观反映</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 类是对象的模板</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>学生：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t属性：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 学籍</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 学号</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> 姓名</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token list punctuation\">4.</span> 性别</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token list punctuation\">5.</span> 班级</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token list punctuation\">6.</span> 专业</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token list punctuation\">7.</span> 情感状态</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t方法：</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 学习</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 吃饭</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> 睡觉</pre></td></tr></table></figure><ul>\n<li>编写一个类</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>类=属性+方法</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>语法：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t关键字：class 定义一个类</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tclass 类名:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t属性</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t方法</pre></td></tr></table></figure><ul>\n<li>属性</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 属性的分类</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 类属性</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">1.</span> 直接定义在类中的属性</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">2.</span> 类创建的所有对象都有对应的类属性，且属性值相同</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">3.</span> 类属性在使用的时候，不用创建一个对象</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t\t\t创建对象以后也可以使用</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">4.</span> 类属性属于类</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">5.</span> 类属性变化则所有对象全部发生变化</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t\t\t牵一发而动全身</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">6.</span> 可以通过：类名.新属性 = 值    来添加类属性</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">7.</span> 类属性的作用域：整个类，全类</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 实例属性</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">1.</span> 属于实例对象的属性---称之为实例属性</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">2.</span> 创建在方法内部的属性是实例属性</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\t<span class=\"token list punctuation\">1.</span> self.属性名=值</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t\t<span class=\"token list punctuation\">2.</span> 实例对象.新属性名=值</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">3.</span> 实例属性属于实例对象，通过类无法调用</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">4.</span> 实例属性如果发生改变，不影响其他的实例对象，更不影响类属性</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">5.</span> 实例对象如果要使用，必须进行实例化</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">6.</span> 如果实例属性和类属性发生命名冲突，在当前实例对象范围内，遮蔽类属性</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">7.</span> 实例属性的作用范围：这整个实例对象</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token list punctuation\">2.</span> 实例：</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t通过类创建的对象称之为实例</pre></td></tr></table></figure><ul>\n<li>小结</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 实例属性：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t各个实例各自拥有，相互之间不影响，不影响类</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 类属性：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t全类都拥有，有且只有一个值，类属性发生了更改，影响所有的实例对象</pre></td></tr></table></figure><h3 id=\"面向对象的特性\"><a class=\"markdownIt-Anchor\" href=\"#面向对象的特性\">#</a> 面向对象的特性</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>三大特性：封装、继承、多态</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">-</span> 什么是面向对象</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t封装、继承、多态</pre></td></tr></table></figure><h4 id=\"封装\"><a class=\"markdownIt-Anchor\" href=\"#封装\">#</a> 封装</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 任何对象都有一个边界，把属性和方法保护在边界之内，称为封装</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t数据隐藏</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 封装的粒度</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 粒度过小：造成每个单个对象过于简单，让开发过程和使用过程过于复杂</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 粒度过大：对象过于复杂，使用过程过于简单</pre></td></tr></table></figure><h4 id=\"继承\"><a class=\"markdownIt-Anchor\" href=\"#继承\">#</a> 继承</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>类</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>猫类、狗类、动物类、生物类\t满足 ？？？ is a ？？？的关系</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>父类：更加的抽象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>子类：更加的特殊、具体。子类继承父类的一些特性。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>class 子类类名(父类类名):</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>父类：基类，超类，BaseClass</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>object：是所有类的父类、基类、超类---根类</pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Teacher</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">study</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我会学习'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span>Teacher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat_shit</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我会吃*'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>tao <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>tao<span class=\"token punctuation\">.</span>eat_shit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>tao<span class=\"token punctuation\">.</span>study<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>继承的特点</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 子类可以继承父类的成员</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 子类能不能继承父类的私有成员</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 具有扩展性</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t父类扩展了子类</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">4.</span> 父类可以拥有多个子类，子类也可以拥有多个父类</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">5.</span> 如果子类有构造方法则使用子类的构造方法，如果子类没有构造方法，则向父类调用构造方法</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">6.</span> 如果子类没有写出任何的继承关系，默认继承object类</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tobject类中有构造方法</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token list punctuation\">7.</span> 子类可以调用父类的成员</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 属性</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 方法</pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Teacher1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\"># 父</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>yanzhi<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">,</span>hahaha<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>yanzhi <span class=\"token operator\">=</span> yanzhi</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        self<span class=\"token punctuation\">.</span>__money <span class=\"token operator\">=</span> money</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        self<span class=\"token punctuation\">.</span>salary <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>__money<span class=\"token operator\">*</span><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>yanzhi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我会唱'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        self<span class=\"token punctuation\">.</span>yanzhi <span class=\"token operator\">=</span> yanzhi</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">study</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我会学习'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Boy_Student</span><span class=\"token punctuation\">(</span>Teacher1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\"># 孙</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\"># def __init__(self,zhishang):</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">#     self.zhishang = zhishang</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\"># def eat_shit(self):</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">#     print (' 我会吃 *')</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">#     print(self.zhishang)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># class Girl_Student(Teacher):</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">#     pass</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>tao <span class=\"token operator\">=</span> Boy_Student<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\"># tao.play(20)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\"># tao.eat_shit()</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tao<span class=\"token punctuation\">.</span>salary<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tao<span class=\"token punctuation\">.</span>yanzhi<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\"># meng = Teacher()</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\"># tao = Boy_Student()</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\"># fei = Girl_Student()</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\"># tao.eat_shit()</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\"># tao.study()</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\"># tao.yanzhi = 0</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\"># fei.study()</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\"># print(tao.tizhong)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\"># print(tao.yanzhi)</span></pre></td></tr></table></figure><ul>\n<li>多继承</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 钻石继承问题(菱形继承问题)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t子类可以继承多个父类，且多个父类又继承了同一个父类</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t导致：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t越高级的父类，会被创建的次数越多。大量的浪费空间。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t多继承的形势下资源被浪费的问题</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 解决方案：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tsuper的底层，通过mro解决继承的调用问题</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tmro：继承链式关系---在整个继承网上，所有的类只会出现一次</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tsuper()的用法是指根据链式关系，调用本类右侧的类</pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Grand</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'grand'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">f1</span><span class=\"token punctuation\">(</span>Grand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'f1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">f2</span><span class=\"token punctuation\">(</span>Grand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'f2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">f3</span><span class=\"token punctuation\">(</span>Grand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'f3'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">f4</span><span class=\"token punctuation\">(</span>Grand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'f4'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">sun</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">,</span> f2<span class=\"token punctuation\">,</span> f3<span class=\"token punctuation\">,</span> f4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sun'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>s <span class=\"token operator\">=</span> sun<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sun<span class=\"token punctuation\">.</span>mro<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>多态性</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 向不同的对象发送同一条信息，不同的对象可以产生不同的行为</pre></td></tr></table></figure><h2 id=\"类-2\"><a class=\"markdownIt-Anchor\" href=\"#类-2\">#</a> 类</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>__init__<span class=\"token punctuation\">:</span>析构函数，在生成对象时调用</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>__del__<span class=\"token punctuation\">:</span>析构函数，释放对象时使用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>__repr__<span class=\"token punctuation\">:</span>打印，转换</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>__setitem__<span class=\"token punctuation\">:</span>按照索引赋值</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>__getitem__<span class=\"token punctuation\">:</span>按照索引获取值</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>__len__<span class=\"token punctuation\">:</span>获得长度</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>__cmp__<span class=\"token punctuation\">:</span>比较运算</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>__call__<span class=\"token punctuation\">:</span>函数调用</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>__add__<span class=\"token punctuation\">:</span>加运算</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>__sub__<span class=\"token punctuation\">:</span>减运算</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>__mul__<span class=\"token punctuation\">:</span>乘运算</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>__div__<span class=\"token punctuation\">:</span>除运算</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>__mod__<span class=\"token punctuation\">:</span>求余运算</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>__pow__<span class=\"token punctuation\">:</span>乘方</pre></td></tr></table></figure><p>类变量：</p>\n<ul>\n<li>通过<strong>类名</strong>修改类变量，会作用到所有的实例化对象，</li>\n<li>通过<strong>类对象</strong>是无法修改类变量的，通过类对象对类变量赋值，其本质将不再是修改类变量的值，而是再给该对象定义新的实例变量</li>\n</ul>\n<ol>\n<li>使用 <code>property</code>  会将方法转换为属性，调用时不需要加 ()，</li>\n<li>当给作用域中的一个变量赋值时，python 会默认将它当作当前作用域的局部变量</li>\n<li>子类若有定义的 <code>__init__()</code>  函数时，将不会自动继承父类的构造函数，因此在调用父类的函数时，会出现找不到属性，解决办法是在子类的 <code>__init__()</code>  添加 <code>super().__init__()</code></li>\n<li>即使类中存在私有属性，但在类外部使用时，仍然可以通过实例名._类名__xxx 来访问</li>\n<li><code>__slots__</code> 属性用来限制实例对象的属性，实例对象的实例属性最多只能在 <code>__slots__</code> 属性值范围内，如果子类没有 <code>__slots__</code> ，则不会继承父类的 <code>__slots__</code> 属性，如果子类继承了 <code>__slots__</code> ，则子类对象允许的实例化对象包括父类的 <code>__slots__</code> 属性值</li>\n</ol>\n<h2 id=\"模块\"><a class=\"markdownIt-Anchor\" href=\"#模块\">#</a> 模块</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python中的模块就是python中的文件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>模块：.py文件\t.pyc</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>程序的构成：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 顶层文件</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 各个模块</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>模块：module</pre></td></tr></table></figure><ul>\n<li>模块的特点</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 模块的概念：可以将代码量较大的程序，分割成若干个有组织、彼此独立又能相互调用的代码片段，这些有组织的代码，称为模块。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 模块在物理形式上，表现为：以.py为结尾的文件</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 一个文件可以被看做是一个模块，一个模块也可以被看做是一个文件</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 文件名：模块名+后缀</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> 每个模块都有自己的命名空间(变量的作用域)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">3.</span> python利用导入的形式，完成模块之间的相互调用</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t关键字：import</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t通过导入的形式，将多个模块之间关联起来，构成庞大的项目体系</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token list punctuation\">4.</span> 模块的特性：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t模块也是一个对象</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t模块中所有的类、变量、函数都当做模块本身的属性</pre></td></tr></table></figure><ul>\n<li>模块的导入</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 包：package</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 包是一个目录结构</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 包也是一个对象</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t\t<span class=\"token bold\"><span class=\"token punctuation\">__</span><span class=\"token content\">init</span><span class=\"token punctuation\">__</span></span>.py就是包对象的构造方法</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> 创建包：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t\t右键，new，python package</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">2.</span> 导入的形式</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> import 完整的模块名</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">1.</span> 只要使用引入的模块，就必须加上所有的包的路径</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">2.</span> 只要使用引入的模块，就必须加上所有的包的路径</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">3.</span> 只能导入模块级别的东西</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> import 完整的模块名 as xxx</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">1.</span> 使用更加方便</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">2.</span> 注意别名不要和模块中的其他属性和方法冲突</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>小结：</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t如果要导入多个模块</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 写多个import语句</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 写一个import语句，多个模块可以用逗号分开</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> 如果要起别名的话，需要分别起名</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token list punctuation\">3.</span> from 完整的模块名 import 属性</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 可以导入属性级别的数据</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 注意模块中的属性，不要和被导入的属性名冲突</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token list punctuation\">4.</span> from 完整的模块名 import 属性 as 别名</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 可以避免命名冲突问题</pre></td></tr></table></figure><ul>\n<li>模块的作用</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 提高了代码的可重用性</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 是封装的产物</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 也简化了流程</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">2.</span> 提高了代码的可读性</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> 减少了代码的冗余</pre></td></tr></table></figure><ul>\n<li>补充</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 模块中尽量不要书写逻辑代码</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\twhile，for，输入输出函数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 模块中应该只包含</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 类</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 函数</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> 变量</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token list punctuation\">4.</span> if name=='<span class=\"token bold\"><span class=\"token punctuation\">__</span><span class=\"token content\">main</span><span class=\"token punctuation\">__</span></span>'</pre></td></tr></table></figure><h2 id=\"计算复杂度公式\"><a class=\"markdownIt-Anchor\" href=\"#计算复杂度公式\">#</a> 计算复杂度公式</h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>a</mi><mi>T</mi><mo stretchy=\"false\">(</mo><mfrac><mi>N</mi><mi>b</mi></mfrac><mo stretchy=\"false\">)</mo><mo>+</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mi>d</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">T(N) = aT(\\frac{N}{b})+O(N^d)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.217331em;vertical-align:-0.345em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.872331em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.099108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1.</mn><mi>l</mi><mi>o</mi><msubsup><mi>g</mi><mi>b</mi><mi>a</mi></msubsup><mo>&lt;</mo><mi>d</mi><mo separator=\"true\">,</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mi>d</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">1. log_b^a &lt; d ,O(N^d)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9775479999999999em;vertical-align:-0.2831079999999999em;\"></span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.4168920000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2831079999999999em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.099108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2.</mn><mi>l</mi><mi>o</mi><msubsup><mi>g</mi><mi>b</mi><mi>a</mi></msubsup><mo>&gt;</mo><mi>d</mi><mo separator=\"true\">,</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mrow><mi>l</mi><mi>o</mi><msubsup><mi>g</mi><mi>b</mi><mi>a</mi></msubsup></mrow></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">2. log_b^a &gt; d,O(N^{log_b^a})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9775479999999999em;vertical-align:-0.2831079999999999em;\"></span><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.4168920000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2831079999999999em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.12998em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.87998em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7385428571428572em;\"><span style=\"top:-2.214em;margin-left:-0.03588em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3.</mn><mi>l</mi><mi>o</mi><msubsup><mi>g</mi><mi>b</mi><mi>a</mi></msubsup><mo>=</mo><mi>d</mi><mo separator=\"true\">,</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>N</mi><mi>d</mi></msup><mi>l</mi><mi>o</mi><msubsup><mi>g</mi><mn>2</mn><mi>n</mi></msubsup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">3.log_b^a=d,O(N^dlog_2^n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9775479999999999em;vertical-align:-0.2831079999999999em;\"></span><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.4168920000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2831079999999999em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.099108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mtext>：调用子问题的次数</mtext></mrow><annotation encoding=\"application/x-tex\">a：调用子问题的次数</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord cjk_fallback\">：</span><span class=\"mord cjk_fallback\">调</span><span class=\"mord cjk_fallback\">用</span><span class=\"mord cjk_fallback\">子</span><span class=\"mord cjk_fallback\">问</span><span class=\"mord cjk_fallback\">题</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">次</span><span class=\"mord cjk_fallback\">数</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mtext>：子问题的规模是原始问题的倍数</mtext></mrow><annotation encoding=\"application/x-tex\">b：子问题的规模是原始问题的倍数</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord cjk_fallback\">：</span><span class=\"mord cjk_fallback\">子</span><span class=\"mord cjk_fallback\">问</span><span class=\"mord cjk_fallback\">题</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">规</span><span class=\"mord cjk_fallback\">模</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord cjk_fallback\">原</span><span class=\"mord cjk_fallback\">始</span><span class=\"mord cjk_fallback\">问</span><span class=\"mord cjk_fallback\">题</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">倍</span><span class=\"mord cjk_fallback\">数</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mtext>：除递归以外的部分的算法时间复杂度</mtext></mrow><annotation encoding=\"application/x-tex\">d：除递归以外的部分的算法时间复杂度</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord cjk_fallback\">：</span><span class=\"mord cjk_fallback\">除</span><span class=\"mord cjk_fallback\">递</span><span class=\"mord cjk_fallback\">归</span><span class=\"mord cjk_fallback\">以</span><span class=\"mord cjk_fallback\">外</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">部</span><span class=\"mord cjk_fallback\">分</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">算</span><span class=\"mord cjk_fallback\">法</span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">间</span><span class=\"mord cjk_fallback\">复</span><span class=\"mord cjk_fallback\">杂</span><span class=\"mord cjk_fallback\">度</span></span></span></span></p>\n<h2 id=\"文件\"><a class=\"markdownIt-Anchor\" href=\"#文件\">#</a> 文件</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>计算机：硬件+软件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>硬件：CPU、显卡、硬盘、主板、机箱、....</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>软件：OS（operation System）、lol、IOS、OW</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>主板：承载各种硬件+传递命令+自主运算</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>内存：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 快、贵</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t缺点：一旦断电---寄</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t所有的程序，都是运行在内存中的</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>硬盘：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t便宜</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t永久存储---持久化</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t机械不能摔</pre></td></tr></table></figure><ul>\n<li>文件</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>txt py md xml doc docx xlsx xls pdf exe html cpp css dll bat jpg png gif avi psd ts m3u8 mp4 mp3 rmvb obj link</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 文件都是以计算机硬盘为载体存储在计算机上的信息集合</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t文件：可以是文本、图片、音频、视频</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t数据：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">1.</span> 直接存有价值</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token list punctuation\">2.</span> 价值通过分析获得</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t文件通常都拥有扩展名</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\thost文件没有扩展名</pre></td></tr></table></figure><ul>\n<li>打开文件</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> open(file,mode='',encoding='')</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t打开一个文件资源，返回一个I/O流</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tfile：接收一个字符串，字符串的内容是需要开流的文件的路径</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tmode：打开流的方式</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tencoding：编码</pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>模式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>r</td>\n<td>以只读的方式打开文件，文件的指针在头部</td>\n</tr>\n<tr>\n<td>rb</td>\n<td>以二进制的形式只读打开文件，文件指针在头部</td>\n</tr>\n<tr>\n<td>rb+</td>\n<td>以二进制的形式读写文件，文件指针在头部</td>\n</tr>\n<tr>\n<td>w</td>\n<td>以只写的方式打开文件，覆盖写，<strong>若不存在会创建新文件</strong></td>\n</tr>\n<tr>\n<td>wb</td>\n<td>以二进制只写的方式打开文件，覆盖写，若不存在会创建新文件</td>\n</tr>\n<tr>\n<td>wb+</td>\n<td>同上，若不存在会创建新文件</td>\n</tr>\n<tr>\n<td>a</td>\n<td>追加：以只写的形式打开文件，如果文件存在，则追加写，若不存在会创建新文件</td>\n</tr>\n<tr>\n<td>ab</td>\n<td>同上，二进制</td>\n</tr>\n<tr>\n<td>ab+</td>\n<td>同上，读写</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"pickle模块\"><a class=\"markdownIt-Anchor\" href=\"#pickle模块\">#</a> pickle 模块</h3>\n<p><em>实现了基本的数据序列和反序列化</em></p>\n<ul>\n<li>将数据对象保存到文件\n<ul>\n<li>pickle.dump(obj,file,[,protocal])</li>\n</ul>\n</li>\n<li>从 file 中读取字符串，并将它重构为原来的 Python 对象</li>\n</ul>\n<h2 id=\"常见的异常\"><a class=\"markdownIt-Anchor\" href=\"#常见的异常\">#</a> 常见的异常</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> TypeError</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> ValueError</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>...</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>..</pre></td></tr></table></figure><ul>\n<li>异常处理</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> try-except</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\ttry:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\t可能出现异常的代码</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\texcept 异常类型 as 变量:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t处理异常的代码</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token code keyword\">\t\t异常类型：异常的类名</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t变量：用于接收异常的具体信息</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t流程：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\ttry结构中如果出现了异常，则执行except中的代码</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\texcept中默认可以捕获所有异常</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\ttry-except结构可以嵌套使用</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token list punctuation\">2.</span> try-except-finally</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\ttry:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t可能出现的异常代码</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\texcept 异常类型 as 变量:</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t处理异常的代码</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tfinally:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t无论如何都会执行的代码</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token code keyword\">\t\tfinally：一般用于释放资源，或者无论如何都必须执行的代码（持久化）</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token list punctuation\">3.</span> 可以嵌套使用</pre></td></tr></table></figure><h3 id=\"自定义异常\"><a class=\"markdownIt-Anchor\" href=\"#自定义异常\">#</a> 自定义异常</h3>\n<ul>\n<li>raise 语句</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>主动抛出一个异常</pre></td></tr></table></figure><ul>\n<li>自定义异常</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 自己定义一个异常的类</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 必须直接或者间接的继承一个BaseException</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tBaseException是所有的异常的类的父类</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> raise 异常类() 表示创建异常类的实例对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t括号可以省略，编译器会自动添加小括号，表示创建对象</pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'start'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    l <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">raise</span> IAmHungry<span class=\"token punctuation\">(</span><span class=\"token string\">'我已经三天没吃饭了'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">except</span> IAmHungry <span class=\"token keyword\">as</span> reason<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">IAmHungry</span><span class=\"token punctuation\">(</span>BaseException<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>else 语句</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> if-else</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t表示执行if判断为False的情况下的代码</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> for-else</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t当循环正常结束时执行else，否则不执行</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> while-else</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t当循环正常结束时执行else，否则不执行</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">4.</span> try-except-else/try-except-else-fianlly</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t当try中没有出现任何异常，则执行else，否则不执行</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tfinally必须在最后</pre></td></tr></table></figure><h2 id=\"标准库\"><a class=\"markdownIt-Anchor\" href=\"#标准库\">#</a> 标准库</h2>\n<ul>\n<li>\n<p>操作系统接口 os</p>\n</li>\n<li>\n<p>文件通配符 glob</p>\n<ul>\n<li>提供了一个函数用于从目录通配符搜索文件列表</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> glob</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>glob<span class=\"token punctuation\">.</span>glob<span class=\"token punctuation\">(</span><span class=\"token string\">'*.py'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>命令行参数 sys</p>\n<ul>\n<li>命令行参数以链表形式存储于 sys 的 argv 变量</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>测试模块</p>\n<ul>\n<li>doctest 模块</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 扫描模块，并根据程序中内嵌的文档字符串执行测试</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> doctest</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>doctest<span class=\"token punctuation\">.</span>testmod<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 自动验证嵌入测试</span></pre></td></tr></table></figure><ul>\n<li>unittest 模块</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 需要继承</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> unittest</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">(</span>unittest<span class=\"token punctuation\">.</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>unittest<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9waWMubmV0Ymlhbi5jb20vZG93bnBpYy5waHA/aWQ9Mjc5NzgmYW1wO2NsYXNzaWQ9NTQ=\">https://pic.netbian.com/downpic.php?id=27978&amp;classid=54</span></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Request URL<span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>pic<span class=\"token punctuation\">.</span>netbian<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>downpic<span class=\"token punctuation\">.</span>php?<span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">27978</span><span class=\"token operator\">&amp;</span>classid<span class=\"token operator\">=</span><span class=\"token number\">54</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Request Method<span class=\"token punctuation\">:</span> GET</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Status Code<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Remote Address<span class=\"token punctuation\">:</span> <span class=\"token number\">125.39</span><span class=\"token number\">.239</span><span class=\"token number\">.207</span><span class=\"token punctuation\">:</span><span class=\"token number\">443</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Referrer Policy<span class=\"token punctuation\">:</span> strict<span class=\"token operator\">-</span>origin<span class=\"token operator\">-</span>when<span class=\"token operator\">-</span>cross<span class=\"token operator\">-</span>origin</pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>content<span class=\"token operator\">-</span>disposition<span class=\"token punctuation\">:</span> attachment<span class=\"token punctuation\">;</span> filename<span class=\"token operator\">=</span><span class=\"token string\">\"cosplayÃÀÅ® µçÄÔ×À ¼üÅÌ »ú·¿ ¿É°® Ð¡½ã½ã4k±ÚÖ½3840x2160_±Ë°¶Í¼Íø.jpg\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>content<span class=\"token operator\">-</span>length<span class=\"token punctuation\">:</span> <span class=\"token number\">3875629</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>content<span class=\"token operator\">-</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">:</span> image<span class=\"token operator\">/</span>jpg</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>date<span class=\"token punctuation\">:</span> Sun<span class=\"token punctuation\">,</span> <span class=\"token number\">25</span> Sep <span class=\"token number\">2022</span> <span class=\"token number\">02</span><span class=\"token punctuation\">:</span><span class=\"token number\">38</span><span class=\"token punctuation\">:</span><span class=\"token number\">49</span> GMT</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>server<span class=\"token punctuation\">:</span> yunjiasu</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin\">set</span><span class=\"token operator\">-</span>cookie<span class=\"token punctuation\">:</span> zkhandownid27978<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> expires<span class=\"token operator\">=</span>Sun<span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token operator\">-</span>Sep<span class=\"token operator\">-</span><span class=\"token number\">2022</span> <span class=\"token number\">02</span><span class=\"token punctuation\">:</span><span class=\"token number\">41</span><span class=\"token punctuation\">:</span><span class=\"token number\">49</span> GMT<span class=\"token punctuation\">;</span> Max<span class=\"token operator\">-</span>Age<span class=\"token operator\">=</span><span class=\"token number\">180</span><span class=\"token punctuation\">;</span> path<span class=\"token operator\">=</span><span class=\"token operator\">/</span><span class=\"token punctuation\">;</span> secure</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>strict<span class=\"token operator\">-</span>transport<span class=\"token operator\">-</span>security<span class=\"token punctuation\">:</span> <span class=\"token builtin\">max</span><span class=\"token operator\">-</span>age<span class=\"token operator\">=</span><span class=\"token number\">31536000</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>yjs<span class=\"token operator\">-</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">:</span> bb33d140c8bc3527<span class=\"token operator\">-</span><span class=\"token number\">136</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">:</span>authority<span class=\"token punctuation\">:</span> pic<span class=\"token punctuation\">.</span>netbian<span class=\"token punctuation\">.</span>com</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">:</span>method<span class=\"token punctuation\">:</span> GET</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">:</span>path<span class=\"token punctuation\">:</span> <span class=\"token operator\">/</span>downpic<span class=\"token punctuation\">.</span>php?<span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">27978</span><span class=\"token operator\">&amp;</span>classid<span class=\"token operator\">=</span><span class=\"token number\">54</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">:</span>scheme<span class=\"token punctuation\">:</span> https</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>accept<span class=\"token punctuation\">:</span> text<span class=\"token operator\">/</span>html<span class=\"token punctuation\">,</span>application<span class=\"token operator\">/</span>xhtml<span class=\"token operator\">+</span>xml<span class=\"token punctuation\">,</span>application<span class=\"token operator\">/</span>xml<span class=\"token punctuation\">;</span>q<span class=\"token operator\">=</span><span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span>image<span class=\"token operator\">/</span>avif<span class=\"token punctuation\">,</span>image<span class=\"token operator\">/</span>webp<span class=\"token punctuation\">,</span>image<span class=\"token operator\">/</span>apng<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span><span class=\"token operator\">/</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>q<span class=\"token operator\">=</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span>application<span class=\"token operator\">/</span>signed<span class=\"token operator\">-</span>exchange<span class=\"token punctuation\">;</span>v<span class=\"token operator\">=</span>b3<span class=\"token punctuation\">;</span>q<span class=\"token operator\">=</span><span class=\"token number\">0.9</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>accept<span class=\"token operator\">-</span>encoding<span class=\"token punctuation\">:</span> gzip<span class=\"token punctuation\">,</span> deflate<span class=\"token punctuation\">,</span> br</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>accept<span class=\"token operator\">-</span>language<span class=\"token punctuation\">:</span> zh<span class=\"token operator\">-</span>CN<span class=\"token punctuation\">,</span>zh<span class=\"token punctuation\">;</span>q<span class=\"token operator\">=</span><span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span>en<span class=\"token operator\">-</span>CN<span class=\"token punctuation\">;</span>q<span class=\"token operator\">=</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">,</span>en<span class=\"token punctuation\">;</span>q<span class=\"token operator\">=</span><span class=\"token number\">0.7</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cache<span class=\"token operator\">-</span>control<span class=\"token punctuation\">:</span> no<span class=\"token operator\">-</span>cache</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>cookie<span class=\"token punctuation\">:</span> __yjs_duid<span class=\"token operator\">=</span>1_97380971d1bcffc2eb14110f65cd007a1664012187158<span class=\"token punctuation\">;</span> Hm_lvt_c59f2e992a863c2744e1ba985abaea6c<span class=\"token operator\">=</span><span class=\"token number\">1663901444</span><span class=\"token punctuation\">,</span><span class=\"token number\">1664073007</span><span class=\"token punctuation\">;</span> PHPSESSID<span class=\"token operator\">=</span>4a2gfsa06qege1vif14tjmepc4<span class=\"token punctuation\">;</span> zkhanmlusername<span class=\"token operator\">=</span>qq794559162821<span class=\"token punctuation\">;</span> zkhanmluserid<span class=\"token operator\">=</span><span class=\"token number\">5250963</span><span class=\"token punctuation\">;</span> zkhanmlgroupid<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> zkhanmlrnd<span class=\"token operator\">=</span>1AT5p7vzlHVDM8Trwaqy<span class=\"token punctuation\">;</span> zkhanmlauth<span class=\"token operator\">=</span>3f84c1235239d8e41058818b136c9125<span class=\"token punctuation\">;</span> Hm_lpvt_c59f2e992a863c2744e1ba985abaea6c<span class=\"token operator\">=</span><span class=\"token number\">1664073438</span><span class=\"token punctuation\">;</span> zkhandownid27978<span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>cookie<span class=\"token punctuation\">:</span> __yjs_duid<span class=\"token operator\">=</span>1_97380971d1bcffc2eb14110f65cd007a1664012187158<span class=\"token punctuation\">;</span> Hm_lvt_c59f2e992a863c2744e1ba985abaea6c<span class=\"token operator\">=</span><span class=\"token number\">1663901444</span><span class=\"token punctuation\">,</span><span class=\"token number\">1664073007</span><span class=\"token punctuation\">;</span> PHPSESSID<span class=\"token operator\">=</span>4a2gfsa06qege1vif14tjmepc4<span class=\"token punctuation\">;</span> zkhanmlusername<span class=\"token operator\">=</span>qq794559162821<span class=\"token punctuation\">;</span> zkhanmluserid<span class=\"token operator\">=</span><span class=\"token number\">5250963</span><span class=\"token punctuation\">;</span> zkhanmlgroupid<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> zkhanmlrnd<span class=\"token operator\">=</span>1AT5p7vzlHVDM8Trwaqy<span class=\"token punctuation\">;</span> zkhanmlauth<span class=\"token operator\">=</span>3f84c1235239d8e41058818b136c9125<span class=\"token punctuation\">;</span> zkhanecookieclassrecord<span class=\"token operator\">=</span><span class=\"token operator\">%</span>2C66<span class=\"token operator\">%</span>2C<span class=\"token punctuation\">;</span> Hm_lpvt_c59f2e992a863c2744e1ba985abaea6c<span class=\"token operator\">=</span><span class=\"token number\">1664074393</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>pragma<span class=\"token punctuation\">:</span> no<span class=\"token operator\">-</span>cache</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>referer<span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>pic<span class=\"token punctuation\">.</span>netbian<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>tupian<span class=\"token operator\">/</span><span class=\"token number\">27978</span><span class=\"token punctuation\">.</span>html</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>sec<span class=\"token operator\">-</span>ch<span class=\"token operator\">-</span>ua<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Google Chrome\"</span><span class=\"token punctuation\">;</span>v<span class=\"token operator\">=</span><span class=\"token string\">\"105\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Not)A;Brand\"</span><span class=\"token punctuation\">;</span>v<span class=\"token operator\">=</span><span class=\"token string\">\"8\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Chromium\"</span><span class=\"token punctuation\">;</span>v<span class=\"token operator\">=</span><span class=\"token string\">\"105\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>sec<span class=\"token operator\">-</span>ch<span class=\"token operator\">-</span>ua<span class=\"token operator\">-</span>mobile<span class=\"token punctuation\">:</span> ?<span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>sec<span class=\"token operator\">-</span>ch<span class=\"token operator\">-</span>ua<span class=\"token operator\">-</span>platform<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Windows\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>sec<span class=\"token operator\">-</span>fetch<span class=\"token operator\">-</span>dest<span class=\"token punctuation\">:</span> iframe</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>sec<span class=\"token operator\">-</span>fetch<span class=\"token operator\">-</span>mode<span class=\"token punctuation\">:</span> navigate</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>sec<span class=\"token operator\">-</span>fetch<span class=\"token operator\">-</span>site<span class=\"token punctuation\">:</span> same<span class=\"token operator\">-</span>origin</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>upgrade<span class=\"token operator\">-</span>insecure<span class=\"token operator\">-</span>requests<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>user<span class=\"token operator\">-</span>agent<span class=\"token punctuation\">:</span> Mozilla<span class=\"token operator\">/</span><span class=\"token number\">5.0</span> <span class=\"token punctuation\">(</span>Windows NT <span class=\"token number\">10.0</span><span class=\"token punctuation\">;</span> Win64<span class=\"token punctuation\">;</span> x64<span class=\"token punctuation\">)</span> AppleWebKit<span class=\"token operator\">/</span><span class=\"token number\">537.36</span> <span class=\"token punctuation\">(</span>KHTML<span class=\"token punctuation\">,</span> like Gecko<span class=\"token punctuation\">)</span> Chrome<span class=\"token operator\">/</span><span class=\"token number\">105.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span> Safari<span class=\"token operator\">/</span><span class=\"token number\">537.36</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token string\">':authority'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'pic.netbian.com'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token string\">':method'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token string\">':path'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'/downpic.php?id=27978&amp;classid=54'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token string\">':scheme'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token string\">'accept'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token string\">'accept-encoding'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'gzip, deflate, br'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token string\">'accept-language'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'zh-CN,zh;q=0.9,en-CN;q=0.8,en;q=0.7'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token string\">'cache-control'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'no-cache'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token string\">'cookie'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'__yjs_duid=1_97380971d1bcffc2eb14110f65cd007a1664012187158; Hm_lvt_c59f2e992a863c2744e1ba985abaea6c=1663901444,1664073007; PHPSESSID=4a2gfsa06qege1vif14tjmepc4; zkhanmlusername=qq794559162821; zkhanmluserid=5250963; zkhanmlgroupid=1; zkhanmlrnd=1AT5p7vzlHVDM8Trwaqy; zkhanmlauth=3f84c1235239d8e41058818b136c9125; zkhanecookieclassrecord=%2C66%2C; Hm_lpvt_c59f2e992a863c2744e1ba985abaea6c=1664075439'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token string\">'pragma'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'no-cache'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token string\">'referer'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://pic.netbian.com/tupian/27978.html'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token string\">'sec-ch-ua'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'\"Google Chrome\";v=\"105\", \"Not)A;Brand\";v=\"8\", \"Chromium\";v=\"105\"'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token string\">'sec-ch-ua-mobile'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'?0'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token string\">'sec-ch-ua-platform'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Windows\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token string\">'sec-fetch-dest'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'iframe'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token string\">'sec-fetch-mode'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'navigate'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token string\">'sec-fetch-site'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'same-origin'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token string\">'upgrade-insecure-requests'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token string\">'user-agent'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36'</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>cookie<span class=\"token punctuation\">:</span> __yjs_duid<span class=\"token operator\">=</span>1_97380971d1bcffc2eb14110f65cd007a1664012187158<span class=\"token punctuation\">;</span> Hm_lvt_c59f2e992a863c2744e1ba985abaea6c<span class=\"token operator\">=</span><span class=\"token number\">1663901444</span><span class=\"token punctuation\">,</span><span class=\"token number\">1664073007</span><span class=\"token punctuation\">;</span> PHPSESSID<span class=\"token operator\">=</span>4a2gfsa06qege1vif14tjmepc4<span class=\"token punctuation\">;</span> zkhanmlusername<span class=\"token operator\">=</span>qq794559162821<span class=\"token punctuation\">;</span> zkhanmluserid<span class=\"token operator\">=</span><span class=\"token number\">5250963</span><span class=\"token punctuation\">;</span> zkhanmlgroupid<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> zkhanmlrnd<span class=\"token operator\">=</span>1AT5p7vzlHVDM8Trwaqy<span class=\"token punctuation\">;</span> zkhanmlauth<span class=\"token operator\">=</span>3f84c1235239d8e41058818b136c9125<span class=\"token punctuation\">;</span> zkhanecookieclassrecord<span class=\"token operator\">=</span><span class=\"token operator\">%</span>2C66<span class=\"token operator\">%</span>2C<span class=\"token punctuation\">;</span> Hm_lpvt_c59f2e992a863c2744e1ba985abaea6c<span class=\"token operator\">=</span><span class=\"token number\">1664075752</span></pre></td></tr></table></figure>",
            "tags": [
                "语言",
                "Python",
                "Python"
            ]
        },
        {
            "id": "http://example.com/computer-science/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/",
            "url": "http://example.com/computer-science/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/",
            "title": "数据结构与算法",
            "date_published": "2022-08-28T15:13:37.424Z",
            "content_html": "<h1 id=\"数据结构\"><a class=\"markdownIt-Anchor\" href=\"#数据结构\">#</a> 数据结构</h1>\n<h2 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\">#</a> 数组</h2>\n<p>数组的优点:</p>\n<ul>\n<li>存取速度快</li>\n</ul>\n<p>数组的缺点:</p>\n<ul>\n<li>事先必须知道数组的长度</li>\n<li>插入删除元素很慢</li>\n<li>空间通常是有限制的</li>\n<li>需要大块连续的内存块</li>\n<li>插入删除元素的效率很低</li>\n</ul>\n<h3 id=\"把数组中的-0-移到末尾\"><a class=\"markdownIt-Anchor\" href=\"#把数组中的-0-移到末尾\">#</a> 把数组中的 0 移到末尾</h3>\n<ul>\n<li>用一个辅助变量 <code>index</code>  指向第一个元素，依次判断</li>\n<li>若不为 0，则 <code>index</code>  下标所在位置替换为该元素，同时 <code>index++</code></li>\n<li>剩余后几位依次补 0</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># test01---283</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 把数组中的 0 移到末尾</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">method1</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">:</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    index <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> l<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> num <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            nums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> num</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">while</span> index <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        nums<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> l</pre></td></tr></table></figure><h3 id=\"改变数组的维度\"><a class=\"markdownIt-Anchor\" href=\"#改变数组的维度\">#</a> 改变数组的维度</h3>\n<ul>\n<li>首先判断是否可以进行转化</li>\n<li>根据输入的行数和列数，构建一个空矩阵</li>\n<li>遍历该空矩阵，找寻规律（类似商和余数）依次填入</li>\n<li><code>new_nums[i][j] = nums[index // n][index % n]</code></li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># test02---566</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 改变数组的维度</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># [[1,2],[3,4]] --->[[1,2,3,4]]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">:</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    m<span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> m <span class=\"token operator\">*</span> n <span class=\"token operator\">!=</span> r <span class=\"token operator\">*</span> c<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'无法转换'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> nums</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    new_nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    index <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            new_nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>index <span class=\"token operator\">//</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>index <span class=\"token operator\">%</span> n<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> new_nums</pre></td></tr></table></figure><h3 id=\"找出数组中最长的连续-1\"><a class=\"markdownIt-Anchor\" href=\"#找出数组中最长的连续-1\">#</a> 找出数组中最长的连续 1</h3>\n<ul>\n<li>假设最开始连续数为 0</li>\n<li>依次遍历，如果是 1 且连续则利用 <code>math.max</code>  替换，</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># test03---485</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># nums = [1,1,0,1,1,1] ---> 3</span></pre></td></tr></table></figure><h3 id=\"稀疏矩阵\"><a class=\"markdownIt-Anchor\" href=\"#稀疏矩阵\">#</a> 稀疏矩阵</h3>\n<p><em>当一个二维矩阵中大多数为 0，或同一个数字时采用稀疏矩阵</em></p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>数组的下标寻址非常快，由于计算机内存限制，数组的长度也有限制</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>--></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>后提出了二分查找，要求数组的构造一定有序，解决了普通数组查找复杂度过高的问题</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>--></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>在增删改比较频繁的数据结构中，数组不会被优先考虑</pre></td></tr></table></figure><ul>\n<li>\n<p>三元组</p>\n<ul>\n<li>\n<p>将二维数组转为稀疏数组</p>\n<ul>\n<li>遍历原始二维数组，得到有效个数 sum</li>\n<li>创建稀疏数组 spare int [sum+1] [3]</li>\n<li>将二维数组的有效值存入稀疏数组</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 生成二维数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 得到有效数值的个数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 创建稀疏数组</span></pre></td></tr></table></figure></li>\n<li>\n<p>将稀疏数组存盘，转换为二维数组</p>\n<ul>\n<li>读取稀疏数组的第一行，创建原始二维数组</li>\n<li>读取后几行数据写入原始数组</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>十字链表</p>\n</li>\n</ul>\n<h2 id=\"队列\"><a class=\"markdownIt-Anchor\" href=\"#队列\">#</a> 队列</h2>\n<p><em>为了防止假溢出或者假满的问题，一般将顺序队列转换为循环队列</em></p>\n<p><img data-src=\"/images/image/DataStructure/queue-01.png\" alt=\"queue-01\"></p>\n<p>当前元素：（rear-front+MAXSIZE）% MAXSIZE</p>\n<h2 id=\"链表\"><a class=\"markdownIt-Anchor\" href=\"#链表\">#</a> 链表</h2>\n<p><em>它的结构被证明不适合查找</em></p>\n<h4 id=\"创建单链表\"><a class=\"markdownIt-Anchor\" href=\"#创建单链表\">#</a> 创建单链表</h4>\n<ul>\n<li>\n<p>定义每个结点</p>\n</li>\n<li>\n<p>定义单链表</p>\n</li>\n</ul>\n<h4 id=\"增删改\"><a class=\"markdownIt-Anchor\" href=\"#增删改\">#</a> 增删改</h4>\n<ul>\n<li>添加节点，往末尾追加</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加结点，不考虑编号\t</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 通过一个辅助指针 (变量) 来帮助找到添加的位置</span></pre></td></tr></table></figure><ul>\n<li>增加节点，往指定位置</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加节点，考虑编号</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 通过一个辅助指针 (变量) 来帮助找到添加的位置</span></pre></td></tr></table></figure><ul>\n<li>修改</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 修改节点的信息，根据 no 编号来修改，即 no 编号不能改</span></pre></td></tr></table></figure><ul>\n<li>删除</li>\n</ul>\n<h4 id=\"求单链表有效长度的个数\"><a class=\"markdownIt-Anchor\" href=\"#求单链表有效长度的个数\">#</a> 求单链表有效长度的个数</h4>\n<h4 id=\"查找单链表中的倒数第k个结点\"><a class=\"markdownIt-Anchor\" href=\"#查找单链表中的倒数第k个结点\">#</a> 查找单链表中的倒数第 k 个结点</h4>\n<ul>\n<li>编写一个方法接收节点，index</li>\n<li>先将链表从头到尾遍历，得到总长度</li>\n<li>得到后从头开始遍历，若存在则取出</li>\n</ul>\n<h4 id=\"单链表的反转\"><a class=\"markdownIt-Anchor\" href=\"#单链表的反转\">#</a> 单链表的反转</h4>\n<ul>\n<li>如果当前链表为空，或者只有一个节点，无需反转，直接返回</li>\n<li>定义一个辅助的指针 (变量)，帮助我们遍历原来的链表</li>\n<li>指向当前节点 [cur] 的下一个节点</li>\n<li>遍历原来的链表，每遍历一个节点，就将其取出，并放在新的链表  <code>reverseHead</code>  的最前端</li>\n<li>将 cur 的下一个节点指向新的链表的最前端</li>\n<li>将 cur 连接到新的链表上</li>\n</ul>\n<h4 id=\"从尾到头打印单链表\"><a class=\"markdownIt-Anchor\" href=\"#从尾到头打印单链表\">#</a> 从尾到头打印单链表</h4>\n<p><em>反向遍历，用 stack 实现</em></p>\n<ul>\n<li>\n<p>方式一：先将单链表进行翻转操作，然后遍历，<em>破坏了原有链表的结构，不建议</em></p>\n</li>\n<li>\n<p>方式二：利用栈数据结构，将各个节点压入栈</p>\n</li>\n</ul>\n<h4 id=\"合并两个有序的单链表合并之后的链表依然有序\"><a class=\"markdownIt-Anchor\" href=\"#合并两个有序的单链表合并之后的链表依然有序\">#</a> 合并两个有序的单链表，合并之后的链表依然有序</h4>\n<h3 id=\"双向链表\"><a class=\"markdownIt-Anchor\" href=\"#双向链表\">#</a> 双向链表</h3>\n<ul>\n<li>\n<p>区别：</p>\n<ul>\n<li>单向链表的缺点：查找方向只能是一个，双向链表可以向前或向后查找</li>\n<li>单向链表需要辅助接点才能删除，双链表可以自我删除</li>\n</ul>\n</li>\n<li>\n<p>遍历</p>\n<ul>\n<li>与单链表相同，可以向前或者向后查找</li>\n</ul>\n</li>\n<li>\n<p>添加 (默认添加到双链表的最后)</p>\n<ul>\n<li>先找到双向链表的最后这个结点</li>\n<li><code>temp.next =newHeroNode;</code></li>\n<li><code>newHeroNode.pre=temp</code></li>\n</ul>\n</li>\n<li>\n<p>删除</p>\n<ul>\n<li>可以实现自我删除</li>\n<li><code>temp.pre.next=temp.next;</code></li>\n<li><code>temp.next.pre=temp.pre</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"约瑟夫环问题\"><a class=\"markdownIt-Anchor\" href=\"#约瑟夫环问题\">#</a> <em>约瑟夫环问题</em></h2>\n<p><code>Josephu </code> 问题为：设编号为 1，2，… n 的 n 个人围坐一圈，约定编号为 k（1&lt;=k&lt;=n）的人从 1 开始报数，数 到 m 的那个人出列，它的下一位又从 1 开始报数，数到 m 的那个人又出列，依次类推，直到所有人出列为止，由 此产生一个出队编号的序列。</p>\n<ul>\n<li>\n<p>创建环形链表</p>\n<ul>\n<li>先创建第一个节点，让 first 指向第一个节点，并形成环形</li>\n<li>每次创建新节点时，直接加入到环形链表中即可</li>\n</ul>\n</li>\n<li>\n<p>遍历环形链表</p>\n<ul>\n<li>先让一个辅助变量 cur 指向 first 结点，</li>\n<li>通过 <code>while</code>  循环遍历， <code>cur.next==first</code>  结束</li>\n</ul>\n</li>\n<li>\n<p>小孩出圈问题</p>\n<ul>\n<li>创建要给辅助指针，帮助完成小孩出圈</li>\n<li>小孩报数前，先让  <code>first</code>  和  <code>helper </code> 移动 k - 1 次</li>\n<li>当小孩报数时，让 <code>first</code>  和  <code>helper </code> 指针同时 的移动 m - 1 次，然后出圈</li>\n<li>让 <code>first</code>  和  <code>helper</code>  指针同时 的移动  <code>countNum</code>  - 1</li>\n<li>这时  <code>first</code>  指向的节点，就是要出圈的小孩节点</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"栈\"><a class=\"markdownIt-Anchor\" href=\"#栈\">#</a> 栈</h2>\n<p><em>stack, 先进后出的有序列表</em></p>\n<blockquote>\n<p>应用场景</p>\n</blockquote>\n<ul>\n<li>子程序的调用：跳往子程序之前，会先将下个指令的地址存入堆栈中，直到子程序执行后将地址取出</li>\n<li>处理递归调用：在子程序的基础上，将参数，区域变量等数据存入栈中</li>\n<li>表达式的转换与求值</li>\n<li>二叉树的遍历</li>\n<li>图形的深度优先搜索</li>\n</ul>\n<h2 id=\"表达式\"><a class=\"markdownIt-Anchor\" href=\"#表达式\">#</a> 表达式</h2>\n<ul>\n<li>\n<p>前缀表达式 (<strong>波兰表达式</strong>)</p>\n<ul>\n<li>从右至左扫描</li>\n</ul>\n</li>\n<li>\n<p>中缀表达式</p>\n<ul>\n<li>一般转化为后缀表达式</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>将中缀表达式“1+((2+3)×4)-5”转换为后缀表达式</pre></td></tr></table></figure><p><img data-src=\"/images/image/DataStructure/02.png\" alt=\"中缀表达式\"></p>\n</li>\n<li>\n<p>后缀表达式 (<strong>逆波兰表达式</strong>)</p>\n<ul>\n<li>从左至右扫描</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"递归\"><a class=\"markdownIt-Anchor\" href=\"#递归\">#</a> 递归</h2>\n<p><em>自己调用自己</em></p>\n<blockquote>\n<p>调用机制：当程序执行一个方法时，会开辟一个独立的空间</p>\n</blockquote>\n<h2 id=\"递归-迷宫问题\"><a class=\"markdownIt-Anchor\" href=\"#递归-迷宫问题\">#</a> 递归 - 迷宫问题</h2>\n<ul>\n<li>小球得到的路径，与设置的查找策略有关：找路的上下左右顺序</li>\n</ul>\n<h2 id=\"递归-八皇后问题\"><a class=\"markdownIt-Anchor\" href=\"#递归-八皇后问题\">#</a> 递归 - 八皇后问题</h2>\n<blockquote>\n<p><strong>任意两个皇后都不能处于同一行、</strong> <strong>同一列或同一斜线上，问有多少种摆法</strong></p>\n</blockquote>\n<ul>\n<li>第一个皇后先放第一行第一列</li>\n<li>第二个皇后放在第二行第一列、然后判断是否 OK， 如果不 OK，继续放在第二列、第三列、依次把所有列都 放完，找到一个合适</li>\n<li>继续第三个皇后，还是第一列、第二列…… 直到第 8 个皇后也能放在一个不冲突的位置，算是找到了一个正确 解</li>\n<li>当得到一个正确解时，在栈回退到上一个栈时，就会开始回溯，即将第一个皇后，放到第一列的所有正确解， 全部得到</li>\n<li>然后回头继续第一个皇后放第二列，后面继续循环执行 1,2,3,4 的步骤</li>\n</ul>\n<h2 id=\"排序\"><a class=\"markdownIt-Anchor\" href=\"#排序\">#</a> 排序</h2>\n<p>度量程序执行时间的方法：</p>\n<ul>\n<li>事后统计法</li>\n<li>事前估算法</li>\n</ul>\n<p>时间复杂度：</p>\n<p>​\t常见的算法时间复杂度由小到大依次为：$Ο(1)＜Ο(log2n)＜Ο(n)＜Ο(nlog2n)＜Ο(n2)＜Ο(n3)＜ Ο(nk) ＜ Ο(2n) $</p>\n<p>，随着问题规模 n 的不断增大，上述时间复杂度不断增大，算法的执行效率越低</p>\n<p><img data-src=\"/images/image/DataStructure/reverse.png\" alt=\"\"></p>\n<p><mark>不稳定：快些选堆</mark></p>\n<p><strong>时间快：快些归队</strong></p>\n<h3 id=\"冒泡排序\"><a class=\"markdownIt-Anchor\" href=\"#冒泡排序\">#</a> 冒泡排序</h3>\n<blockquote>\n<p>依次比较 相邻元素的值，若发现逆序则交换</p>\n</blockquote>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        flag <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                flag <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> flag<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span></pre></td></tr></table></figure><h3 id=\"选择排序\"><a class=\"markdownIt-Anchor\" href=\"#选择排序\">#</a> 选择排序</h3>\n<blockquote>\n<p>找到序列中最小的一个元素，依次放到首位</p>\n</blockquote>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span></pre></td></tr></table></figure><p><img data-src=\"/images/image/DataStructure/reverse-03.png\" alt=\"选择排序\"></p>\n<h3 id=\"插入排序\"><a class=\"markdownIt-Anchor\" href=\"#插入排序\">#</a> 插入排序</h3>\n<blockquote>\n<p><strong>把</strong> <strong>n</strong> <strong>个待排序的元素看成为一个有序表和一个无序表</strong>，开始时<strong>有</strong></p>\n<p><strong>序表中只包含一个元素</strong>，无序表中包含有 <strong>n-1</strong> <strong>个元素</strong>，</p>\n</blockquote>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span></pre></td></tr></table></figure><p><img data-src=\"/images/image/DataStructure/reverse-02.png\" alt=\"插入排序\"></p>\n<h3 id=\"希尔排序\"><a class=\"markdownIt-Anchor\" href=\"#希尔排序\">#</a> 希尔排序</h3>\n<blockquote>\n<p>是<strong>简单插入</strong>排序经过改进后的高效版本，也称为缩小增量排序</p>\n</blockquote>\n<ul>\n<li>初始增量为 <code>length/2</code> , 即将数组分为 <code>length/2</code>  个组，对每组进行快速排序</li>\n<li>然后继续缩小增量</li>\n</ul>\n<p><img data-src=\"/images/image/DataStructure/reverse-01.png\" alt=\"希尔排序\"></p>\n<h3 id=\"快速排序\"><a class=\"markdownIt-Anchor\" href=\"#快速排序\">#</a> 快速排序</h3>\n<blockquote>\n<p>对<strong>冒泡排序</strong>的改进，递归分治法</p>\n</blockquote>\n<p><em>快速排序在每一轮挑选一个基准元素，并让其他比它大的元素移动到数列一边，比它小的元素移动到数列的另一边，从而把数列拆解成了两个部分</em></p>\n<ul>\n<li>时间复杂度：每轮拆分为两部分，平均时间复杂度是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>空间复杂度：使用本身空间进行排序，空间复杂度是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token title important\"><span class=\"token punctuation\">#</span>例如</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>[1, 5, 3, 4, 2, 8, 7, 6]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>基准：1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    --></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    index=1,left=1,right=6</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    --></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    6>1</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    --></pre></td></tr></table></figure><p><img data-src=\"/images/image/DataStructure/reverse-04.png\" alt=\"快速排序\"></p>\n<h3 id=\"归并排序\"><a class=\"markdownIt-Anchor\" href=\"#归并排序\">#</a> 归并排序</h3>\n<p><em>利用归并的思想实现的排序方法</em></p>\n<h3 id=\"基数排序桶排序\"><a class=\"markdownIt-Anchor\" href=\"#基数排序桶排序\">#</a> 基数排序 (桶排序)</h3>\n<p><img data-src=\"/images/image/DataStructure/reverse-05.png\" alt=\"基数排序\"></p>\n<p><mark>有负数的数组不采用基数排序</mark></p>\n<h2 id=\"哈希表\"><a class=\"markdownIt-Anchor\" href=\"#哈希表\">#</a> 哈希表</h2>\n<ul>\n<li>介绍：</li>\n</ul>\n<pre><code>散列表，也叫哈希表，根据key-value直接访问数据结构，通过把关键码值映射到表中一个位置来访问，\n映射函数---&gt;称为散列函数\n存放记录的数组叫做散列表\n</code></pre>\n<h1 id=\"算法\"><a class=\"markdownIt-Anchor\" href=\"#算法\">#</a> 算法</h1>\n<blockquote>\n<p>算法的本质：穷举</p>\n</blockquote>\n<p><em>算法工程师：重点在数学建模，调参经验</em></p>\n<p><em>数据结构算法则侧重于计算机的思维</em></p>\n<ul>\n<li>如何穷举：无遗漏地穷举所有可能解\n<ul>\n<li>例如递归类问题，动态规划问题</li>\n</ul>\n</li>\n<li>如何聪明的穷举：避免所有冗余的计算，消耗尽可能少的资源\n<ul>\n<li>非递归问题， <code>Union Find</code>  并查集算法，贪心算法，KMP 算法</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"查找算法\"><a class=\"markdownIt-Anchor\" href=\"#查找算法\">#</a> 查找算法</h2>\n<ul>\n<li>顺序（线性）查找</li>\n<li>二分查找\n<ul>\n<li><strong>前提该数组是个有序数组</strong></li>\n<li>确定该数组中间的下标</li>\n<li>然后需要查找的数和中间的殊相比较，然后向左或向右递归查找</li>\n</ul>\n</li>\n<li>插值查收\n<ul>\n<li><strong>前提该数组是个有序数组</strong></li>\n<li>每次从自适应 mid 处开始查找</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mi>n</mi><mi>t</mi><mi>m</mi><mi>i</mi><mi>d</mi><mo>=</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo>+</mo><mo stretchy=\"false\">(</mo><mi>h</mi><mi>i</mi><mi>g</mi><mi>h</mi><mo>−</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>k</mi><mi>e</mi><mi>y</mi><mo>−</mo><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy=\"false\">[</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy=\"false\">[</mo><mi>h</mi><mi>i</mi><mi>g</mi><mi>h</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy=\"false\">[</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">int mid = low + (high - low) * (key - arr[low]) / (arr[high] - arr[low])</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>适合数据量大，分布均匀</li>\n</ul>\n</li>\n<li>斐波那契查找\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>i</mi><mi>d</mi><mo>=</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo>+</mo><mi>F</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>−</mo><mn>1</mn><mtext>（</mtext><mi>F</mi><mtext>代表斐波那契数列）</mtext></mrow><annotation encoding=\"application/x-tex\">mid=low+F(k-1)-1（F 代表斐波那契数列）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord cjk_fallback\">（</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord cjk_fallback\">代</span><span class=\"mord cjk_fallback\">表</span><span class=\"mord cjk_fallback\">斐</span><span class=\"mord cjk_fallback\">波</span><span class=\"mord cjk_fallback\">那</span><span class=\"mord cjk_fallback\">契</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">列</span><span class=\"mord cjk_fallback\">）</span></span></span></span></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"单链表\"><a class=\"markdownIt-Anchor\" href=\"#单链表\">#</a> 单链表</h2>\n<blockquote>\n<p>常用技巧：使用双指针</p>\n</blockquote>\n<ul>\n<li>二分搜索：两端指向中间的双指针，只能用在有序数组上</li>\n<li>滑动窗口：快慢双指针，用于解决字串问题\n<ul>\n<li>有限制，必须明确什么时候该扩大窗口，或收缩</li>\n</ul>\n</li>\n<li>回文串</li>\n</ul>\n<p><strong>前缀和技巧</strong>和<strong>差分数组技巧</strong></p>\n<h2 id=\"二叉树\"><a class=\"markdownIt-Anchor\" href=\"#二叉树\">#</a> 二叉树</h2>\n<p><em>递归解法</em></p>\n<ul>\n<li>遍历二叉树得出答案 **— 回溯算法核心 —**</li>\n<li>通过分解问题计算答案 **— 动态规划核心 —**</li>\n</ul>\n<h2 id=\"二叉堆\"><a class=\"markdownIt-Anchor\" href=\"#二叉堆\">#</a> 二叉堆</h2>\n<p><em>二叉堆在逻辑上就是一种完全二叉树，只不过存储在数组中，为了方便从数组下表为 1 开始，作为树的根节点</em></p>\n<ul>\n<li>\n<p>主要操作有 sink 下沉 和 swim 上浮，用于维护二叉堆的性质，</p>\n<ul>\n<li>上浮：使得第 k 个元素不断和父节点比较、上浮，进而平衡树的优先级。常常和 insert 使用，即将元素插入末位子节点，然后进行上浮.</li>\n<li>下沉的作用是使得第 k 个元素不断和两个子节点进行比较，下沉到合适的位置，平衡优先级。常常和 <code>delMax</code>  (删除最大堆的堆顶) 使用，首先将堆首位对调，删除末位子节点后将首元素下沉到合适位置.</li>\n</ul>\n</li>\n<li>\n<p>应用：堆排序，以及优先级队列</p>\n</li>\n<li>\n<p>分类：最大堆，最小堆</p>\n<ul>\n<li>最大堆：每个结点都大于等于它的子节点</li>\n<li>最小堆：每个结点都小于等于它的子节点</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"优先级队列\"><a class=\"markdownIt-Anchor\" href=\"#优先级队列\">#</a> 优先级队列</h2>\n<p><em>当插入或者删除元素时，元素会自动排列，底层是二叉堆的操作</em></p>\n<p>主要 API：</p>\n<ul>\n<li>insert 插入</li>\n<li>删除最大元素（最大堆），删除最小元素（最小堆）</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "理论",
                "数据结构"
            ]
        },
        {
            "id": "http://example.com/%E5%9F%BA%E4%BA%8EMybatis%E7%9A%84log4j%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/",
            "url": "http://example.com/%E5%9F%BA%E4%BA%8EMybatis%E7%9A%84log4j%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/",
            "title": "基于Mybatis的log4j配置文件",
            "date_published": "2022-08-28T15:13:37.421Z",
            "content_html": "<h2 id=\"使用说明\"><a class=\"markdownIt-Anchor\" href=\"#使用说明\">#</a> 使用说明</h2>\n<blockquote>\n<ol>\n<li>导入 log4 的 jar 包</li>\n</ol>\n</blockquote>\n<span id=\"more\"></span>\n<pre><code class=\"language-pom\">&lt;dependency&gt;\n\t&lt;groupId&gt;log4j&lt;/groupId&gt;\n\t&lt;artifactId&gt;log4j&lt;/artifactId&gt;\n\t&lt;version&gt;1.2.17&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<blockquote>\n<ol start=\"2\">\n<li>mybatis 中设置 setting</li>\n</ol>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>settings</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> \t<span class=\"token comment\">&lt;!-- 指定 MyBatis 所用日志的具体实现，未指定时将自动查找。--></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>logImpl<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>LOG4J<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> \t<span class=\"token comment\">&lt;!-- 标准日志工厂实现 --></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> \t<span class=\"token comment\">&lt;!--&lt;setting name=\"logImpl\" value=\"STDOUT_LOGGING\"/>--></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>settings</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<ol start=\"3\">\n<li>配置 log4j 配置文件</li>\n</ol>\n</blockquote>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#将等级为 DEBUG 的日志信息输出到 console 和 file 这两个目的地，console 和 file 的定义在下 面的代码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key attr-name\">log4j.rootLogger</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">DEBUG,console,file</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#控制台输出的相关设置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key attr-name\">log4j.appender.console</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">org.apache.log4j.ConsoleAppender</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key attr-name\">log4j.appender.console.Target</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">System.out log4j.appender.console.Threshold=DEBUG</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key attr-name\">log4j.appender.console.layout</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">org.apache.log4j.PatternLayout</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key attr-name\">log4j.appender.console.layout.ConversionPattern</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">[%c]-%m%n</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#文件输出的相关设置</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token key attr-name\">log4j.appender.file</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">org.apache.log4j.RollingFileAppender</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token key attr-name\">log4j.appender.file.File</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">./log/zhao.log log4j.appender.file.MaxFileSize=10mb</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token key attr-name\">log4j.appender.file.Threshold</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">DEBUG</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token key attr-name\">log4j.appender.file.layout</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">org.apache.log4j.PatternLayout</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token key attr-name\">log4j.appender.file.layout.ConversionPattern</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#日志输出级别</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token key attr-name\">log4j.logger.org.mybatis</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">DEBUG</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token key attr-name\">log4j.logger.java.sql</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">DEBUG</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token key attr-name\">log4j.logger.java.sql.Statement</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">DEBUG</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token key attr-name\">log4j.logger.java.sql.ResultSet</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">DEBUG</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token key attr-name\">log4j.logger.java.sql.PreparedStatement</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">DEBUG</span></pre></td></tr></table></figure><blockquote>\n<ol start=\"4\">\n<li>要在使用的类中 导入包，参数设置为当前类</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserDaoTest</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<ol start=\"5\">\n<li>使用 log4j 查看输出</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"info\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"debug\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "Mybatis"
            ]
        },
        {
            "id": "http://example.com/%E5%9F%BA%E4%BA%8EJavaWeb%E7%9A%84%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/",
            "url": "http://example.com/%E5%9F%BA%E4%BA%8EJavaWeb%E7%9A%84%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/",
            "title": "基于JavaWeb的邮件发送",
            "date_published": "2022-08-28T15:13:37.415Z",
            "content_html": "<h2 id=\"前提\"><a class=\"markdownIt-Anchor\" href=\"#前提\">#</a> 前提</h2>\n<blockquote>\n<p>邮箱实现了 SMTP，POP 等服务，并且得到了有关的授权码</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"概述\"><a class=\"markdownIt-Anchor\" href=\"#概述\">#</a> 概述</h2>\n<blockquote>\n<p>使用<strong> Java</strong> 发送<strong> Email</strong> 需要 JavaMail 和 Java Activation Framework</p>\n</blockquote>\n<p>得到两个 jar 包：</p>\n<ul>\n<li>mail.jar</li>\n<li>activation.jar</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 相关 maven--></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>javax.activation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>activation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.1.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>javax.mail<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mail<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.4.7<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"使用示例\"><a class=\"markdownIt-Anchor\" href=\"#使用示例\">#</a> 使用示例</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> resp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">String</span> email <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">// 用户注册后给其发送邮件，使用线程来发送，防止出现耗时，和网站注册人数过多</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">Sendmail</span> send <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sendmail</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            send<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 注册用户</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            req<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"注册成功，发送了一封邮件给你\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            req<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestDispatcher</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"info.jsp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            req<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"注册失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            req<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestDispatcher</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index.jsp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"工具类\"><a class=\"markdownIt-Anchor\" href=\"#工具类\">#</a> 工具类</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>zhao<span class=\"token punctuation\">.</span>pojo<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>mail<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>mail<span class=\"token punctuation\">.</span>internet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InternetAddress</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>mail<span class=\"token punctuation\">.</span>internet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MimeMessage</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Properties</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 网站三秒原则</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Sendmail</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  \t<span class=\"token comment\">// 设置发送邮件人的信息，以及授权码</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> from <span class=\"token operator\">=</span><span class=\"token string\">\"*****@qq.com\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span><span class=\"token string\">\"*****@qq.com\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span><span class=\"token string\">\"*****\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> host <span class=\"token operator\">=</span><span class=\"token string\">\"smtp.qq.com\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Sendmail</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>user<span class=\"token operator\">=</span>user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  \t<span class=\"token comment\">//c 重写 thread 的 run 方法</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">// 复杂文件，包含图片</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">Properties</span> prop <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            prop<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mail.host\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"smtp.qq.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 设置 qq 邮件服务器</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            prop<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mail.transport.protocol\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"smtp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 邮件发送协议</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            prop<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mail.smtp.auth\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 验证用户名密码</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">//===============qq 还得设置 ssl 加密</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token class-name\">MailSSLSocketFactory</span> sf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MailSSLSocketFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            sf<span class=\"token punctuation\">.</span><span class=\"token function\">setTrustAllHosts</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            prop<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mail.smtp.ssl.enable\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            prop<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mail.smtp.ssl.socketFactory\"</span><span class=\"token punctuation\">,</span>sf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">// 使用 JavaMail 发送邮件五步骤</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token comment\">//1. 创建定义整个应用程序所欲要的换陷阱信息 session,=============qq 才有</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token class-name\">Session</span> session <span class=\"token operator\">=</span> <span class=\"token class-name\">Session</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDefaultInstance</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Authenticator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token keyword\">protected</span> <span class=\"token class-name\">PasswordAuthentication</span> <span class=\"token function\">getPasswordAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    <span class=\"token comment\">// 发件人邮件用户名，授权码</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PasswordAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"******@qq.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"授权码\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token comment\">//2. 开启 session 的 debug 模式，查看邮件发送状态</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            session<span class=\"token punctuation\">.</span><span class=\"token function\">setDebug</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token comment\">// 通过 session 得到 transport 对象</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token class-name\">Transport</span> ts <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">getTransport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token comment\">//3. 使用用户的用户名，授权码链接</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            ts<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>username<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token comment\">//4. 创建文件</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token comment\">// 创建邮件对象</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token class-name\">MimeMessage</span> message <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MimeMessage</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token comment\">// 指名邮件的发件人</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            message<span class=\"token punctuation\">.</span><span class=\"token function\">setFrom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InternetAddress</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token comment\">// 指名邮件的收件人</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            message<span class=\"token punctuation\">.</span><span class=\"token function\">setRecipient</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Message<span class=\"token punctuation\">.</span>RecipientType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TO</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InternetAddress</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token comment\">// 邮件的标题</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            message<span class=\"token punctuation\">.</span><span class=\"token function\">setSubject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户注册邮件\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token comment\">//// 准备图片</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token comment\">//MimeBodyPart image = new MimeBodyPart();</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token comment\">//DataHandler dh = new DataHandler (new FileDataSource (\"F:\\\\IDEA\\\\workspace\\\\ 邮件发送 \\\\target\\\\classes\\\\1.png\"));</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token comment\">//image.setDataHandler(dh);</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token comment\">//image.setContentID(\"1.png\");</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token comment\">//// 准备附件</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token comment\">//MimeBodyPart bodyPart = new MimeBodyPart();</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token comment\">//bodyPart.setDataHandler (new DataHandler (new FileDataSource (\"F:\\\\IDEA\\\\workspace\\\\ 邮件发送 \\\\target\\\\classes\\\\db.properties\")));</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token comment\">//bodyPart.setFileName(\"db.properties\");</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token comment\">//// 邮件的内容</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token comment\">//MimeBodyPart text = new MimeBodyPart();</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token comment\">//text.setContent (\"这不只是一封邮件带图片 & lt;img src='cid:1.png'> 邮件\",\"text/html;charset=utf-8\");</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token comment\">//// 描述数据关系</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token comment\">//MimeMultipart mm = new MimeMultipart();</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token comment\">//mm.addBodyPart(text);</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token comment\">//mm.addBodyPart(image);</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token comment\">//mm.setSubType(\"related\");</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token comment\">//// 将这两个拼接的设置为主体</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token comment\">//MimeBodyPart contentText = new MimeBodyPart();</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token comment\">//contentText.setContent(mm);</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token comment\">//// 拼接附件</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            <span class=\"token comment\">//MimeMultipart allFile = new MimeMultipart();</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token comment\">//allFile.addBodyPart(bodyPart);</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            <span class=\"token comment\">//allFile.addBodyPart(contentText);</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token comment\">//mm.setSubType(\"mixed\");</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token class-name\">String</span> info<span class=\"token operator\">=</span><span class=\"token string\">\"恭喜您注册成功，您的用户名：\"</span><span class=\"token operator\">+</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\",您的密码：\"</span><span class=\"token operator\">+</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\",请妥善保管\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            message<span class=\"token punctuation\">.</span><span class=\"token function\">setContent</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">,</span><span class=\"token string\">\"text/html;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            message<span class=\"token punctuation\">.</span><span class=\"token function\">saveChanges</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>            <span class=\"token comment\">//5. 发送邮件</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>            ts<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">getAllRecipients</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token comment\">//6. 关闭连接</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            ts<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "邮件发送",
                "JavaWeb",
                "Email"
            ]
        },
        {
            "id": "http://example.com/%E5%9F%BA%E4%BA%8EJavaWeb%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/",
            "url": "http://example.com/%E5%9F%BA%E4%BA%8EJavaWeb%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/",
            "title": "基于JavaWeb的文件上传",
            "date_published": "2022-08-28T15:13:37.412Z",
            "content_html": "<h2 id=\"工具类\"><a class=\"markdownIt-Anchor\" href=\"#工具类\">#</a> 工具类</h2>\n<p><em>使用时 input 的 type 要设置为 file 类型</em></p>\n<blockquote>\n<ol>\n<li>创建 DiskFileItemFactory 对象，处理文件上传路径或者大小限制</li>\n</ol>\n</blockquote>\n<span id=\"more\"></span>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">DiskFileItemFactory</span> <span class=\"token function\">getDiskFileItemFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> tmpFile<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">DiskFileItemFactory</span> factory<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DiskFileItemFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 设置缓存区为 1m</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tfactory<span class=\"token punctuation\">.</span><span class=\"token function\">setSizeThreshold</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tfactory<span class=\"token punctuation\">.</span><span class=\"token function\">setRepository</span><span class=\"token punctuation\">(</span>tmpFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> factory<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<ol start=\"2\">\n<li>获取 ServletFileUpload</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">ServletFileUpload</span> <span class=\"token function\">getServletFileUpload</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DiskFileItemFactory</span> factory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">ServletFileUpload</span> upload<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ServletFileUpload</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 监听文件上传速度</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tupload<span class=\"token punctuation\">.</span><span class=\"token function\">setProgressListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ProgressListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> pBytesRead<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> pContentLength<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pItems<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"总大小：\"</span><span class=\"token operator\">+</span>pContentLength<span class=\"token operator\">+</span><span class=\"token string\">\"已上传：\"</span><span class=\"token operator\">+</span>pBytesRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 处理乱码问题</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tupload<span class=\"token punctuation\">.</span><span class=\"token function\">setHeaderEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 设置单个文件最大值</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tupload<span class=\"token punctuation\">.</span><span class=\"token function\">setFileSizeMax</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 设置总大小</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tupload<span class=\"token punctuation\">.</span><span class=\"token function\">setSizeMax</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">return</span>  upload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<ol start=\"3\">\n<li>处理上传的文件</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">uploadParseRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletFileUpload</span> upload<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> uploadPath<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">FileUploadException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">String</span> msg <span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 把前端请求解析</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FileItem</span><span class=\"token punctuation\">></span></span> fileItems <span class=\"token operator\">=</span> upload<span class=\"token punctuation\">.</span><span class=\"token function\">parseRequest</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileItem</span> fileItem <span class=\"token operator\">:</span> fileItems<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token comment\">// 判断上传的文件是普通文件还是带文件的</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fileItem<span class=\"token punctuation\">.</span><span class=\"token function\">isFormField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token class-name\">String</span> fieldName <span class=\"token operator\">=</span> fileItem<span class=\"token punctuation\">.</span><span class=\"token function\">getFieldName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> fileItem<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>fieldName<span class=\"token operator\">+</span><span class=\"token string\">\":\"</span><span class=\"token operator\">+</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token comment\">// 处理文件 ===================</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token comment\">// 拿到文件名字</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token class-name\">String</span> uploadFileName <span class=\"token operator\">=</span> fileItem<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"上传的文件名：\"</span> <span class=\"token operator\">+</span>uploadFileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>uploadFileName<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span>uploadFileName<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token comment\">// 获得上传的文件名</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token class-name\">String</span> fileName <span class=\"token operator\">=</span>uploadFileName<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>uploadFileName<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token comment\">// 获取后缀</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token class-name\">String</span> fileExtName<span class=\"token operator\">=</span>uploadFileName<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>uploadFileName<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件信息【件名：\"</span><span class=\"token operator\">+</span>fileName<span class=\"token operator\">+</span><span class=\"token string\">\"------文件类型\"</span><span class=\"token operator\">+</span>fileExtName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token comment\">// 如果后缀名不是想要的</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token comment\">// 使用 UUID 随机生成，网络传输都需要序列化</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token class-name\">String</span> uuidPath <span class=\"token operator\">=</span> <span class=\"token constant\">UUID</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token comment\">// 存放地址 =====================</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token class-name\">String</span> realPath<span class=\"token operator\">=</span>uploadPath<span class=\"token operator\">+</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">+</span>uuidPath<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token class-name\">File</span> realPathFile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>realPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>realPathFile<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    realPathFile<span class=\"token punctuation\">.</span><span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token comment\">//io 输入输出 ====================</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token class-name\">InputStream</span> inputStream <span class=\"token operator\">=</span> fileItem<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token class-name\">FileOutputStream</span> fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>realPath <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">=</span>inputStream<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    fos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                fos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                inputStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                msg<span class=\"token operator\">=</span><span class=\"token string\">\"文件上传成功\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                fileItem<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">return</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"合并\"><a class=\"markdownIt-Anchor\" href=\"#合并\">#</a> 合并</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> resp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token comment\">// 判断上传文件是普通表单还是文件类型</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">ServletFileUpload</span><span class=\"token punctuation\">.</span><span class=\"token function\">isMultipartContent</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token comment\">// 创建文件上传的真实路径，建议建在 web-inf 下，用户无法直接访问</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">String</span> uploadPath <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRealPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/WEB-INF/upload\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">File</span> uploadFile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>uploadPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>uploadFile<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                uploadFile<span class=\"token punctuation\">.</span><span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// 缓存，临时文件，假如文件超过了预期大小，把它放在一个临时文件中，过几天自动删除，或提醒用户转存</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">String</span> tmpPath <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRealPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/WEB-INF/tmp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token class-name\">File</span> tmpFile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>tmpPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>tmpFile<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                tmpFile<span class=\"token punctuation\">.</span><span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">//1. 创建 DiskFileItemFactory 对象，处理文件上传路径或者大小限制</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token class-name\">DiskFileItemFactory</span> factory<span class=\"token operator\">=</span><span class=\"token function\">getDiskFileItemFactory</span><span class=\"token punctuation\">(</span>tmpFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">//2. 获取 ServletFileUpload</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">ServletFileUpload</span> upload<span class=\"token operator\">=</span><span class=\"token function\">getServletFileUpload</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">//3. 处理上传的文件</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token class-name\">String</span> msg<span class=\"token operator\">=</span><span class=\"token function\">uploadParseRequest</span><span class=\"token punctuation\">(</span>upload<span class=\"token punctuation\">,</span>req<span class=\"token punctuation\">,</span>uploadPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">//servlet 请求转发</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            req<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">,</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            req<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestDispatcher</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"info.jsp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span>resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">IOException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">FileUploadException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Java"
            ]
        },
        {
            "id": "http://example.com/%E5%9F%BA%E4%BA%8EJavaWeb%E7%9A%84%E5%88%86%E9%A1%B5/",
            "url": "http://example.com/%E5%9F%BA%E4%BA%8EJavaWeb%E7%9A%84%E5%88%86%E9%A1%B5/",
            "title": "基于JavaWeb的分页",
            "date_published": "2022-08-28T15:13:37.408Z",
            "content_html": "<h2 id=\"limit实现分页\"><a class=\"markdownIt-Anchor\" href=\"#limit实现分页\">#</a> limit 实现分页</h2>\n<blockquote>\n<p>使用方式</p>\n</blockquote>\n<span id=\"more\"></span>\n<pre><code class=\"language-mysql\">#语法 \nSELECT * FROM table LIMIT stratIndex，pageSize \n\nSELECT * FROM table LIMIT 5,10; // 检索记录行 6-15 \n\n#为了检索从某一个偏移量到记录集的结束所有的记录行，可以指定第二个参数为 -1： \nSELECT * FROM table LIMIT 95,-1; // 检索记录行 96-last. \n\n#如果只给定一个参数，它表示返回最大的记录行数目： \nSELECT * FROM table LIMIT 5; //检索前 5 个记录行 \n\n#换句话说，LIMIT n 等价于 LIMIT 0,n。\n</code></pre>\n<blockquote>\n<ol>\n<li>修改 Mapper 文件</li>\n</ol>\n</blockquote>\n<pre><code class=\"language-xml-dtd\">&lt;select id=&quot;selectUser&quot; parameterType=&quot;map&quot; resultType=&quot;user&quot;&gt;\n\tselect * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125; \n&lt;/select&gt;\n</code></pre>\n<blockquote>\n<ol start=\"2\">\n<li>Mapper 接口，参数为 map</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 选择全部用户实现分页 List&lt;User> </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">selectUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<ol start=\"3\">\n<li>起始位置 = （当前页面 - 1 ） * 页面大小</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 分页查询，两个参数 startIndex , pageSize </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSelectUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">SqlSession</span> session <span class=\"token operator\">=</span> <span class=\"token class-name\">MybatisUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token class-name\">UserMapper</span> mapper <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span> currentPage <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第几页 </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">int</span> pageSize <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 每页显示几个 Map</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"startIndex\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>currentPage<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>pageSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pageSize\"</span><span class=\"token punctuation\">,</span>pageSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectUser</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token operator\">:</span> users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"rowbounds分页\"><a class=\"markdownIt-Anchor\" href=\"#rowbounds分页\">#</a> RowBounds 分页</h2>\n<p>使用 RowBounds 在 Java 代码层面实现分页，当然此种方式作为了解即可</p>\n<blockquote>\n<ol>\n<li>修改 Mapper 文件</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 选择全部用户 RowBounds 实现分页 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getUserByRowBounds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<ol start=\"2\">\n<li>mapper 文件</li>\n</ol>\n</blockquote>\n<pre><code class=\"language-xml-dtd\">&lt;select id=&quot;getUserByRowBounds&quot; resultType=&quot;user&quot;&gt; \n\tselect * from user \n&lt;/select&gt;\n</code></pre>\n<blockquote>\n<ol start=\"3\">\n<li>需要使用 RowBounds 类</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testUserByRowBounds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">SqlSession</span> session <span class=\"token operator\">=</span> <span class=\"token class-name\">MybatisUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> currentPage <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第几页 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> pageSize <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 每页显示几个 </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token class-name\">RowBounds</span> rowBounds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RowBounds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>currentPage<span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>pageSize<span class=\"token punctuation\">,</span>pageSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 通过 session.** 方法进行传递 rowBounds，[此种方式现在已经不推荐使用了] </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.kuang.mapper.UserMapper.getUserByRowBounds\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> rowBounds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token operator\">:</span> users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tsession<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"pagehelper插件\"><a class=\"markdownIt-Anchor\" href=\"#pagehelper插件\">#</a> PageHelper 插件</h2>\n<p>官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYWdlaGVscGVyLmdpdGh1Yi5pby8=\">https://pagehelper.github.io/</span></p>\n",
            "tags": [
                "Java",
                "JavaWeb"
            ]
        }
    ]
}