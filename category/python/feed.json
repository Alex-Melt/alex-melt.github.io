{
    "version": "https://jsonfeed.org/version/1",
    "title": "melt • All posts by \"python\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/computer-science/python/%E7%AC%94%E8%AE%B0%E5%A4%A7%E5%85%A8/",
            "url": "http://example.com/computer-science/python/%E7%AC%94%E8%AE%B0%E5%A4%A7%E5%85%A8/",
            "title": "笔记大全",
            "date_published": "2022-08-30T04:39:38.824Z",
            "content_html": "<h1 id=\"什么是python\"><a class=\"markdownIt-Anchor\" href=\"#什么是python\">#</a> 什么是 Python？</h1>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python：巨蟒</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>python是一门程序设计语言</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>语言：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 自然语言：肢体语言、汉语、英语、法语......</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 机器语言：001101010101二进制（微码编程）</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 程序设计语言：C、C艹、C艹艹、Java、python、PHP、GO</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>语言的高级型：越接近自然语言的编程语言就越高级，越高级的编程语言效率越低。汇编语言相对来说开发难度高，但是效率相对高，语言相对低级。</pre></td></tr></table></figure><ul>\n<li>python</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python:1989年，圣诞节，Guido Van Rossum</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Guido，退出了python的决策层。回归。</pre></td></tr></table></figure><ul>\n<li>python 的特点</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 语法简洁而清晰</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 强大的类库（17W)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 胶水语言</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">4.</span> 纯面向对象的语言</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>其他特点：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 跨平台：win、linux、mac.....</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 运行机制：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 直接解释执行</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 先编译，后解释/执行</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 代码量较少</pre></td></tr></table></figure><ul>\n<li>python 的应用场景</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>领域：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 航空航天 图像识别</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 3D动画</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> WEB应用</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">4.</span> 云计算</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">5.</span> 企业应用</pre></td></tr></table></figure><ul>\n<li>python 解释器的实现</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> Cpython：原生的解释器（官方）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t用C语言实现的解释器</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> Jython：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t用Java实现的解释器</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> IronPython：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t用.NET实现的解释器</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">4.</span> pypy：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t用python实现的解释器</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>效率最高的是：pypy</pre></td></tr></table></figure><ul>\n<li>python 的安装</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 版本必须是3.8or3.9</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 安装，选择路径，强烈建议装在C盘并且路径中不要有中文，路径一定要牢记</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 勾选add ???? to path</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">4.</span> 下一步</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">5.</span> 打开cmd窗口，输入python，查看版本是否正确</pre></td></tr></table></figure><ul>\n<li>八大排序</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 冒泡排序</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 选择排序</pre></td></tr></table></figure><h1 id=\"列表\"><a class=\"markdownIt-Anchor\" href=\"#列表\">#</a> 列表</h1>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>列表：list   是一个类是一个对象</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 存储多个数据，有没有上限？理论上没有长度限制</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 存储多种数据</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> 是一个可迭代对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">4.</span> 列表是一个可变类型的数据</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>不可变类型</pre></td></tr></table></figure><h3 id=\"创建列表\"><a class=\"markdownIt-Anchor\" href=\"#创建列表\">#</a> 创建列表</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 直接创建</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tl = [元素1,元素2,...,元素n]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 普通列表：[1,2,3,4]整型列表，['a','b','c','d']字符串列表</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 混合列表：[1,2,'a','b',[1,2,3]]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> l = []:空列表</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 通过构造方法来创建</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> list():返回一个空的列表</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> list(iterable)：从可迭代对象中的元素，初始化一个列表</pre></td></tr></table></figure><h4 id=\"访问列表里面的元素\"><a class=\"markdownIt-Anchor\" href=\"#访问列表里面的元素\">#</a> 访问列表里面的元素</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>访问：读、改、删</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>读取元素：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 通过索引来获取元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t索引：下标</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t索引不是下标</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tpython中索引是从0开始技术</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t访问形式：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t变量[下标]---访问一个元素</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 读取所有的元素</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t遍历：所有的元素不重复、不遗漏的访问一遍</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t通过for来进行遍历</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 如果下标超出了范围则会报错</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t列表的长度：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t列表的下标范围：</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t0<span class=\"token strike\"><span class=\"token punctuation\">~</span><span class=\"token content\">len(l)-1</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t列表的索引支持负数</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t负号：代表的是方向（反向）</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t-1</span><span class=\"token punctuation\">~</span></span>-len(l)</pre></td></tr></table></figure><h4 id=\"螺旋填数\"><a class=\"markdownIt-Anchor\" href=\"#螺旋填数\">#</a> 螺旋填数</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>螺旋填数：读入两个整数m,n，输出一个m行n列的矩阵，这个矩阵是1~m * n这些自然数按照右、下、左、上螺旋填入的结果。</pre></td></tr></table></figure><h4 id=\"向列表中添加元素\"><a class=\"markdownIt-Anchor\" href=\"#向列表中添加元素\">#</a> 向列表中添加元素</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> append(obj):</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t向列表的末尾添加一个obj</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tobject：对象，在python可以是任何数据</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t用于添加一个数据</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> extend(iterable):</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t通过可迭代对象的元素，来扩展当前的列表</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\titerable：可迭代对象</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t用于向列表中添加多个数据</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token list punctuation\">3.</span> insert(index,object)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t在index之前插入object</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tindex：索引值(下标)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tobject：任何对象</pre></td></tr></table></figure><h4 id=\"修改列表中的元素\"><a class=\"markdownIt-Anchor\" href=\"#修改列表中的元素\">#</a> 修改列表中的元素</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>直接赋值修改</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t变量[下标] = 新值</pre></td></tr></table></figure><h4 id=\"删除列表中的元素\"><a class=\"markdownIt-Anchor\" href=\"#删除列表中的元素\">#</a> 删除列表中的元素</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> clear():</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t清空列表中的所有元素</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> pop([index])：弹栈</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t删除并且返回下标为index的元素(index默认为最后一个)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t如果为空列表则会抛出IndexError</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t栈：是一种数据结构，FILO：First In Last Out</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">3.</span> remove(value):</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t删除第一个出现的value元素（下标最小）</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t如果value不存在会报ValueError</pre></td></tr></table></figure><h4 id=\"切片\"><a class=\"markdownIt-Anchor\" href=\"#切片\">#</a> 切片</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>slice：切片</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>列表通过索引可以获取一个元素,索引处可以接收更多的参数。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>l=[1,2,3,4,5]</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>l[2:4]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>作用：通过起始下标和结束下标获取一段元素(多个元素)，该数据是拷贝出来的数据，原数据不变</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>语法：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t变量[start:end]</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tstart：起始下标</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tend：结束下标</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t取值：[start:stop)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token list punctuation\">1.</span> 如果start为0那么可以不写</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tlist[:3]</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token list punctuation\">2.</span> 如果要直接获取到最后一个元素</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tlist[2:]</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token list punctuation\">3.</span> 如果要全取：</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tlist[:]</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>切片操作往往用于数据的拷贝</pre></td></tr></table></figure><ul>\n<li>切片的高级应用</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>切片还支持第三个参数，表示步长</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>变量[start:end:step]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>start:起始下标</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>end:结束下标</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>step:步长</pre></td></tr></table></figure><h4 id=\"列表的常用运算符\"><a class=\"markdownIt-Anchor\" href=\"#列表的常用运算符\">#</a> 列表的常用运算符</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 加法运算</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tlist1+list2----列表的拼接</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 比较运算(布尔运算)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t>,>=,&lt;,&lt;=,==,!=</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t比较原则：对应下标的元素，按照下标从小到大逐个比较，只要比较出大小则停止比较</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t需要注意类型的兼容性</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">3.</span> 重复运算</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t乘法</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t本质：是多个加法运算</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">4.</span> 成员关系运算:in/not in </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t判断列表中是否有某个成员</pre></td></tr></table></figure><ul>\n<li>列表中的其他方法</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> copy()</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t浅拷贝</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> count(value)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t返回value值在列表中出现的次数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> index(value[,start[,stop]])</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t返回value在列表中从start到stop的范围内的第一次出现的索引</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tvalue：要查询的值</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">4.</span> reverse()</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t原地翻转</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t和大小无关，不排序</pre></td></tr></table></figure><ul>\n<li>补充</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 列表中的所有元素，本质上都不是数据本身，而是数据的首地址</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 列表作为可变类型的数据</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t可变：当列表中的内容发生改变的时候，列表本身的地址不发生改变，但是列表中的元素发生改变。</pre></td></tr></table></figure><h3 id=\"二维列表\"><a class=\"markdownIt-Anchor\" href=\"#二维列表\">#</a> 二维列表</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>维度：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t[[1,2,3],[4,5,6],[4,5,6],[4,5,6],[4,5,6],[4,5,6],[4,5,6]]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>二维列表：一维列表下的一堆列表(一维列表)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>二维列表的访问：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 直接访问</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t访问一个元素可以通过下标进行访问</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tlist<span class=\"token url\">[<span class=\"token content\">行坐标</span>][<span class=\"token variable\">列坐标</span>]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 双重for循环</pre></td></tr></table></figure><ul>\n<li>二维列表的创建</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>l = [[1,2,3]]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>l = []</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>l.append([123])</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>[list()]</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>列表的推导式/生成式</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>l = [i for i in range(10)]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>print(l)</pre></td></tr></table></figure><h1 id=\"元组\"><a class=\"markdownIt-Anchor\" href=\"#元组\">#</a> 元组</h1>\n<h4 id=\"圆括号\"><a class=\"markdownIt-Anchor\" href=\"#圆括号\">#</a> 圆括号</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> ():可以修改运算的优先级</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 元组的组成部分</pre></td></tr></table></figure><h4 id=\"元组-2\"><a class=\"markdownIt-Anchor\" href=\"#元组-2\">#</a> 元组</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 可以存储多个数据</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 可以存储多种数据</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 是不可变类型</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">4.</span> 支持切片操作</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">5.</span> 可迭代对象</pre></td></tr></table></figure><h4 id=\"创建一个元组\"><a class=\"markdownIt-Anchor\" href=\"#创建一个元组\">#</a> 创建一个元组</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 直接创建</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tt = (1,2,3)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tt = (True,1,2,3)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tt = ()</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> 构造方法</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> tuple()---返回一个空元组</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> tuple(iterable)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t利用可迭代对象的元素，初始化一个新的元组</pre></td></tr></table></figure><h4 id=\"访问元组\"><a class=\"markdownIt-Anchor\" href=\"#访问元组\">#</a> 访问元组</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 访问一个元素</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t和列表一样</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 访问多个元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t和列表一样</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> 访问所有元素</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t和列表一样</pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>include <span class=\"token operator\">&lt;</span>stdio<span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">mian</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> d1<span class=\"token punctuation\">,</span>d2<span class=\"token punctuation\">,</span>d3<span class=\"token punctuation\">,</span>d4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    d1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>a<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">></span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d1=%d,a=%d,v=%d,c=%d\\n\"</span><span class=\"token punctuation\">,</span>d1<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    d2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">></span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>a<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">></span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d1=%d,a=%d,v=%d,c=%d\\n\"</span><span class=\"token punctuation\">,</span>d2<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    d3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>a<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">></span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d1=%d,a=%d,v=%d,c=%d\\n\"</span><span class=\"token punctuation\">,</span>d3<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    d4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">></span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>a<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">></span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d1=%d,a=%d,v=%d,c=%d\\n\"</span><span class=\"token punctuation\">,</span>d4<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"增加和修改以及删除元素\"><a class=\"markdownIt-Anchor\" href=\"#增加和修改以及删除元素\">#</a> 增加和修改以及删除元素</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">*</span> 元组是不可变类型，所以，本身不支持增删改操作</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">1.</span> 向元组中添加元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t利用切片然后元组拼接</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> 从元组中删除元素</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t利用切片删除元素</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">3.</span> 修改元组中的元素</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t先删除，后添加</pre></td></tr></table></figure><h4 id=\"元组的操作符\"><a class=\"markdownIt-Anchor\" href=\"#元组的操作符\">#</a> 元组的操作符</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 拼接操作</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t+</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 重复操作</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">*</span> ：本质是多个加法</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> 布尔操作：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t>,&lt;,==,!==</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t比较方法和列表一样</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">4.</span> 成员关系运算</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tin/not in</pre></td></tr></table></figure>",
            "tags": [
                "Python"
            ]
        }
    ]
}