{
    "version": "https://jsonfeed.org/version/1",
    "title": "melt • All posts by \"python\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/language/day5/",
            "url": "http://example.com/language/day5/",
            "title": "day5",
            "date_published": "2022-08-30T04:39:38.822Z",
            "content_html": "<h1 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\">#</a> 字符串</h1>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>最常用的数据类型，没有之一</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>str</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>特点：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 天生就具有跨平台性</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 是一个可迭代对象</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 支持索引操作</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token list punctuation\">4.</span> 支持切片操作</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token list punctuation\">5.</span> 是一个不可变类型</pre></td></tr></table></figure><ul>\n<li>字符串的类别</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 单引号字符串</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t其他语言：字符串必须使用双引号，单引号只能用于字符</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tpython：允许使用单引号来表达字符串</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t简单，可以和双引号进行嵌套</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> 双引号字符串</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t一般字符串</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">3.</span> 三引号字符串</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t多行字符串</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t单三引号、双三引号</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t一般用于文档注释，必须出现在代码块的第一行</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t也成为长字符串可以换行</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token list punctuation\">4.</span> 原始字符串</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t让所有的转义字符全部失效（只体现最原本的含义）</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\ts = r'Jerry\\tom'</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token list punctuation\">5.</span> 二进制字符串</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t不是字符串类型，是bytes类型</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tstr---bytes:encode()编码</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tbytes---str:decode()解码</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token list punctuation\">6.</span> unicode字符串</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t以unicode的方式来解析字符串</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tu'abc'</pre></td></tr></table></figure><ul>\n<li>创建字符串</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 直接创建：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\ts = 'abc'</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\ts = \"abc\"</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\ts = \"\"\"abc\"\"\"</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\ts = '''abc'''</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 构造方法</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tstr(obj)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tobject：可以接收任何参数</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tinput和print</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tconsole.log(\"\")</pre></td></tr></table></figure><ul>\n<li>访问字符串</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 访问一个</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t通过索引</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 访问多个</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t通过切片</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> 访问所有</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t遍历</pre></td></tr></table></figure><h3 id=\"图书管理系统\"><a class=\"markdownIt-Anchor\" href=\"#图书管理系统\">#</a> 图书管理系统</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 首页：登录注册，用户输入1则登录，输入2则注册</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 登录：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 用户登录</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 提示用户输入用户名</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token list punctuation\">2.</span> 提示用户输入密码</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token list punctuation\">3.</span> 判断用户输入的用户名和密码是否正确</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token list punctuation\">4.</span> 如果输入正确，则成功登录</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token list punctuation\">5.</span> 如果输入不正确，则重新登录</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 管理员登录</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">3.</span> 注册：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 提示用户输入用户名</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 不允许出现特殊字符</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 大于等于四个字儿</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 提示用户输入密码</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 用户密码需要分为高级、中级、低级</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t除了下面三种情况，剩下的情况全都不合规</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t高级：用户密码是大于14位，且由数字、字符、字母构成</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t中级：用户密码是大于8位小于14位，且由数字、字符、字母中的任意两个组合构成</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t低级：用户密码大于6位，小于8位</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 提示用户再次输入密码</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token list punctuation\">4.</span> 如果全部合规，则注册成功</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token list punctuation\">5.</span> 如果不合规，则重新输入</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token list punctuation\">4.</span> 进入图书管理系统：</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 查看所有图书--->用户、管理员</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 根据书名查找图书--->用户、管理员</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 根据作者查找图书--->用户、管理员</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token list punctuation\">4.</span> 修改图书名称 --->管理员</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token list punctuation\">5.</span> 修改图书价格--->管理员</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token list punctuation\">6.</span> 删除图书--->管理员</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token list punctuation\">7.</span> 增加新书--->管理员</pre></td></tr></table></figure><h3 id=\"常用的方法\"><a class=\"markdownIt-Anchor\" href=\"#常用的方法\">#</a> 常用的方法</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> capitalize()</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t首字母大写，其余字符小写</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> casefold()</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t字母全小写</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> center(字符长度,填充物)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tcenter(20, '-')</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">4.</span> count()</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tcount(sub[, start[, end]])</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t计算字符串中出现了多少sub元素</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">5.</span> encode()</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t编码</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t把字符串编成二进制的内容</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token list punctuation\">6.</span> endswith(suffix[, start[, end]])</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t是否以suffix结尾</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tendswith('系统',0,10)</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token list punctuation\">7.</span> find(sub[, start[, end]])</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t找到在start和end之间的第一个sub元素的下标，如果不存在，则返回-1</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token list punctuation\">8.</span> index(sub[, start[, end]])</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t如果sub在字符串中，则返回最小的下标</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token list punctuation\">9.</span> isalnum()</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t注：问一下</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t人类语言都为True，其他的为false</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token list punctuation\">10.</span> isalpha()</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t注：问一下</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t人类语言字母都为True，其他的为false</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token list punctuation\">11.</span> isdecimal()</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t十进制数字</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t判断字符中是否都是十进制阿拉伯数字</pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token list punctuation\">12.</span> isdigit()</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t判断是否都是十进制数字</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token list punctuation\">13.</span> islower()</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t判断当前字符串是否全都是小写</pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token list punctuation\">14.</span> isnumeric()</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t判断当前字符是否是由数字(只包含中文和阿拉伯，不包含英文)构成的</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token list punctuation\">15.</span> isspace()</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t判断是否全是空格</pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token list punctuation\">16.</span> isupper()</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t判断字符串是否全都是大写</pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token list punctuation\">17.</span> ljust(width[,fillchar])</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\ts.ljust(10,'-')</pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token list punctuation\">18.</span> rjust(width[,fillchar])</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\ts.rjust(10,'-')</pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token list punctuation\">19.</span> lstrip():</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t去掉字符串左侧的空格、回车、指标等空字符</pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token list punctuation\">20.</span> rstrip():</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t去掉字符串右侧的空格、回车、指标等空字符</pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token list punctuation\">21.</span> strip():</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t去掉字符串两侧的空格、回车、指标等空字符</pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token list punctuation\">22.</span> replace(old,new):</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t替换</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t把字符串中的old替换成new</pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token list punctuation\">23.</span> startswith(prefix)</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t判断是否是以prefix开头的字符串</pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token list punctuation\">24.</span> upper()</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t将字符串转为大写</pre></td></tr></table></figure><ul>\n<li>格式化</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>format(<span class=\"token italic\"><span class=\"token punctuation\">*</span><span class=\"token content\">args, </span><span class=\"token punctuation\">*</span></span>*kwargs)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token italic\"><span class=\"token punctuation\">*</span><span class=\"token content\">args：可变长参数，把参数打包成元组来处理</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t</span><span class=\"token punctuation\">*</span></span>kwargs：关键字参数，把参数打包成字典来处理</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">1.</span> 源字符通过下标的方式进行填充获取</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tprint('&#123;0&#125;,haha,&#123;1&#125;'.format('a', 'b'))</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 源字符通过关键字的方式来获取数据</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tprint('&#123;name&#125;,haha'.format(name='乔鼎'))</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">3.</span> 花括号的转义</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t如果需要让大括号失去意义，只需要编成两个大括号即可</pre></td></tr></table></figure><ul>\n<li>格式化字符串</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>通过%的方式来匹配字符串和匹配对象之间的关系</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 格式化编码：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\ts = 'this is a %c'%97</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">2.</span> 格式化字符串:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\ts = 'this is a %s'%'abc'</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">3.</span> 格式化整数</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\ts = 'this is a %d'%123</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">4.</span> 格式化无符号八进制数</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\ts = 'this is a %o'%123</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">5.</span> 格式化无符号十六进制数</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\ts = 'this is a %x'%123</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token list punctuation\">6.</span> 格式化定点数</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\ts = 'this is a %f'%123.0000004</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t四舍五入保留六位</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token list punctuation\">7.</span> 格式化科学计数法</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\ts = 'this is a %e'%123.0000004</pre></td></tr></table></figure><ul>\n<li>转义字符</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>作用：拥有特殊含义的字符</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> \\t:横向制表符</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> \\n:换行</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> \\v:纵向制表符</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">4.</span> \\r:老版windows的换行</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">5.</span> \\b:退格符</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">6.</span> \\f:换页符</pre></td></tr></table></figure>",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "http://example.com/language/day4/",
            "url": "http://example.com/language/day4/",
            "title": "day4",
            "date_published": "2022-08-30T04:39:38.819Z",
            "content_html": "<h1 id=\"八大排序\"><a class=\"markdownIt-Anchor\" href=\"#八大排序\">#</a> 八大排序</h1>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 冒泡排序</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 选择排序</pre></td></tr></table></figure><h2 id=\"列表\"><a class=\"markdownIt-Anchor\" href=\"#列表\">#</a> 列表</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>列表：list   是一个类是一个对象</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 存储多个数据，有没有上限？理论上没有长度限制</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 存储多种数据</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> 是一个可迭代对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">4.</span> 列表是一个可变类型的数据</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>不可变类型</pre></td></tr></table></figure><h3 id=\"创建列表\"><a class=\"markdownIt-Anchor\" href=\"#创建列表\">#</a> 创建列表</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 直接创建</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tl = [元素1,元素2,...,元素n]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 普通列表：[1,2,3,4]整型列表，['a','b','c','d']字符串列表</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 混合列表：[1,2,'a','b',[1,2,3]]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> l = []:空列表</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 通过构造方法来创建</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> list():返回一个空的列表</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> list(iterable)：从可迭代对象中的元素，初始化一个列表</pre></td></tr></table></figure><h4 id=\"访问列表里面的元素\"><a class=\"markdownIt-Anchor\" href=\"#访问列表里面的元素\">#</a> 访问列表里面的元素</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>访问：读、改、删</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>读取元素：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 通过索引来获取元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t索引：下标</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t索引不是下标</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tpython中索引是从0开始技术</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t访问形式：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t变量[下标]---访问一个元素</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 读取所有的元素</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t遍历：所有的元素不重复、不遗漏的访问一遍</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t通过for来进行遍历</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 如果下标超出了范围则会报错</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t列表的长度：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t列表的下标范围：</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t0<span class=\"token strike\"><span class=\"token punctuation\">~</span><span class=\"token content\">len(l)-1</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t列表的索引支持负数</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t负号：代表的是方向（反向）</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t-1</span><span class=\"token punctuation\">~</span></span>-len(l)</pre></td></tr></table></figure><h4 id=\"螺旋填数\"><a class=\"markdownIt-Anchor\" href=\"#螺旋填数\">#</a> 螺旋填数</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>螺旋填数：读入两个整数m,n，输出一个m行n列的矩阵，这个矩阵是1~m * n这些自然数按照右、下、左、上螺旋填入的结果。</pre></td></tr></table></figure><h4 id=\"向列表中添加元素\"><a class=\"markdownIt-Anchor\" href=\"#向列表中添加元素\">#</a> 向列表中添加元素</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> append(obj):</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t向列表的末尾添加一个obj</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tobject：对象，在python可以是任何数据</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t用于添加一个数据</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> extend(iterable):</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t通过可迭代对象的元素，来扩展当前的列表</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\titerable：可迭代对象</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t用于向列表中添加多个数据</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token list punctuation\">3.</span> insert(index,object)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t在index之前插入object</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tindex：索引值(下标)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tobject：任何对象</pre></td></tr></table></figure><h4 id=\"修改列表中的元素\"><a class=\"markdownIt-Anchor\" href=\"#修改列表中的元素\">#</a> 修改列表中的元素</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>直接赋值修改</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t变量[下标] = 新值</pre></td></tr></table></figure><h4 id=\"删除列表中的元素\"><a class=\"markdownIt-Anchor\" href=\"#删除列表中的元素\">#</a> 删除列表中的元素</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> clear():</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t清空列表中的所有元素</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> pop([index])：弹栈</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t删除并且返回下标为index的元素(index默认为最后一个)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t如果为空列表则会抛出IndexError</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t栈：是一种数据结构，FILO：First In Last Out</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">3.</span> remove(value):</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t删除第一个出现的value元素（下标最小）</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t如果value不存在会报ValueError</pre></td></tr></table></figure><h4 id=\"切片\"><a class=\"markdownIt-Anchor\" href=\"#切片\">#</a> 切片</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>slice：切片</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>列表通过索引可以获取一个元素,索引处可以接收更多的参数。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>l=[1,2,3,4,5]</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>l[2:4]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>作用：通过起始下标和结束下标获取一段元素(多个元素)，该数据是拷贝出来的数据，原数据不变</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>语法：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t变量[start:end]</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tstart：起始下标</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tend：结束下标</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t取值：[start:stop)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token list punctuation\">1.</span> 如果start为0那么可以不写</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tlist[:3]</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token list punctuation\">2.</span> 如果要直接获取到最后一个元素</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tlist[2:]</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token list punctuation\">3.</span> 如果要全取：</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tlist[:]</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>切片操作往往用于数据的拷贝</pre></td></tr></table></figure><ul>\n<li>切片的高级应用</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>切片还支持第三个参数，表示步长</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>变量[start:end:step]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>start:起始下标</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>end:结束下标</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>step:步长</pre></td></tr></table></figure><h4 id=\"列表的常用运算符\"><a class=\"markdownIt-Anchor\" href=\"#列表的常用运算符\">#</a> 列表的常用运算符</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 加法运算</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tlist1+list2----列表的拼接</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 比较运算(布尔运算)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t>,>=,&lt;,&lt;=,==,!=</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t比较原则：对应下标的元素，按照下标从小到大逐个比较，只要比较出大小则停止比较</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t需要注意类型的兼容性</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">3.</span> 重复运算</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t乘法</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t本质：是多个加法运算</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">4.</span> 成员关系运算:in/not in </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t判断列表中是否有某个成员</pre></td></tr></table></figure><ul>\n<li>列表中的其他方法</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> copy()</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t浅拷贝</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> count(value)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t返回value值在列表中出现的次数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> index(value[,start[,stop]])</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t返回value在列表中从start到stop的范围内的第一次出现的索引</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tvalue：要查询的值</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">4.</span> reverse()</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t原地翻转</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t和大小无关，不排序</pre></td></tr></table></figure><ul>\n<li>补充</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 列表中的所有元素，本质上都不是数据本身，而是数据的首地址</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 列表作为可变类型的数据</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t可变：当列表中的内容发生改变的时候，列表本身的地址不发生改变，但是列表中的元素发生改变。</pre></td></tr></table></figure><h2 id=\"二维列表\"><a class=\"markdownIt-Anchor\" href=\"#二维列表\">#</a> 二维列表</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>维度：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t[[1,2,3],[4,5,6],[4,5,6],[4,5,6],[4,5,6],[4,5,6],[4,5,6]]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>二维列表：一维列表下的一堆列表(一维列表)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>二维列表的访问：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 直接访问</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t访问一个元素可以通过下标进行访问</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tlist<span class=\"token url\">[<span class=\"token content\">行坐标</span>][<span class=\"token variable\">列坐标</span>]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 双重for循环</pre></td></tr></table></figure><ul>\n<li>二维列表的创建</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>l = [[1,2,3]]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>l = []</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>l.append([123])</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>[list()]</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>列表的推导式/生成式</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>l = [i for i in range(10)]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>print(l)</pre></td></tr></table></figure><h1 id=\"元组\"><a class=\"markdownIt-Anchor\" href=\"#元组\">#</a> 元组</h1>\n<h4 id=\"圆括号\"><a class=\"markdownIt-Anchor\" href=\"#圆括号\">#</a> 圆括号</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> ():可以修改运算的优先级</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 元组的组成部分</pre></td></tr></table></figure><h4 id=\"元组-2\"><a class=\"markdownIt-Anchor\" href=\"#元组-2\">#</a> 元组</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 可以存储多个数据</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 可以存储多种数据</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 是不可变类型</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">4.</span> 支持切片操作</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">5.</span> 可迭代对象</pre></td></tr></table></figure><h4 id=\"创建一个元组\"><a class=\"markdownIt-Anchor\" href=\"#创建一个元组\">#</a> 创建一个元组</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 直接创建</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tt = (1,2,3)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tt = (True,1,2,3)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tt = ()</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> 构造方法</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> tuple()---返回一个空元组</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> tuple(iterable)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t利用可迭代对象的元素，初始化一个新的元组</pre></td></tr></table></figure><h4 id=\"访问元组\"><a class=\"markdownIt-Anchor\" href=\"#访问元组\">#</a> 访问元组</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 访问一个元素</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t和列表一样</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 访问多个元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t和列表一样</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> 访问所有元素</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t和列表一样</pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>include <span class=\"token operator\">&lt;</span>stdio<span class=\"token punctuation\">.</span>h<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">mian</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> d1<span class=\"token punctuation\">,</span>d2<span class=\"token punctuation\">,</span>d3<span class=\"token punctuation\">,</span>d4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    d1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>a<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">></span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d1=%d,a=%d,v=%d,c=%d\\n\"</span><span class=\"token punctuation\">,</span>d1<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    d2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">></span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>a<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">></span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d1=%d,a=%d,v=%d,c=%d\\n\"</span><span class=\"token punctuation\">,</span>d2<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    d3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>a<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">></span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d1=%d,a=%d,v=%d,c=%d\\n\"</span><span class=\"token punctuation\">,</span>d3<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    d4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">></span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>a<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">></span>b<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d1=%d,a=%d,v=%d,c=%d\\n\"</span><span class=\"token punctuation\">,</span>d4<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"增加和修改以及删除元素\"><a class=\"markdownIt-Anchor\" href=\"#增加和修改以及删除元素\">#</a> 增加和修改以及删除元素</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">*</span> 元组是不可变类型，所以，本身不支持增删改操作</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">1.</span> 向元组中添加元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t利用切片然后元组拼接</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> 从元组中删除元素</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t利用切片删除元素</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">3.</span> 修改元组中的元素</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t先删除，后添加</pre></td></tr></table></figure><h4 id=\"元组的操作符\"><a class=\"markdownIt-Anchor\" href=\"#元组的操作符\">#</a> 元组的操作符</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 拼接操作</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t+</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 重复操作</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">*</span> ：本质是多个加法</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> 布尔操作：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t>,&lt;,==,!==</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t比较方法和列表一样</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">4.</span> 成员关系运算</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tin/not in</pre></td></tr></table></figure><h1 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\">#</a> 字符串</h1>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>最常用的数据类型，没有之一</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>str</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>特点：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 天生就具有跨平台性</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 是一个可迭代对象</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 支持索引操作</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token list punctuation\">4.</span> 支持切片操作</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token list punctuation\">5.</span> 是一个不可变类型</pre></td></tr></table></figure><ul>\n<li>字符串的类别</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 单引号字符串</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t其他语言：字符串必须使用双引号，单引号只能用于字符</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tpython：允许使用单引号来表达字符串</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t简单，可以和双引号进行嵌套</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> 双引号字符串</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t一般字符串</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">3.</span> 三引号字符串</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t多行字符串</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t单三引号、双三引号</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t一般用于文档注释，必须出现在代码块的第一行</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t也成为长字符串可以换行</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token list punctuation\">4.</span> 原始字符串</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t让所有的转义字符全部失效（只体现最原本的含义）</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\ts = r'Jerry\\tom'</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token list punctuation\">5.</span> 二进制字符串</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t不是字符串类型，是bytes类型</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tstr---bytes:encode()编码</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tbytes---str:decode()解码</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token list punctuation\">6.</span> unicode字符串</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t以unicode的方式来解析字符串</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tu'abc'</pre></td></tr></table></figure><ul>\n<li>创建字符串</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 直接创建：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\ts = 'abc'</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\ts = \"abc\"</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\ts = \"\"\"abc\"\"\"</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\ts = '''abc'''</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 构造方法</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tstr(obj)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tobject：可以接收任何参数</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tinput和print</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tconsole.log(\"\")</pre></td></tr></table></figure><ul>\n<li>访问字符串</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 访问一个</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t通过索引</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 访问多个</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t通过切片</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> 访问所有</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t遍历</pre></td></tr></table></figure><h3 id=\"图书管理系统\"><a class=\"markdownIt-Anchor\" href=\"#图书管理系统\">#</a> 图书管理系统</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 首页：登录注册，用户输入1则登录，输入2则注册</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 登录：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 提示用户输入用户名</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 提示用户输入密码</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 判断用户输入的用户名和密码是否正确</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">4.</span> 如果输入正确，则成功登录</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token list punctuation\">5.</span> 如果输入不正确，则重新登录</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">3.</span> 注册：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 提示用户输入用户名</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 不允许出现特殊字符</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 大于等于四个字儿</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 提示用户输入密码</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 用户密码需要分为高级、中级、低级</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t除了下面三种情况，剩下的情况全都不合规</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t高级：用户密码是大于14位，且由数字、字符、字母构成</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t中级：用户密码是大于8位小于14位，且由数字、字符、字母中的任意两个组合构成</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t低级：用户密码大于6位，小于8位</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 提示用户再次输入密码</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token list punctuation\">4.</span> 如果全部合规，则注册成功</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token list punctuation\">5.</span> 如果不合规，则重新输入</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token list punctuation\">4.</span> 进入图书管理系统：</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 查看所有图书</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 根据书名查找图书</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 根据作者查找图书</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token list punctuation\">4.</span> 修改图书名称 </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token list punctuation\">5.</span> 修改图书价格</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token list punctuation\">6.</span> 删除图书</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token list punctuation\">7.</span> 增加新书</pre></td></tr></table></figure><h3 id=\"常用的方法\"><a class=\"markdownIt-Anchor\" href=\"#常用的方法\">#</a> 常用的方法</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> capitalize()</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t首字母大写，其余字符小写</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> casefold()</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t字母全小写</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> center(字符长度,填充物)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tcenter(20, '-')</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">4.</span> count()</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tcount(sub[, start[, end]])</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t计算字符串中出现了多少sub元素</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">5.</span> encode()</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t编码</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t把字符串编成二进制的内容</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token list punctuation\">6.</span> endswith(suffix[, start[, end]])</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t是否以suffix结尾</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tendswith('系统',0,10)</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token list punctuation\">7.</span> find(sub[, start[, end]])</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t找到在start和end之间的第一个sub元素的下标，如果不存在，则返回-1</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token list punctuation\">8.</span> index(sub[, start[, end]])</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t如果sub在字符串中，则返回最小的下标</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token list punctuation\">9.</span> isalnum()</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t注：问一下</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t人类语言都为True，其他的为false</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token list punctuation\">10.</span> isalpha()</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t注：问一下</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t人类语言字母都为True，其他的为false</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token list punctuation\">11.</span> isdecimal()</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t十进制数字</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t判断字符中是否都是十进制阿拉伯数字</pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token list punctuation\">12.</span> isdigit()</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t判断是否都是十进制数字</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token list punctuation\">13.</span> islower()</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t判断当前字符串是否全都是小写</pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token list punctuation\">14.</span> isnumeric()</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t判断当前字符是否是由数字(只包含中文和阿拉伯，不包含英文)构成的</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token list punctuation\">15.</span> isspace()</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t判断是否全是空格</pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token list punctuation\">16.</span> isupper()</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t判断字符串是否全都是大写</pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token list punctuation\">17.</span> ljust(width[,fillchar])</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\ts.ljust(10,'-')</pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token list punctuation\">18.</span> rjust(width[,fillchar])</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\ts.rjust(10,'-')</pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token list punctuation\">19.</span> lstrip():</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t去掉字符串左侧的空格、回车、指标等空字符</pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token list punctuation\">20.</span> rstrip():</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t去掉字符串右侧的空格、回车、指标等空字符</pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token list punctuation\">21.</span> strip():</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t去掉字符串两侧的空格、回车、指标等空字符</pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token list punctuation\">22.</span> replace(old,new):</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t替换</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t把字符串中的old替换成new</pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token list punctuation\">23.</span> startswith(prefix)</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t判断是否是以prefix开头的字符串</pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token list punctuation\">24.</span> upper()</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t将字符串转为大写</pre></td></tr></table></figure><ul>\n<li>格式化</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>format(<span class=\"token italic\"><span class=\"token punctuation\">*</span><span class=\"token content\">args, </span><span class=\"token punctuation\">*</span></span>*kwargs)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token italic\"><span class=\"token punctuation\">*</span><span class=\"token content\">args：可变长参数，把参数打包成元组来处理</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t</span><span class=\"token punctuation\">*</span></span>kwargs：关键字参数，把参数打包成字典来处理</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">1.</span> 源字符通过下标的方式进行填充获取</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tprint('&#123;0&#125;,haha,&#123;1&#125;'.format('a', 'b'))</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 源字符通过关键字的方式来获取数据</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tprint('&#123;name&#125;,haha'.format(name='乔鼎'))</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">3.</span> 花括号的转义</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t如果需要让大括号失去意义，只需要编成两个大括号即可</pre></td></tr></table></figure><ul>\n<li>格式化字符串</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>通过%的方式来匹配字符串和匹配对象之间的关系</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 格式化编码：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\ts = 'this is a %c'%97</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">2.</span> 格式化字符串:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\ts = 'this is a %s'%'abc'</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">3.</span> 格式化整数</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\ts = 'this is a %d'%123</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">4.</span> 格式化无符号八进制数</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\ts = 'this is a %o'%123</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">5.</span> 格式化无符号十六进制数</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\ts = 'this is a %x'%123</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token list punctuation\">6.</span> 格式化定点数</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\ts = 'this is a %f'%123.0000004</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t四舍五入保留六位</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token list punctuation\">7.</span> 格式化科学计数法</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\ts = 'this is a %e'%123.0000004</pre></td></tr></table></figure><ul>\n<li>转义字符</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>作用：拥有特殊含义的字符</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> \\t:横向制表符</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> \\n:换行</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> \\v:纵向制表符</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">4.</span> \\r:老版windows的换行</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">5.</span> \\b:退格符</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">6.</span> \\f:换页符</pre></td></tr></table></figure>",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "http://example.com/language/day3/",
            "url": "http://example.com/language/day3/",
            "title": "day3",
            "date_published": "2022-08-30T04:39:38.816Z",
            "content_html": "<h2 id=\"列表\"><a class=\"markdownIt-Anchor\" href=\"#列表\">#</a> 列表</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>列表：list   是一个类是一个对象</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 存储多个数据，有没有上限？理论上没有长度限制</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 存储多种数据</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> 是一个可迭代对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">4.</span> 列表是一个可变类型的数据</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>不可变类型</pre></td></tr></table></figure><h3 id=\"创建列表\"><a class=\"markdownIt-Anchor\" href=\"#创建列表\">#</a> 创建列表</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 直接创建</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tl = [元素1,元素2,...,元素n]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 普通列表：[1,2,3,4]整型列表，['a','b','c','d']字符串列表</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 混合列表：[1,2,'a','b',[1,2,3]]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> l = []:空列表</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 通过构造方法来创建</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> list():返回一个空的列表</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> list(iterable)：从可迭代对象中的元素，初始化一个列表</pre></td></tr></table></figure><h4 id=\"访问列表里面的元素\"><a class=\"markdownIt-Anchor\" href=\"#访问列表里面的元素\">#</a> 访问列表里面的元素</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>访问：读、改、删</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>读取元素：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 通过索引来获取元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t索引：下标</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t索引不是下标</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tpython中索引是从0开始技术</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t访问形式：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t变量[下标]---访问一个元素</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 读取所有的元素</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t遍历：所有的元素不重复、不遗漏的访问一遍</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t通过for来进行遍历</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 如果下标超出了范围则会报错</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t列表的长度：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t列表的下标范围：</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t0<span class=\"token strike\"><span class=\"token punctuation\">~</span><span class=\"token content\">len(l)-1</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t列表的索引支持负数</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t负号：代表的是方向（反向）</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t-1</span><span class=\"token punctuation\">~</span></span>-len(l)</pre></td></tr></table></figure><h4 id=\"螺旋填数\"><a class=\"markdownIt-Anchor\" href=\"#螺旋填数\">#</a> 螺旋填数</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>螺旋填数：读入两个整数m,n，输出一个m行n列的矩阵，这个矩阵是1~m * n这些自然数按照右、下、左、上螺旋填入的结果。</pre></td></tr></table></figure><h4 id=\"向列表中添加元素\"><a class=\"markdownIt-Anchor\" href=\"#向列表中添加元素\">#</a> 向列表中添加元素</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> append(obj):</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t向列表的末尾添加一个obj</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tobject：对象，在python可以是任何数据</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t用于添加一个数据</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> extend(iterable):</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t通过可迭代对象的元素，来扩展当前的列表</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\titerable：可迭代对象</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t用于向列表中添加多个数据</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token list punctuation\">3.</span> insert(index,object)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t在index之前插入object</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tindex：索引值(下标)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tobject：任何对象</pre></td></tr></table></figure><h4 id=\"修改列表中的元素\"><a class=\"markdownIt-Anchor\" href=\"#修改列表中的元素\">#</a> 修改列表中的元素</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>直接赋值修改</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t变量[下标] = 新值</pre></td></tr></table></figure><h4 id=\"删除列表中的元素\"><a class=\"markdownIt-Anchor\" href=\"#删除列表中的元素\">#</a> 删除列表中的元素</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> clear():</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t清空列表中的所有元素</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> pop([index])：弹栈</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t删除并且返回下标为index的元素(index默认为最后一个)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t如果为空列表则会抛出IndexError</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t栈：是一种数据结构，FILO：First In Last Out</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">3.</span> remove(value):</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t删除第一个出现的value元素（下标最小）</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t如果value不存在会报ValueError</pre></td></tr></table></figure><h4 id=\"切片\"><a class=\"markdownIt-Anchor\" href=\"#切片\">#</a> 切片</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>slice：切片</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>列表通过索引可以获取一个元素,索引处可以接收更多的参数。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>l=[1,2,3,4,5]</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>l[2:4]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>作用：通过起始下标和结束下标获取一段元素(多个元素)，该数据是拷贝出来的数据，原数据不变</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>语法：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t变量[start:end]</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tstart：起始下标</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tend：结束下标</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t取值：[start:stop)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token list punctuation\">1.</span> 如果start为0那么可以不写</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tlist[:3]</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token list punctuation\">2.</span> 如果要直接获取到最后一个元素</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tlist[2:]</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token list punctuation\">3.</span> 如果要全取：</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tlist[:]</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>切片操作往往用于数据的拷贝</pre></td></tr></table></figure><ul>\n<li>切片的高级应用</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>切片还支持第三个参数，表示步长</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>变量[start:end:step]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>start:起始下标</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>end:结束下标</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>step:步长</pre></td></tr></table></figure><h4 id=\"列表的常用运算符\"><a class=\"markdownIt-Anchor\" href=\"#列表的常用运算符\">#</a> 列表的常用运算符</h4>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 加法运算</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tlist1+list2----列表的拼接</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 比较运算(布尔运算)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t>,>=,&lt;,&lt;=,==,!=</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t比较原则：对应下标的元素，按照下标从小到大逐个比较，只要比较出大小则停止比较</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t需要注意类型的兼容性</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">3.</span> 重复运算</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t乘法</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t本质：是多个加法运算</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token list punctuation\">4.</span> 成员关系运算:in/not in </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t判断列表中是否有某个成员</pre></td></tr></table></figure><ul>\n<li>列表中的其他方法</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> copy()</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t浅拷贝</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> count(value)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t返回value值在列表中出现的次数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> index(value[,start[,stop]])</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t返回value在列表中从start到stop的范围内的第一次出现的索引</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tvalue：要查询的值</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token list punctuation\">4.</span> reverse()</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t原地翻转</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t和大小无关，不排序</pre></td></tr></table></figure><ul>\n<li>补充</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 列表中的所有元素，本质上都不是数据本身，而是数据的首地址</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 列表作为可变类型的数据</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t可变：当列表中的内容发生改变的时候，列表本身的地址不发生改变，但是列表中的元素发生改变。</pre></td></tr></table></figure>",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "http://example.com/language/day2/",
            "url": "http://example.com/language/day2/",
            "title": "day2",
            "date_published": "2022-08-30T04:39:38.814Z",
            "content_html": "<h1 id=\"流程控制\"><a class=\"markdownIt-Anchor\" href=\"#流程控制\">#</a> 流程控制</h1>\n<h2 id=\"条件分支\"><a class=\"markdownIt-Anchor\" href=\"#条件分支\">#</a> 条件分支</h2>\n<ul>\n<li>if-else 结构</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>语法：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> if 布尔表达式:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\t\t代码</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> if 布尔表达式:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t\t代码</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\telse:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t\t代码</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> if 布尔表达式:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t\t代码</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\telif 布尔表达式:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t\t代码</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t...</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t...</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\telse:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\t代码</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>注意：</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> if语句不会影响和自己平级的其他结构</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> if和else中的代码不可能同时发生</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>输入一个人的分数：90分以上优秀，80-90良好，70-80普通，60-70及格，0-60不及格</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>代码块：</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t书写代码的块级结构</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tpython中用冒号和缩进来表示代码块</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t其他语言中：&#123;&#125;来表示代码块</pre></td></tr></table></figure><ul>\n<li>嵌套使用</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>if-elif-else结构中中，可以在任意一个代码块中嵌套if结构(三种中任意一种都可以)</pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>score <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入你的分数：'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> score <span class=\"token operator\">>=</span><span class=\"token number\">0</span> <span class=\"token keyword\">and</span> score <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> score <span class=\"token operator\">&lt;</span> <span class=\"token number\">60</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不及格'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">elif</span> score <span class=\"token operator\">&lt;</span> <span class=\"token number\">70</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'及格'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">elif</span> score <span class=\"token operator\">&lt;</span> <span class=\"token number\">80</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'普通'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">elif</span> score <span class=\"token operator\">&lt;</span> <span class=\"token number\">90</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'良好'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'优秀'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'你有病'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>else 悬挂问题</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tips:if或者else里面定义的内容，会泄露到上一级结构中</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> python可以很好地规避else悬挂问题</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t依靠严格的缩进</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">2.</span> C语言中if语句会和最近的else组成一个整体</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t有可能当前结构并不属于该if结构---称之为else悬挂问题</pre></td></tr></table></figure><ul>\n<li>断言</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>assert：是一个关键字</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>含义：判断assert之后的布尔表达式是否为真，如果为真则正常执行程序，如果为假，立刻终止程序并且抛出异常(AssertionError)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>语法：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tassert 布尔表达式:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>主动报错</pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">assert</span> a <span class=\"token operator\">></span> b</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hahaha'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>晨讲</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>每天早上8：30-9:20晨讲</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>每组出一个人，不可重复</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>每天三组：一个人15分钟</pre></td></tr></table></figure><h2 id=\"循环流程\"><a class=\"markdownIt-Anchor\" href=\"#循环流程\">#</a> 循环流程</h2>\n<ul>\n<li>while 循环</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>循环：重复执行代码</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 语法：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\twhile 布尔表达式:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t代码(循环体)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">2.</span> 注意：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t控制while后面的布尔表达式，可能会出现死循环，也可能出现正常终止</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t死循环：无限循环</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 服务器</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 硬件</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t合理的控制循环条件</pre></td></tr></table></figure><figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>while True</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>while 1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>python2：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> True是一个保留字，可以被修改</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 每次执行while True的时候会对True的值进行校验</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> while 1的执行效率更高</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>python3：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> True是一个关键字，是不可变的</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 执行while True的时候不需要进行校验</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> while True while 1的效率是一致的</pre></td></tr></table></figure><ul>\n<li>for 循环</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>也称为计数循环</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>可迭代对象：是指拥有迭代器的对象</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>迭代器：是一个特殊的可迭代对象</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>可迭代对象：str、list、tuple 类似于这样的数据，我们称为可迭代对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">1.</span> 语法：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tfor 变量 in 可迭代对象:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t代码(循环体)</pre></td></tr></table></figure><ul>\n<li>range</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对象</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>range的参数必须是整型</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">1.</span> range(stop)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t返回一个range对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tstart：默认为0</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> range(start, stop[, step])</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t返回一个range对象</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tstart：开始的值</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tstop：结束的值（不包括）</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tstep：步长（可以是正数也可以是负数）</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token list punctuation\">3.</span> range对象是一个可迭代对象</pre></td></tr></table></figure><ul>\n<li>补充</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>知道循环次数：for循环</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>不知道循环次数但是知道循环条件：while循环</pre></td></tr></table></figure><ul>\n<li>break</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>跳出本层循环，之后的循环不再执行</pre></td></tr></table></figure><ul>\n<li>continue</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>跳出本次循环，之后的循环不影响</pre></td></tr></table></figure><ul>\n<li>循环嵌套</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>多个循环之间，可以任意嵌套使用</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> while里面套while</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> while里面套for</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> for里面套while</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">4.</span> for里面套for</pre></td></tr></table></figure><ul>\n<li>九九乘法表</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># i = 2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># range(1,3)=[1,2]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">'*'</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">'='</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>end<span class=\"token operator\">=</span><span class=\"token string\">'\\t'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"列表\"><a class=\"markdownIt-Anchor\" href=\"#列表\">#</a> 列表</h1>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>列表：list   是一个类是一个对象</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 存储多个数据，有没有上限？理论上没有长度限制</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 存储多种数据</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> 是一个可迭代对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">4.</span> 列表是一个可变类型的数据</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>不可变类型</pre></td></tr></table></figure><ul>\n<li>创建列表</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 直接创建</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tl = [元素1,元素2,...,元素n]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 普通列表：[1,2,3,4]整型列表，['a','b','c','d']字符串列表</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 混合列表：[1,2,'a','b',[1,2,3]]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token list punctuation\">3.</span> l = []:空列表</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">2.</span> 通过构造方法来创建</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> list():返回一个空的列表</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> list(iterable)：从可迭代对象中的元素，初始化一个列表</pre></td></tr></table></figure><ul>\n<li>访问列表里面的元素</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>访问：读、改、删</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>读取元素：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 通过索引来获取元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t索引：下标</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t索引不是下标</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tpython中索引是从0开始技术</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t访问形式：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t变量[下标]---访问一个元素</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 读取所有的元素</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t遍历：所有的元素不重复、不遗漏的访问一遍</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t通过for来进行遍历</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 如果下标超出了范围则会报错</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t列表的长度：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t列表的下标范围：</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t0<span class=\"token strike\"><span class=\"token punctuation\">~</span><span class=\"token content\">len(l)-1</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t列表的索引支持负数</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t负号：代表的是方向（反向）</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t-1</span><span class=\"token punctuation\">~</span></span>-len(l)</pre></td></tr></table></figure><ul>\n<li>螺旋填数</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>螺旋填数：读入两个整数m,n，输出一个m行n列的矩阵，这个矩阵是1~m * n这些自然数按照右、下、左、上螺旋填入的结果。</pre></td></tr></table></figure><ul>\n<li>向列表中添加元素</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> append()</pre></td></tr></table></figure>",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "http://example.com/language/day1/",
            "url": "http://example.com/language/day1/",
            "title": "day1",
            "date_published": "2022-08-30T04:39:38.810Z",
            "content_html": "<h3 id=\"什么是python\"><a class=\"markdownIt-Anchor\" href=\"#什么是python\">#</a> 什么是 Python？</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python：巨蟒</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>python是一门程序设计语言</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>语言：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 自然语言：肢体语言、汉语、英语、法语......</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 机器语言：001101010101二进制（微码编程）</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 程序设计语言：C、C艹、C艹艹、Java、python、PHP、GO</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>语言的高级型：越接近自然语言的编程语言就越高级，越高级的编程语言效率越低。汇编语言相对来说开发难度高，但是效率相对高，语言相对低级。</pre></td></tr></table></figure><ul>\n<li>python</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python:1989年，圣诞节，Guido Van Rossum</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Guido，退出了python的决策层。回归。</pre></td></tr></table></figure><ul>\n<li>python 的特点</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 语法简洁而清晰</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 强大的类库（17W)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 胶水语言</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">4.</span> 纯面向对象的语言</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>其他特点：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token list punctuation\">1.</span> 跨平台：win、linux、mac.....</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token list punctuation\">2.</span> 运行机制：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token list punctuation\">1.</span> 直接解释执行</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token list punctuation\">2.</span> 先编译，后解释/执行</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token list punctuation\">3.</span> 代码量较少</pre></td></tr></table></figure><ul>\n<li>python 的应用场景</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>领域：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">1.</span> 航空航天 图像识别</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> 3D动画</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">3.</span> WEB应用</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">4.</span> 云计算</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token list punctuation\">5.</span> 企业应用</pre></td></tr></table></figure><ul>\n<li>python 解释器的实现</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> Cpython：原生的解释器（官方）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t用C语言实现的解释器</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">2.</span> Jython：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t用Java实现的解释器</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">3.</span> IronPython：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t用.NET实现的解释器</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token list punctuation\">4.</span> pypy：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t用python实现的解释器</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>效率最高的是：pypy</pre></td></tr></table></figure><ul>\n<li>python 的安装</li>\n</ul>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 版本必须是3.8or3.9</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 安装，选择路径，强烈建议装在C盘并且路径中不要有中文，路径一定要牢记</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 勾选add ???? to path</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">4.</span> 下一步</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">5.</span> 打开cmd窗口，输入python，查看版本是否正确</pre></td></tr></table></figure><h1 id=\"流程控制\"><a class=\"markdownIt-Anchor\" href=\"#流程控制\">#</a> 流程控制</h1>\n<h2 id=\"条件分支\"><a class=\"markdownIt-Anchor\" href=\"#条件分支\">#</a> 条件分支</h2>\n<ul>\n<li>if-else 结构</li>\n</ul>\n<pre><code class=\"language-markdown\"></code></pre>\n<h2 id=\"循环流程\"><a class=\"markdownIt-Anchor\" href=\"#循环流程\">#</a> 循环流程</h2>\n",
            "tags": [
                "Python"
            ]
        }
    ]
}