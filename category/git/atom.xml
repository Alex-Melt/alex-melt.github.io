<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>melt • Posts by &#34;git&#34; category</title>
    <link href="http://example.com" />
    <updated>2022-08-28T15:13:37.328Z</updated>
    <category term="Git" />
    <category term="Node.js" />
    <category term="Mysql" />
    <category term="Java" />
    <category term="JavaWeb" />
    <category term="Maven" />
    <category term="Vs-code" />
    <category term="C++" />
    <category term="Spring" />
    <category term="Email" />
    <category term="Mybatis" />
    <category term="数据结构" />
    <category term="LeetCode" />
    <entry>
        <id>http://example.com/Git%E4%BD%BF%E7%94%A8/</id>
        <title>Git使用</title>
        <link rel="alternate" href="http://example.com/Git%E4%BD%BF%E7%94%A8/"/>
        <content type="html">&lt;h2 id=&#34;git分类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git分类&#34;&gt;#&lt;/a&gt; Git 分类&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://bingohuang.gitbooks.io/progit2/content/01-introduction/sections/about-version-control.html&#34;&gt;&lt;strong&gt;帮助文档&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWFybmdpdGJyYW5jaGluZy5qcy5vcmcv&#34;&gt;图文了解&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;
&lt;blockquote&gt;
&lt;p&gt;常见的版本控制工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Git&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SVN&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CVS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VSS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TFS&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;版本控制分类&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;本地版本控制 RCS&lt;/li&gt;
&lt;li&gt;集中版本控制 SVN CVS VSS&lt;/li&gt;
&lt;li&gt;分布式版本控制 Git&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;GIt 与 SVN 最主要的区别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;SVN 是集中版本控制系统，版本库是集中放在中央服务器，工作时用的都是自己的电脑，首先得从中央服务器得到最新的版本，然后工作，完成工作后，将完成的工作推送到中央服务器，必须联网才能工作，对网络带宽要求较高 。&lt;/p&gt;
&lt;p&gt;Git 是分布式版本控制，没有中央服务器，每个人的电脑就是一个完整的版本库，工作时不需要联网，协同的方法：比如自己在电脑上修改了 A，其他人也在电脑上修改了 A, 这时只需把各自的修改推送给对方。&lt;/p&gt;
&lt;h2 id=&#34;安装git以及配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#安装git以及配置&#34;&gt;#&lt;/a&gt; 安装 Git 以及配置&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;下载 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZWdpc3RyeS5ucG1taXJyb3IuY29tL2JpbmFyeS5odG1sP3BhdGg9Z2l0LWZvci13aW5kb3dz&#34;&gt;https://registry.npmmirror.com/binary.html?path=git-for-windows&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;修改安装路径，在中途有一个默认 vim 编辑器，可以选择更换为 notepad++，其余一路 next&lt;/p&gt;
&lt;p&gt;&lt;s&gt;卸载：先清理环境变量，后卸载&lt;/s&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;启动 Git&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;安装后会在菜单生成 3 个程序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Git Bash：Unix 与 Linux 风格的命令行，使用最多，&lt;/li&gt;
&lt;li&gt;Git CMD：Windows 风格的命令行&lt;/li&gt;
&lt;li&gt;Git GUI：图形界面的 Git，不建议初学者使用&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;基本的 Linux 命令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1）、cd : 改变目录。&lt;/p&gt;
&lt;p&gt;2）、cd . . 回退到上一个目录，直接 cd 进入默认目录&lt;/p&gt;
&lt;p&gt;3）、pwd : 显示当前所在的目录路径。&lt;/p&gt;
&lt;p&gt;4）、ls (ll): 都是列出当前目录中的所有文件，只不过 ll (两个 ll) 列出的内容更为详细。&lt;/p&gt;
&lt;p&gt;5）、touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个 index.js 文件。&lt;/p&gt;
&lt;p&gt;6）、rm: 删除一个文件，rm index.js 就会把 index.js 文件删除。&lt;/p&gt;
&lt;p&gt;7）、mkdir: 新建一个目录，就是新建一个文件夹。&lt;/p&gt;
&lt;p&gt;8）、rm -r : 删除一个文件夹，rm -r src 删除 src 目录&lt;/p&gt;
&lt;p&gt;9）、mv 移动文件，mv index.html src index.html 是我们要移动的文件，src 是目标文件夹，当然，这样写，&lt;/p&gt;
&lt;p&gt;必须保证文件和目标文件夹在同一目录下。&lt;/p&gt;
&lt;p&gt;10）、reset 重新初始化终端 / 清屏。&lt;/p&gt;
&lt;p&gt;11）、clear 清屏。&lt;/p&gt;
&lt;p&gt;12）、history 查看命令历史。&lt;/p&gt;
&lt;p&gt;13）、help 帮助。&lt;/p&gt;
&lt;p&gt;14）、exit 退出。&lt;/p&gt;
&lt;p&gt;15）、# 表示注释&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Git 配置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;查看配置 &lt;mark&gt;git config -l&lt;/mark&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#查看系统config 
git config --system --list 

#查看当前用户（global）配置 
git config --global --list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看 Git 相关的配置文件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Git\mingw64\etc\gitconfifig ： Git 安装目录下的 gitconfifig --system 系统级&lt;/li&gt;
&lt;li&gt;C:\Users\Administrator\ .gitconfifig 只适用于当前登录用户的配置 --global 全局&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里可以直接编辑配置文件，通过命令设置后会响应到这里&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;设置用户名与邮箱（用户标识，必要）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;安装 Git 后首先要做的事情是设置用户名称和 e-mail 地址。因为每次 Git 提交都会使用该信息。它被永远的嵌入到了你的提交中：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git config --global user.name &amp;quot;***&amp;quot; #名称 
git config --global user.email **@qq.com #邮箱 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;git基本理论&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git基本理论&#34;&gt;#&lt;/a&gt; Git 基本理论&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;工作区域&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Git 本地有三个工作区域：工作目录（Working Directory）、暂存区 (Stage/Index)、资源库 (Repository 或 Git Directory)。如果在加上远程的 git 仓库 (Remote Directory) 就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：&lt;img data-src=&#34;/image/Git/Git-01.png&#34; alt=&#34;Git-01&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Workspace&lt;/strong&gt;：工作区，就是你平时存放项目代码的地方&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Index / Stage&lt;/strong&gt;：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Repository&lt;/strong&gt;：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中 HEAD 指向最新放入仓库的版本&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Remote&lt;/strong&gt;：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本地的三个区域确切的说应该是 git 仓库中 HEAD 指向的版本：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image/Git/Git-02.png&#34; alt=&#34;Git-02&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Directory&lt;/strong&gt;：使用 Git 管理的一个目录，也就是一个仓库，包含我们的工作空间和 Git 的管理空间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WorkSpace&lt;/strong&gt;：需要通过 Git 进行版本控制的目录和文件，这些目录和文件组成了工作空间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.git&lt;/strong&gt;：存放 Git 管理信息的目录，初始化仓库的时候自动创建。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Index/Stage&lt;/strong&gt;：暂存区，或者叫待提交更新区，在提交进入 repo 之前，我们可以把所有的更新放在暂存区。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Local Repo&lt;/strong&gt;：本地仓库，一个存放在本地的版本库；HEAD 会只是当前的开发分支（branch）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stash&lt;/strong&gt;：隐藏，是一个工作状态保存栈，用于保存 / 恢复 WorkSpace 中的临时状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;工作流程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;git 的工作流程一般是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在工作目录中添加，修改文件&lt;/li&gt;
&lt;li&gt;将要进行版本管理的问文件放入暂存区&lt;/li&gt;
&lt;li&gt;将暂存区的文件提交到 git 仓库&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此，git 管理的文件有三种状态：已修改（modifified）, 已暂存（staged）, 已提交 (committed)&lt;/p&gt;
&lt;h2 id=&#34;git项目搭建&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git项目搭建&#34;&gt;#&lt;/a&gt; Git 项目搭建&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;创建工作目录与常用命令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;工作目录（WorkSpace) 一般就是你希望 Git 帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/image/Git/Git-03.png&#34; alt=&#34;Git-03&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本地仓库搭建&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建全新的仓库，需要用 GIT 管理的项目的根目录执行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 在当前目录新建一个Git代码库 
$ git init 12
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行后可以看到，仅仅在项目目录多出了一个.git 目录，关于版本等的所有信息都在这个目录里面&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;克隆远程仓库&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;# 克隆一个项目和它的整个代码历史(版本信息) 
$ git clone [url]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;git文件操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git文件操作&#34;&gt;#&lt;/a&gt; Git 文件操作&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;文件 4 种状态&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Untracked&lt;/strong&gt;: 未跟踪，此文件在文件夹中，但并没有加入到 git 库，不参与版本控制。通过 &lt;strong&gt;git add&lt;/strong&gt; 状态变为 &lt;strong&gt;Staged&lt;/strong&gt; .&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unmodify&lt;/strong&gt;: 文件已经入库，未修改，即版本库中的文件快照内容与文件夹中完全一致。这种类型的文件有两种去处，如果它被修改，而变为 Modified . 如果使用 git rm 移出版本库，则成为 Untracked 文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Modifified&lt;/strong&gt;: 文件已修改，仅仅是修改，并没有进行其他的操作。这个文件也有两个去处，通过 git add 可进入暂存 staged 状态，使用 git checkout 则丢弃修改过，返回到 unmodify 状态，这个 git checkout 即从库中取出文件，覆盖当前修改！&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Staged&lt;/strong&gt;: 暂存状态。执行 git commit 则将修改同步到库中，这时库中的文件和本地文件又变为一致，文件为 Unmodify 状态。执行 git reset HEAD filename 取消暂存，文件状态为 Modified&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;查看文件状态&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;#查看指定文件状态
git status [filename] 

#查看所有文件状态 
git status

# git add .			添加所有文件到暂存区
# git commit -m	&amp;quot;内容&amp;quot;	提交暂存区中的内容到本地仓库 -m 提交信息
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;忽略文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;主目录下建立 &amp;quot;.gitignore&amp;quot; 文件，此文件有如下规则:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;忽略文件中的空行或以井号（#）开始的行将会被忽略。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以使用 Linux 通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号 [abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件默认文件或目录都忽略）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;#为注释 
*.txt 		   #忽略所有 .txt结尾的文件 
!lib.txt 	   #但lib.txt除外 
/temp 		   #仅忽略项目根目录下的TODO文件,不包括其它目录temp build/ 	     #忽略build/目录下的所有文件 
doc/*.txt 	  #会忽略 doc/notes.txt 但不包括 doc/server/arch.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;git分支中常用指令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git分支中常用指令&#34;&gt;#&lt;/a&gt; git 分支中常用指令&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# 列出所有本地分支 
git branch 

# 列出所有远程分支 
git branch -r 

# 新建一个分支，但依然停留在当前分支 
git branch [branch-name] 

# 新建一个分支，并切换到该分支 
git checkout -b [branch] 

# 合并指定分支到当前分支 
git merge [branch] 

# 删除分支 
git branch -d [branch-name] 

# 删除远程分支 
git push origin --delete [branch-name] 
$ git branch -dr [remote/branch] 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;使用gitee或者github&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用gitee或者github&#34;&gt;#&lt;/a&gt; 使用 Gitee 或者 Github&lt;/h2&gt;
&lt;p&gt;设置本机绑定 SSH 公钥，实现免密码登录&lt;/p&gt;
&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;figcaption data-lang=&#34;markdown&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token list punctuation&#34;&gt;1.&lt;/span&gt; 进入 C:\Users\Administrator&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token list punctuation&#34;&gt;2.&lt;/span&gt; 新建.ssh文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token list punctuation&#34;&gt;3.&lt;/span&gt; 进入该文件夹，搜索栏cmd进入该路径下的命令提示符&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token list punctuation&#34;&gt;4.&lt;/span&gt; 敲入ssh-keygen -t rsa -C &#34;&#34;   生成公钥&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token list punctuation&#34;&gt;5.&lt;/span&gt; 打开GitHub设置配置ssh：将.ssh下生成的pub公钥打开复制即可&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;测试是否成功&lt;/p&gt;
&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;figcaption data-lang=&#34;markdown&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ssh -T git@github.com&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ssh -T git@gitee.com&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="Git" />
        <updated>2022-08-28T15:13:37.328Z</updated>
    </entry>
</feed>
