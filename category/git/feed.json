{
    "version": "https://jsonfeed.org/version/1",
    "title": "melt • All posts by \"git\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/Git%E4%BD%BF%E7%94%A8/",
            "url": "http://example.com/Git%E4%BD%BF%E7%94%A8/",
            "title": "Git使用",
            "date_published": "2022-08-28T15:13:37.328Z",
            "content_html": "<h2 id=\"git分类\"><a class=\"markdownIt-Anchor\" href=\"#git分类\">#</a> Git 分类</h2>\n<p><a href=\"https://bingohuang.gitbooks.io/progit2/content/01-introduction/sections/about-version-control.html\"><strong>帮助文档</strong></a></p>\n<p><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFybmdpdGJyYW5jaGluZy5qcy5vcmcv\">图文了解</span></strong></p>\n<span id=\"more\"></span>\n<blockquote>\n<p>常见的版本控制工具</p>\n</blockquote>\n<ul>\n<li>\n<p>Git</p>\n</li>\n<li>\n<p>SVN</p>\n</li>\n<li>\n<p>CVS</p>\n</li>\n<li>\n<p>VSS</p>\n</li>\n<li>\n<p>TFS</p>\n</li>\n</ul>\n<blockquote>\n<p>版本控制分类</p>\n</blockquote>\n<ol>\n<li>本地版本控制 RCS</li>\n<li>集中版本控制 SVN CVS VSS</li>\n<li>分布式版本控制 Git</li>\n</ol>\n<blockquote>\n<p>GIt 与 SVN 最主要的区别</p>\n</blockquote>\n<p>SVN 是集中版本控制系统，版本库是集中放在中央服务器，工作时用的都是自己的电脑，首先得从中央服务器得到最新的版本，然后工作，完成工作后，将完成的工作推送到中央服务器，必须联网才能工作，对网络带宽要求较高 。</p>\n<p>Git 是分布式版本控制，没有中央服务器，每个人的电脑就是一个完整的版本库，工作时不需要联网，协同的方法：比如自己在电脑上修改了 A，其他人也在电脑上修改了 A, 这时只需把各自的修改推送给对方。</p>\n<h2 id=\"安装git以及配置\"><a class=\"markdownIt-Anchor\" href=\"#安装git以及配置\">#</a> 安装 Git 以及配置</h2>\n<blockquote>\n<p>下载 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWdpc3RyeS5ucG1taXJyb3IuY29tL2JpbmFyeS5odG1sP3BhdGg9Z2l0LWZvci13aW5kb3dz\">https://registry.npmmirror.com/binary.html?path=git-for-windows</span></p>\n</blockquote>\n<p>修改安装路径，在中途有一个默认 vim 编辑器，可以选择更换为 notepad++，其余一路 next</p>\n<p><s>卸载：先清理环境变量，后卸载</s></p>\n<blockquote>\n<p>启动 Git</p>\n</blockquote>\n<p>安装后会在菜单生成 3 个程序：</p>\n<ul>\n<li>Git Bash：Unix 与 Linux 风格的命令行，使用最多，</li>\n<li>Git CMD：Windows 风格的命令行</li>\n<li>Git GUI：图形界面的 Git，不建议初学者使用</li>\n</ul>\n<blockquote>\n<p>基本的 Linux 命令</p>\n</blockquote>\n<p>1）、cd : 改变目录。</p>\n<p>2）、cd . . 回退到上一个目录，直接 cd 进入默认目录</p>\n<p>3）、pwd : 显示当前所在的目录路径。</p>\n<p>4）、ls (ll): 都是列出当前目录中的所有文件，只不过 ll (两个 ll) 列出的内容更为详细。</p>\n<p>5）、touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个 index.js 文件。</p>\n<p>6）、rm: 删除一个文件，rm index.js 就会把 index.js 文件删除。</p>\n<p>7）、mkdir: 新建一个目录，就是新建一个文件夹。</p>\n<p>8）、rm -r : 删除一个文件夹，rm -r src 删除 src 目录</p>\n<p>9）、mv 移动文件，mv index.html src index.html 是我们要移动的文件，src 是目标文件夹，当然，这样写，</p>\n<p>必须保证文件和目标文件夹在同一目录下。</p>\n<p>10）、reset 重新初始化终端 / 清屏。</p>\n<p>11）、clear 清屏。</p>\n<p>12）、history 查看命令历史。</p>\n<p>13）、help 帮助。</p>\n<p>14）、exit 退出。</p>\n<p>15）、# 表示注释</p>\n<blockquote>\n<p>Git 配置</p>\n</blockquote>\n<p>查看配置 <mark>git config -l</mark></p>\n<pre><code>#查看系统config \ngit config --system --list \n\n#查看当前用户（global）配置 \ngit config --global --list\n</code></pre>\n<p>查看 Git 相关的配置文件：</p>\n<ol>\n<li>Git\\mingw64\\etc\\gitconfifig ： Git 安装目录下的 gitconfifig --system 系统级</li>\n<li>C:\\Users\\Administrator\\ .gitconfifig 只适用于当前登录用户的配置 --global 全局</li>\n</ol>\n<p>这里可以直接编辑配置文件，通过命令设置后会响应到这里</p>\n<blockquote>\n<p>设置用户名与邮箱（用户标识，必要）</p>\n</blockquote>\n<p>安装 Git 后首先要做的事情是设置用户名称和 e-mail 地址。因为每次 Git 提交都会使用该信息。它被永远的嵌入到了你的提交中：</p>\n<pre><code>git config --global user.name &quot;***&quot; #名称 \ngit config --global user.email **@qq.com #邮箱 \n</code></pre>\n<h2 id=\"git基本理论\"><a class=\"markdownIt-Anchor\" href=\"#git基本理论\">#</a> Git 基本理论</h2>\n<blockquote>\n<p>工作区域</p>\n</blockquote>\n<p>Git 本地有三个工作区域：工作目录（Working Directory）、暂存区 (Stage/Index)、资源库 (Repository 或 Git Directory)。如果在加上远程的 git 仓库 (Remote Directory) 就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：<img data-src=\"/image/Git/Git-01.png\" alt=\"Git-01\"></p>\n<ul>\n<li><strong>Workspace</strong>：工作区，就是你平时存放项目代码的地方</li>\n<li><strong>Index / Stage</strong>：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li>\n<li><strong>Repository</strong>：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中 HEAD 指向最新放入仓库的版本</li>\n<li><strong>Remote</strong>：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li>\n</ul>\n<p>本地的三个区域确切的说应该是 git 仓库中 HEAD 指向的版本：</p>\n<p><img data-src=\"/image/Git/Git-02.png\" alt=\"Git-02\"></p>\n<ul>\n<li><strong>Directory</strong>：使用 Git 管理的一个目录，也就是一个仓库，包含我们的工作空间和 Git 的管理空间。</li>\n<li><strong>WorkSpace</strong>：需要通过 Git 进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li>\n<li><strong>.git</strong>：存放 Git 管理信息的目录，初始化仓库的时候自动创建。</li>\n<li><strong>Index/Stage</strong>：暂存区，或者叫待提交更新区，在提交进入 repo 之前，我们可以把所有的更新放在暂存区。</li>\n<li><strong>Local Repo</strong>：本地仓库，一个存放在本地的版本库；HEAD 会只是当前的开发分支（branch）。</li>\n<li><strong>Stash</strong>：隐藏，是一个工作状态保存栈，用于保存 / 恢复 WorkSpace 中的临时状态。</li>\n</ul>\n<blockquote>\n<p>工作流程</p>\n</blockquote>\n<p>git 的工作流程一般是：</p>\n<ol>\n<li>在工作目录中添加，修改文件</li>\n<li>将要进行版本管理的问文件放入暂存区</li>\n<li>将暂存区的文件提交到 git 仓库</li>\n</ol>\n<p>因此，git 管理的文件有三种状态：已修改（modifified）, 已暂存（staged）, 已提交 (committed)</p>\n<h2 id=\"git项目搭建\"><a class=\"markdownIt-Anchor\" href=\"#git项目搭建\">#</a> Git 项目搭建</h2>\n<blockquote>\n<p>创建工作目录与常用命令</p>\n</blockquote>\n<p>工作目录（WorkSpace) 一般就是你希望 Git 帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。</p>\n<p><img data-src=\"/image/Git/Git-03.png\" alt=\"Git-03\"></p>\n<blockquote>\n<p>本地仓库搭建</p>\n</blockquote>\n<p>创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库.</p>\n<ol>\n<li>\n<p>创建全新的仓库，需要用 GIT 管理的项目的根目录执行：</p>\n<pre><code># 在当前目录新建一个Git代码库 \n$ git init 12\n</code></pre>\n</li>\n<li>\n<p>执行后可以看到，仅仅在项目目录多出了一个.git 目录，关于版本等的所有信息都在这个目录里面</p>\n</li>\n</ol>\n<blockquote>\n<p>克隆远程仓库</p>\n</blockquote>\n<pre><code># 克隆一个项目和它的整个代码历史(版本信息) \n$ git clone [url]\n</code></pre>\n<h2 id=\"git文件操作\"><a class=\"markdownIt-Anchor\" href=\"#git文件操作\">#</a> Git 文件操作</h2>\n<blockquote>\n<p>文件 4 种状态</p>\n</blockquote>\n<ul>\n<li><strong>Untracked</strong>: 未跟踪，此文件在文件夹中，但并没有加入到 git 库，不参与版本控制。通过 <strong>git add</strong> 状态变为 <strong>Staged</strong> .</li>\n<li><strong>Unmodify</strong>: 文件已经入库，未修改，即版本库中的文件快照内容与文件夹中完全一致。这种类型的文件有两种去处，如果它被修改，而变为 Modified . 如果使用 git rm 移出版本库，则成为 Untracked 文件</li>\n<li><strong>Modifified</strong>: 文件已修改，仅仅是修改，并没有进行其他的操作。这个文件也有两个去处，通过 git add 可进入暂存 staged 状态，使用 git checkout 则丢弃修改过，返回到 unmodify 状态，这个 git checkout 即从库中取出文件，覆盖当前修改！</li>\n<li><strong>Staged</strong>: 暂存状态。执行 git commit 则将修改同步到库中，这时库中的文件和本地文件又变为一致，文件为 Unmodify 状态。执行 git reset HEAD filename 取消暂存，文件状态为 Modified</li>\n</ul>\n<blockquote>\n<p>查看文件状态</p>\n</blockquote>\n<pre><code>#查看指定文件状态\ngit status [filename] \n\n#查看所有文件状态 \ngit status\n\n# git add .\t\t\t添加所有文件到暂存区\n# git commit -m\t&quot;内容&quot;\t提交暂存区中的内容到本地仓库 -m 提交信息\n</code></pre>\n<blockquote>\n<p>忽略文件</p>\n</blockquote>\n<p>主目录下建立 &quot;.gitignore&quot; 文件，此文件有如下规则:</p>\n<ol>\n<li>\n<p>忽略文件中的空行或以井号（#）开始的行将会被忽略。</p>\n</li>\n<li>\n<p>可以使用 Linux 通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号 [abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</p>\n</li>\n<li>\n<p>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</p>\n</li>\n<li>\n<p>如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</p>\n</li>\n<li>\n<p>如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件默认文件或目录都忽略）。</p>\n</li>\n</ol>\n<pre><code>#为注释 \n*.txt \t\t   #忽略所有 .txt结尾的文件 \n!lib.txt \t   #但lib.txt除外 \n/temp \t\t   #仅忽略项目根目录下的TODO文件,不包括其它目录temp build/ \t     #忽略build/目录下的所有文件 \ndoc/*.txt \t  #会忽略 doc/notes.txt 但不包括 doc/server/arch.txt\n</code></pre>\n<h2 id=\"git分支中常用指令\"><a class=\"markdownIt-Anchor\" href=\"#git分支中常用指令\">#</a> git 分支中常用指令</h2>\n<pre><code># 列出所有本地分支 \ngit branch \n\n# 列出所有远程分支 \ngit branch -r \n\n# 新建一个分支，但依然停留在当前分支 \ngit branch [branch-name] \n\n# 新建一个分支，并切换到该分支 \ngit checkout -b [branch] \n\n# 合并指定分支到当前分支 \ngit merge [branch] \n\n# 删除分支 \ngit branch -d [branch-name] \n\n# 删除远程分支 \ngit push origin --delete [branch-name] \n$ git branch -dr [remote/branch] \n</code></pre>\n<h2 id=\"使用gitee或者github\"><a class=\"markdownIt-Anchor\" href=\"#使用gitee或者github\">#</a> 使用 Gitee 或者 Github</h2>\n<p>设置本机绑定 SSH 公钥，实现免密码登录</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 进入 C:\\Users\\Administrator</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 新建.ssh文件</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 进入该文件夹，搜索栏cmd进入该路径下的命令提示符</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token list punctuation\">4.</span> 敲入ssh-keygen -t rsa -C \"\"   生成公钥</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token list punctuation\">5.</span> 打开GitHub设置配置ssh：将.ssh下生成的pub公钥打开复制即可</pre></td></tr></table></figure><p>测试是否成功</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ssh -T git@github.com</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ssh -T git@gitee.com</pre></td></tr></table></figure>",
            "tags": [
                "Git"
            ]
        }
    ]
}